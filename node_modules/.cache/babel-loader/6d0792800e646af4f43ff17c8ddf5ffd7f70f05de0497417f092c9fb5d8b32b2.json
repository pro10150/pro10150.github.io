{"ast":null,"code":"import { useMemo } from 'react';\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\r\n * Create and returns a single callback ref composed from two other Refs.\r\n *\r\n * ```tsx\r\n * const Button = React.forwardRef((props, ref) => {\r\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\r\n *   const mergedRef = useMergedRefs(ref, attachRef);\r\n *\r\n *   return <button ref={mergedRef} {...props}/>\r\n * })\r\n * ```\r\n *\r\n * @param refA A Callback or mutable Ref\r\n * @param refB A Callback or mutable Ref\r\n * @category refs\r\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\nexport default useMergedRefs;","map":{"version":3,"names":["useMemo","toFnRef","ref","value","current","mergeRefs","refA","refB","a","b","useMergedRefs"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@restart/hooks/esm/useMergedRefs.js"],"sourcesContent":["import { useMemo } from 'react';\r\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\r\n  ref.current = value;\r\n};\r\nexport function mergeRefs(refA, refB) {\r\n  const a = toFnRef(refA);\r\n  const b = toFnRef(refB);\r\n  return value => {\r\n    if (a) a(value);\r\n    if (b) b(value);\r\n  };\r\n}\r\n\r\n/**\r\n * Create and returns a single callback ref composed from two other Refs.\r\n *\r\n * ```tsx\r\n * const Button = React.forwardRef((props, ref) => {\r\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\r\n *   const mergedRef = useMergedRefs(ref, attachRef);\r\n *\r\n *   return <button ref={mergedRef} {...props}/>\r\n * })\r\n * ```\r\n *\r\n * @param refA A Callback or mutable Ref\r\n * @param refB A Callback or mutable Ref\r\n * @category refs\r\n */\r\nfunction useMergedRefs(refA, refB) {\r\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\r\n}\r\nexport default useMergedRefs;"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAGC,GAAG;EAAA,OAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,UAAU,GAAGA,GAAG,GAAG,UAAAC,KAAK,EAAI;IACxED,GAAG,CAACE,OAAO,GAAGD,KAAK;EACrB,CAAC;AAAA;AACD,OAAO,SAASE,SAASA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACpC,IAAMC,CAAC,GAAGP,OAAO,CAACK,IAAI,CAAC;EACvB,IAAMG,CAAC,GAAGR,OAAO,CAACM,IAAI,CAAC;EACvB,OAAO,UAAAJ,KAAK,EAAI;IACd,IAAIK,CAAC,EAAEA,CAAC,CAACL,KAAK,CAAC;IACf,IAAIM,CAAC,EAAEA,CAAC,CAACN,KAAK,CAAC;EACjB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,aAAaA,CAACJ,IAAI,EAAEC,IAAI,EAAE;EACjC,OAAOP,OAAO,CAAC;IAAA,OAAMK,SAAS,CAACC,IAAI,EAAEC,IAAI,CAAC;EAAA,GAAE,CAACD,IAAI,EAAEC,IAAI,CAAC,CAAC;AAC3D;AACA,eAAeG,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}