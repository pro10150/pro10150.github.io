{"ast":null,"code":"\"use client\";\n\n// src/use-autocomplete.ts\nimport _objectSpread from \"C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"ref\", \"as\", \"label\", \"isLoading\", \"menuTrigger\", \"filterOptions\", \"children\", \"selectorIcon\", \"clearIcon\", \"scrollRef\", \"defaultFilter\", \"endContent\", \"allowsEmptyCollection\", \"shouldCloseOnBlur\", \"popoverProps\", \"inputProps\", \"scrollShadowProps\", \"listboxProps\", \"selectorButtonProps\", \"clearButtonProps\", \"showScrollIndicators\", \"allowsCustomValue\", \"className\", \"classNames\", \"onOpenChange\", \"onClose\"];\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { autocomplete } from \"@nextui-org/theme\";\nimport { useFilter } from \"@react-aria/i18n\";\nimport { useComboBox } from \"@react-aria/combobox\";\nimport { useComboBoxState } from \"@react-stately/combobox\";\nimport { useDOMRef } from \"@nextui-org/react-utils\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { chain, mergeProps } from \"@react-aria/utils\";\nfunction useAutocomplete(originalProps) {\n  var _a, _b, _c;\n  const [props, variantProps] = mapPropsVariants(originalProps, autocomplete.variantKeys);\n  const disableAnimation = (_a = originalProps.disableAnimation) != null ? _a : false;\n  const isClearable = originalProps.disableClearable !== void 0 ? !originalProps.disableClearable : originalProps.isClearable;\n  const {\n      ref,\n      as,\n      label,\n      isLoading,\n      menuTrigger = \"focus\",\n      filterOptions = {\n        sensitivity: \"base\"\n      },\n      children,\n      selectorIcon,\n      clearIcon,\n      scrollRef: scrollRefProp,\n      defaultFilter,\n      endContent,\n      allowsEmptyCollection = true,\n      shouldCloseOnBlur = true,\n      popoverProps = {},\n      inputProps: userInputProps = {},\n      scrollShadowProps = {},\n      listboxProps = {},\n      selectorButtonProps = {},\n      clearButtonProps = {},\n      showScrollIndicators = true,\n      allowsCustomValue = false,\n      className,\n      classNames,\n      onOpenChange,\n      onClose\n    } = props,\n    otherProps = _objectWithoutProperties(props, _excluded);\n  const {\n    contains\n  } = useFilter(filterOptions);\n  const state = useComboBoxState(_objectSpread(_objectSpread({}, originalProps), {}, {\n    children,\n    menuTrigger,\n    shouldCloseOnBlur,\n    allowsEmptyCollection,\n    defaultFilter: defaultFilter && typeof defaultFilter === \"function\" ? defaultFilter : contains,\n    onOpenChange: (open, menuTrigger2) => {\n      onOpenChange == null ? void 0 : onOpenChange(open, menuTrigger2);\n      if (!open) {\n        onClose == null ? void 0 : onClose();\n      }\n    }\n  }));\n  const buttonRef = useRef(null);\n  const inputWrapperRef = useRef(null);\n  const listBoxRef = useRef(null);\n  const popoverRef = useRef(null);\n  const inputRef = useDOMRef(ref);\n  const scrollShadowRef = useDOMRef(scrollRefProp);\n  const slotsProps = {\n    inputProps: mergeProps({\n      label,\n      ref: inputRef,\n      wrapperRef: inputWrapperRef,\n      onClick: () => {\n        if (!state.isOpen && !!state.selectedItem) {\n          state.open();\n        }\n      },\n      isClearable: false,\n      disableAnimation\n    }, userInputProps),\n    popoverProps: mergeProps({\n      offset: 5,\n      placement: \"bottom\",\n      triggerScaleOnOpen: false,\n      disableAnimation\n    }, popoverProps),\n    scrollShadowProps: mergeProps({\n      ref: scrollShadowRef,\n      isEnabled: (_b = showScrollIndicators && state.collection.size > 5) != null ? _b : true,\n      hideScrollBar: true,\n      offset: 15\n    }, scrollShadowProps),\n    listboxProps: mergeProps({\n      hideEmptyContent: allowsCustomValue,\n      emptyContent: \"No results found.\",\n      disableAnimation\n    }, listboxProps),\n    selectorButtonProps: mergeProps({\n      isLoading,\n      size: \"sm\",\n      variant: \"light\",\n      radius: \"full\",\n      color: (originalProps == null ? void 0 : originalProps.isInvalid) ? \"danger\" : originalProps == null ? void 0 : originalProps.color,\n      isIconOnly: true,\n      disableAnimation\n    }, selectorButtonProps),\n    clearButtonProps: mergeProps({\n      size: \"sm\",\n      variant: \"light\",\n      radius: \"full\",\n      color: (originalProps == null ? void 0 : originalProps.isInvalid) ? \"danger\" : originalProps == null ? void 0 : originalProps.color,\n      isIconOnly: true,\n      disableAnimation\n    }, clearButtonProps)\n  };\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const isOpen = ((_c = slotsProps.listboxProps) == null ? void 0 : _c.hideEmptyContent) ? state.isOpen && !!state.collection.size : state.isOpen;\n  useEffect(() => {\n    if (isOpen && popoverRef.current && inputWrapperRef.current) {\n      let rect = inputWrapperRef.current.getBoundingClientRect();\n      let popover = popoverRef.current;\n      popover.style.width = rect.width + \"px\";\n    }\n  }, [isOpen]);\n  useEffect(() => {\n    if (!isOpen && !state.selectedItem && inputRef.current && !allowsCustomValue) {\n      inputRef.current.blur();\n    }\n  }, [isOpen, allowsCustomValue]);\n  const {\n    buttonProps,\n    inputProps,\n    listBoxProps\n  } = useComboBox(_objectSpread(_objectSpread({}, originalProps), {}, {\n    inputRef,\n    buttonRef,\n    listBoxRef,\n    popoverRef\n  }), state);\n  const Component = as || \"div\";\n  const slots = useMemo(() => autocomplete(_objectSpread(_objectSpread({}, variantProps), {}, {\n    isClearable,\n    disableAnimation,\n    className\n  })), [...Object.values(variantProps), isClearable, disableAnimation, className]);\n  const onClear = useCallback(() => {\n    state.setInputValue(\"\");\n    state.setSelectedKey(null);\n  }, [state]);\n  const onFocus = useCallback(isFocused => {\n    var _a2;\n    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n    state.setFocused(isFocused);\n  }, [state, inputRef]);\n  const getBaseProps = () => ({\n    \"data-invalid\": dataAttr(originalProps == null ? void 0 : originalProps.isInvalid),\n    \"data-open\": dataAttr(state.isOpen),\n    className: slots.base({\n      class: baseStyles\n    })\n  });\n  const getSelectorButtonProps = () => {\n    var _a2;\n    return _objectSpread(_objectSpread({\n      ref: buttonRef\n    }, mergeProps(buttonProps, slotsProps.selectorButtonProps)), {}, {\n      \"data-open\": dataAttr(state.isOpen),\n      className: slots.selectorButton({\n        class: clsx(classNames == null ? void 0 : classNames.selectorButton, (_a2 = slotsProps.selectorButtonProps) == null ? void 0 : _a2.className)\n      })\n    });\n  };\n  const getClearButtonProps = () => {\n    var _a2, _b2;\n    return _objectSpread(_objectSpread({}, mergeProps(buttonProps, slotsProps.clearButtonProps)), {}, {\n      onPress: e => {\n        var _a3, _b3;\n        (_b3 = (_a3 = slotsProps.clearButtonProps) == null ? void 0 : _a3.onPress) == null ? void 0 : _b3.call(_a3, e);\n        if (state.selectedItem) {\n          onClear();\n        } else {\n          const inputFocused = inputRef.current === document.activeElement;\n          allowsCustomValue && state.setInputValue(\"\");\n          !inputFocused && onFocus(true);\n        }\n      },\n      \"data-visible\": !!state.selectedItem || ((_a2 = state.inputValue) == null ? void 0 : _a2.length) > 0,\n      className: slots.clearButton({\n        class: clsx(classNames == null ? void 0 : classNames.clearButton, (_b2 = slotsProps.clearButtonProps) == null ? void 0 : _b2.className)\n      })\n    });\n  };\n  const getInputProps = () => _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, slotsProps.inputProps), otherProps), inputProps), {}, {\n    onClick: chain(slotsProps.inputProps.onClick, otherProps.onClick)\n  });\n  const getListBoxProps = () => _objectSpread({\n    state,\n    ref: listBoxRef,\n    shouldHighlightOnFocus: true\n  }, mergeProps(slotsProps.listboxProps, listBoxProps));\n  const getPopoverProps = function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a2, _b2;\n    return _objectSpread(_objectSpread({\n      state,\n      ref: popoverRef,\n      triggerRef: inputWrapperRef,\n      scrollRef: listBoxRef,\n      triggerType: \"listbox\"\n    }, mergeProps(slotsProps.popoverProps, props2)), {}, {\n      classNames: {\n        content: slots.popoverContent({\n          class: clsx(classNames == null ? void 0 : classNames.popoverContent, (_b2 = (_a2 = slotsProps.popoverProps) == null ? void 0 : _a2.classNames) == null ? void 0 : _b2[\"content\"], props2.className)\n        })\n      }\n    });\n  };\n  const getListBoxWrapperProps = function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a2;\n    return _objectSpread(_objectSpread({}, mergeProps(slotsProps.scrollShadowProps, props2)), {}, {\n      className: slots.listboxWrapper({\n        class: clsx(classNames == null ? void 0 : classNames.listboxWrapper, (_a2 = slotsProps.scrollShadowProps) == null ? void 0 : _a2.className, props2 == null ? void 0 : props2.className)\n      })\n    });\n  };\n  const getEndContentWrapperProps = function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      className: slots.endContentWrapper({\n        class: clsx(classNames == null ? void 0 : classNames.endContentWrapper, props2 == null ? void 0 : props2.className)\n      }),\n      onClick: e => {\n        const inputFocused = inputRef.current === document.activeElement;\n        if (!inputFocused && !state.isFocused && e.currentTarget === e.target) {\n          onFocus(true);\n        }\n      }\n    };\n  };\n  return {\n    Component,\n    inputRef,\n    label,\n    state,\n    slots,\n    classNames,\n    isLoading,\n    clearIcon,\n    isOpen,\n    endContent,\n    isClearable,\n    disableAnimation,\n    allowsCustomValue,\n    selectorIcon,\n    getBaseProps,\n    getInputProps,\n    getListBoxProps,\n    getPopoverProps,\n    getClearButtonProps,\n    getSelectorButtonProps,\n    getListBoxWrapperProps,\n    getEndContentWrapperProps\n  };\n}\nexport { useAutocomplete };","map":{"version":3,"names":["_objectSpread","_objectWithoutProperties","_excluded","mapPropsVariants","autocomplete","useFilter","useComboBox","useComboBoxState","useDOMRef","useCallback","useEffect","useMemo","useRef","clsx","dataAttr","chain","mergeProps","useAutocomplete","originalProps","_a","_b","_c","props","variantProps","variantKeys","disableAnimation","isClearable","disableClearable","ref","as","label","isLoading","menuTrigger","filterOptions","sensitivity","children","selectorIcon","clearIcon","scrollRef","scrollRefProp","defaultFilter","endContent","allowsEmptyCollection","shouldCloseOnBlur","popoverProps","inputProps","userInputProps","scrollShadowProps","listboxProps","selectorButtonProps","clearButtonProps","showScrollIndicators","allowsCustomValue","className","classNames","onOpenChange","onClose","otherProps","contains","state","open","menuTrigger2","buttonRef","inputWrapperRef","listBoxRef","popoverRef","inputRef","scrollShadowRef","slotsProps","wrapperRef","onClick","isOpen","selectedItem","offset","placement","triggerScaleOnOpen","isEnabled","collection","size","hideScrollBar","hideEmptyContent","emptyContent","variant","radius","color","isInvalid","isIconOnly","baseStyles","base","current","rect","getBoundingClientRect","popover","style","width","blur","buttonProps","listBoxProps","Component","slots","Object","values","onClear","setInputValue","setSelectedKey","onFocus","isFocused","_a2","focus","setFocused","getBaseProps","class","getSelectorButtonProps","selectorButton","getClearButtonProps","_b2","onPress","e","_a3","_b3","call","inputFocused","document","activeElement","inputValue","length","clearButton","getInputProps","getListBoxProps","shouldHighlightOnFocus","getPopoverProps","props2","arguments","undefined","triggerRef","triggerType","content","popoverContent","getListBoxWrapperProps","listboxWrapper","getEndContentWrapperProps","endContentWrapper","currentTarget","target"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@nextui-org/autocomplete/dist/chunk-SGJY6NTV.mjs"],"sourcesContent":["\"use client\";\r\n\r\n// src/use-autocomplete.ts\r\nimport { mapPropsVariants } from \"@nextui-org/system\";\r\nimport { autocomplete } from \"@nextui-org/theme\";\r\nimport { useFilter } from \"@react-aria/i18n\";\r\nimport { useComboBox } from \"@react-aria/combobox\";\r\nimport { useComboBoxState } from \"@react-stately/combobox\";\r\nimport { useDOMRef } from \"@nextui-org/react-utils\";\r\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\r\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\r\nimport { chain, mergeProps } from \"@react-aria/utils\";\r\nfunction useAutocomplete(originalProps) {\r\n  var _a, _b, _c;\r\n  const [props, variantProps] = mapPropsVariants(originalProps, autocomplete.variantKeys);\r\n  const disableAnimation = (_a = originalProps.disableAnimation) != null ? _a : false;\r\n  const isClearable = originalProps.disableClearable !== void 0 ? !originalProps.disableClearable : originalProps.isClearable;\r\n  const {\r\n    ref,\r\n    as,\r\n    label,\r\n    isLoading,\r\n    menuTrigger = \"focus\",\r\n    filterOptions = {\r\n      sensitivity: \"base\"\r\n    },\r\n    children,\r\n    selectorIcon,\r\n    clearIcon,\r\n    scrollRef: scrollRefProp,\r\n    defaultFilter,\r\n    endContent,\r\n    allowsEmptyCollection = true,\r\n    shouldCloseOnBlur = true,\r\n    popoverProps = {},\r\n    inputProps: userInputProps = {},\r\n    scrollShadowProps = {},\r\n    listboxProps = {},\r\n    selectorButtonProps = {},\r\n    clearButtonProps = {},\r\n    showScrollIndicators = true,\r\n    allowsCustomValue = false,\r\n    className,\r\n    classNames,\r\n    onOpenChange,\r\n    onClose,\r\n    ...otherProps\r\n  } = props;\r\n  const { contains } = useFilter(filterOptions);\r\n  const state = useComboBoxState({\r\n    ...originalProps,\r\n    children,\r\n    menuTrigger,\r\n    shouldCloseOnBlur,\r\n    allowsEmptyCollection,\r\n    defaultFilter: defaultFilter && typeof defaultFilter === \"function\" ? defaultFilter : contains,\r\n    onOpenChange: (open, menuTrigger2) => {\r\n      onOpenChange == null ? void 0 : onOpenChange(open, menuTrigger2);\r\n      if (!open) {\r\n        onClose == null ? void 0 : onClose();\r\n      }\r\n    }\r\n  });\r\n  const buttonRef = useRef(null);\r\n  const inputWrapperRef = useRef(null);\r\n  const listBoxRef = useRef(null);\r\n  const popoverRef = useRef(null);\r\n  const inputRef = useDOMRef(ref);\r\n  const scrollShadowRef = useDOMRef(scrollRefProp);\r\n  const slotsProps = {\r\n    inputProps: mergeProps(\r\n      {\r\n        label,\r\n        ref: inputRef,\r\n        wrapperRef: inputWrapperRef,\r\n        onClick: () => {\r\n          if (!state.isOpen && !!state.selectedItem) {\r\n            state.open();\r\n          }\r\n        },\r\n        isClearable: false,\r\n        disableAnimation\r\n      },\r\n      userInputProps\r\n    ),\r\n    popoverProps: mergeProps(\r\n      {\r\n        offset: 5,\r\n        placement: \"bottom\",\r\n        triggerScaleOnOpen: false,\r\n        disableAnimation\r\n      },\r\n      popoverProps\r\n    ),\r\n    scrollShadowProps: mergeProps(\r\n      {\r\n        ref: scrollShadowRef,\r\n        isEnabled: (_b = showScrollIndicators && state.collection.size > 5) != null ? _b : true,\r\n        hideScrollBar: true,\r\n        offset: 15\r\n      },\r\n      scrollShadowProps\r\n    ),\r\n    listboxProps: mergeProps(\r\n      {\r\n        hideEmptyContent: allowsCustomValue,\r\n        emptyContent: \"No results found.\",\r\n        disableAnimation\r\n      },\r\n      listboxProps\r\n    ),\r\n    selectorButtonProps: mergeProps(\r\n      {\r\n        isLoading,\r\n        size: \"sm\",\r\n        variant: \"light\",\r\n        radius: \"full\",\r\n        color: (originalProps == null ? void 0 : originalProps.isInvalid) ? \"danger\" : originalProps == null ? void 0 : originalProps.color,\r\n        isIconOnly: true,\r\n        disableAnimation\r\n      },\r\n      selectorButtonProps\r\n    ),\r\n    clearButtonProps: mergeProps(\r\n      {\r\n        size: \"sm\",\r\n        variant: \"light\",\r\n        radius: \"full\",\r\n        color: (originalProps == null ? void 0 : originalProps.isInvalid) ? \"danger\" : originalProps == null ? void 0 : originalProps.color,\r\n        isIconOnly: true,\r\n        disableAnimation\r\n      },\r\n      clearButtonProps\r\n    )\r\n  };\r\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\r\n  const isOpen = ((_c = slotsProps.listboxProps) == null ? void 0 : _c.hideEmptyContent) ? state.isOpen && !!state.collection.size : state.isOpen;\r\n  useEffect(() => {\r\n    if (isOpen && popoverRef.current && inputWrapperRef.current) {\r\n      let rect = inputWrapperRef.current.getBoundingClientRect();\r\n      let popover = popoverRef.current;\r\n      popover.style.width = rect.width + \"px\";\r\n    }\r\n  }, [isOpen]);\r\n  useEffect(() => {\r\n    if (!isOpen && !state.selectedItem && inputRef.current && !allowsCustomValue) {\r\n      inputRef.current.blur();\r\n    }\r\n  }, [isOpen, allowsCustomValue]);\r\n  const { buttonProps, inputProps, listBoxProps } = useComboBox(\r\n    {\r\n      ...originalProps,\r\n      inputRef,\r\n      buttonRef,\r\n      listBoxRef,\r\n      popoverRef\r\n    },\r\n    state\r\n  );\r\n  const Component = as || \"div\";\r\n  const slots = useMemo(\r\n    () => autocomplete({\r\n      ...variantProps,\r\n      isClearable,\r\n      disableAnimation,\r\n      className\r\n    }),\r\n    [...Object.values(variantProps), isClearable, disableAnimation, className]\r\n  );\r\n  const onClear = useCallback(() => {\r\n    state.setInputValue(\"\");\r\n    state.setSelectedKey(null);\r\n  }, [state]);\r\n  const onFocus = useCallback(\r\n    (isFocused) => {\r\n      var _a2;\r\n      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\r\n      state.setFocused(isFocused);\r\n    },\r\n    [state, inputRef]\r\n  );\r\n  const getBaseProps = () => ({\r\n    \"data-invalid\": dataAttr(originalProps == null ? void 0 : originalProps.isInvalid),\r\n    \"data-open\": dataAttr(state.isOpen),\r\n    className: slots.base({ class: baseStyles })\r\n  });\r\n  const getSelectorButtonProps = () => {\r\n    var _a2;\r\n    return {\r\n      ref: buttonRef,\r\n      ...mergeProps(buttonProps, slotsProps.selectorButtonProps),\r\n      \"data-open\": dataAttr(state.isOpen),\r\n      className: slots.selectorButton({\r\n        class: clsx(classNames == null ? void 0 : classNames.selectorButton, (_a2 = slotsProps.selectorButtonProps) == null ? void 0 : _a2.className)\r\n      })\r\n    };\r\n  };\r\n  const getClearButtonProps = () => {\r\n    var _a2, _b2;\r\n    return {\r\n      ...mergeProps(buttonProps, slotsProps.clearButtonProps),\r\n      onPress: (e) => {\r\n        var _a3, _b3;\r\n        (_b3 = (_a3 = slotsProps.clearButtonProps) == null ? void 0 : _a3.onPress) == null ? void 0 : _b3.call(_a3, e);\r\n        if (state.selectedItem) {\r\n          onClear();\r\n        } else {\r\n          const inputFocused = inputRef.current === document.activeElement;\r\n          allowsCustomValue && state.setInputValue(\"\");\r\n          !inputFocused && onFocus(true);\r\n        }\r\n      },\r\n      \"data-visible\": !!state.selectedItem || ((_a2 = state.inputValue) == null ? void 0 : _a2.length) > 0,\r\n      className: slots.clearButton({\r\n        class: clsx(classNames == null ? void 0 : classNames.clearButton, (_b2 = slotsProps.clearButtonProps) == null ? void 0 : _b2.className)\r\n      })\r\n    };\r\n  };\r\n  const getInputProps = () => ({\r\n    ...slotsProps.inputProps,\r\n    ...otherProps,\r\n    ...inputProps,\r\n    onClick: chain(slotsProps.inputProps.onClick, otherProps.onClick)\r\n  });\r\n  const getListBoxProps = () => ({\r\n    state,\r\n    ref: listBoxRef,\r\n    shouldHighlightOnFocus: true,\r\n    ...mergeProps(slotsProps.listboxProps, listBoxProps)\r\n  });\r\n  const getPopoverProps = (props2 = {}) => {\r\n    var _a2, _b2;\r\n    return {\r\n      state,\r\n      ref: popoverRef,\r\n      triggerRef: inputWrapperRef,\r\n      scrollRef: listBoxRef,\r\n      triggerType: \"listbox\",\r\n      ...mergeProps(slotsProps.popoverProps, props2),\r\n      classNames: {\r\n        content: slots.popoverContent({\r\n          class: clsx(\r\n            classNames == null ? void 0 : classNames.popoverContent,\r\n            (_b2 = (_a2 = slotsProps.popoverProps) == null ? void 0 : _a2.classNames) == null ? void 0 : _b2[\"content\"],\r\n            props2.className\r\n          )\r\n        })\r\n      }\r\n    };\r\n  };\r\n  const getListBoxWrapperProps = (props2 = {}) => {\r\n    var _a2;\r\n    return {\r\n      ...mergeProps(slotsProps.scrollShadowProps, props2),\r\n      className: slots.listboxWrapper({\r\n        class: clsx(\r\n          classNames == null ? void 0 : classNames.listboxWrapper,\r\n          (_a2 = slotsProps.scrollShadowProps) == null ? void 0 : _a2.className,\r\n          props2 == null ? void 0 : props2.className\r\n        )\r\n      })\r\n    };\r\n  };\r\n  const getEndContentWrapperProps = (props2 = {}) => ({\r\n    className: slots.endContentWrapper({\r\n      class: clsx(classNames == null ? void 0 : classNames.endContentWrapper, props2 == null ? void 0 : props2.className)\r\n    }),\r\n    onClick: (e) => {\r\n      const inputFocused = inputRef.current === document.activeElement;\r\n      if (!inputFocused && !state.isFocused && e.currentTarget === e.target) {\r\n        onFocus(true);\r\n      }\r\n    }\r\n  });\r\n  return {\r\n    Component,\r\n    inputRef,\r\n    label,\r\n    state,\r\n    slots,\r\n    classNames,\r\n    isLoading,\r\n    clearIcon,\r\n    isOpen,\r\n    endContent,\r\n    isClearable,\r\n    disableAnimation,\r\n    allowsCustomValue,\r\n    selectorIcon,\r\n    getBaseProps,\r\n    getInputProps,\r\n    getListBoxProps,\r\n    getPopoverProps,\r\n    getClearButtonProps,\r\n    getSelectorButtonProps,\r\n    getListBoxWrapperProps,\r\n    getEndContentWrapperProps\r\n  };\r\n}\r\n\r\nexport {\r\n  useAutocomplete\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}