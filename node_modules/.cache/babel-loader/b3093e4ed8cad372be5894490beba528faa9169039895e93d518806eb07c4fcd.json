{"ast":null,"code":"import _classCallCheck from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\nexport var QuarterParser = /*#__PURE__*/function (_Parser) {\n  _inherits(QuarterParser, _Parser);\n  var _super = _createSuper(QuarterParser);\n  function QuarterParser() {\n    var _this;\n    _classCallCheck(this, QuarterParser);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"priority\", 120);\n    _defineProperty(_assertThisInitialized(_this), \"incompatibleTokens\", [\"Y\", \"R\", \"q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"]);\n    return _this;\n  }\n  _createClass(QuarterParser, [{\n    key: \"parse\",\n    value: function parse(dateString, token, match) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case \"Q\":\n        case \"QQ\":\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, dateString);\n        // 1st, 2nd, 3rd, 4th\n        case \"Qo\":\n          return match.ordinalNumber(dateString, {\n            unit: \"quarter\"\n          });\n        // Q1, Q2, Q3, Q4\n        case \"QQQ\":\n          return match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\"\n          }) || match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n        case \"QQQQQ\":\n          return match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n        // 1st quarter, 2nd quarter, ...\n        case \"QQQQ\":\n        default:\n          return match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\"\n          }) || match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\"\n          }) || match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(_date, value) {\n      return value >= 1 && value <= 4;\n    }\n  }, {\n    key: \"set\",\n    value: function set(date, _flags, value) {\n      date.setMonth((value - 1) * 3, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n  }]);\n  return QuarterParser;\n}(Parser);","map":{"version":3,"names":["Parser","parseNDigits","QuarterParser","_Parser","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","value","parse","dateString","token","match","ordinalNumber","unit","quarter","width","context","validate","_date","set","date","_flags","setMonth","setHours"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs"],"sourcesContent":["import { Parser } from \"../Parser.mjs\";\r\nimport { parseNDigits } from \"../utils.mjs\";\r\n\r\nexport class QuarterParser extends Parser {\r\n  priority = 120;\r\n\r\n  parse(dateString, token, match) {\r\n    switch (token) {\r\n      // 1, 2, 3, 4\r\n      case \"Q\":\r\n      case \"QQ\": // 01, 02, 03, 04\r\n        return parseNDigits(token.length, dateString);\r\n      // 1st, 2nd, 3rd, 4th\r\n      case \"Qo\":\r\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\r\n      // Q1, Q2, Q3, Q4\r\n      case \"QQQ\":\r\n        return (\r\n          match.quarter(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"formatting\",\r\n          }) ||\r\n          match.quarter(dateString, {\r\n            width: \"narrow\",\r\n            context: \"formatting\",\r\n          })\r\n        );\r\n\r\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\r\n      case \"QQQQQ\":\r\n        return match.quarter(dateString, {\r\n          width: \"narrow\",\r\n          context: \"formatting\",\r\n        });\r\n      // 1st quarter, 2nd quarter, ...\r\n      case \"QQQQ\":\r\n      default:\r\n        return (\r\n          match.quarter(dateString, {\r\n            width: \"wide\",\r\n            context: \"formatting\",\r\n          }) ||\r\n          match.quarter(dateString, {\r\n            width: \"abbreviated\",\r\n            context: \"formatting\",\r\n          }) ||\r\n          match.quarter(dateString, {\r\n            width: \"narrow\",\r\n            context: \"formatting\",\r\n          })\r\n        );\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value >= 1 && value <= 4;\r\n  }\r\n\r\n  set(date, _flags, value) {\r\n    date.setMonth((value - 1) * 3, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n  }\r\n\r\n  incompatibleTokens = [\r\n    \"Y\",\r\n    \"R\",\r\n    \"q\",\r\n    \"M\",\r\n    \"L\",\r\n    \"w\",\r\n    \"I\",\r\n    \"d\",\r\n    \"D\",\r\n    \"i\",\r\n    \"e\",\r\n    \"c\",\r\n    \"t\",\r\n    \"T\",\r\n  ];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}