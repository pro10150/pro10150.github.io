{"ast":null,"code":"import _slicedToArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallback, useState } from 'react';\n\n/**\r\n * Updates state, partial updates are merged into existing state values\r\n */\n\n/**\r\n * Mimics a React class component's state model, of having a single unified\r\n * `state` object and an updater that merges updates into the existing state, as\r\n * opposed to replacing it.\r\n *\r\n * ```js\r\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\r\n *\r\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\r\n *\r\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\r\n * ```\r\n *\r\n * @param initialState The initial state object\r\n */\nexport default function useMergeState(initialState) {\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var updater = useCallback(function (update) {\n    if (update === null) return;\n    if (typeof update === 'function') {\n      setState(function (state) {\n        var nextState = update(state);\n        return nextState == null ? state : Object.assign({}, state, nextState);\n      });\n    } else {\n      setState(function (state) {\n        return Object.assign({}, state, update);\n      });\n    }\n  }, [setState]);\n  return [state, updater];\n}","map":{"version":3,"names":["useCallback","useState","useMergeState","initialState","_useState","_useState2","_slicedToArray","state","setState","updater","update","nextState","Object","assign"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@restart/hooks/esm/useMergeState.js"],"sourcesContent":["import { useCallback, useState } from 'react';\r\n\r\n/**\r\n * Updates state, partial updates are merged into existing state values\r\n */\r\n\r\n/**\r\n * Mimics a React class component's state model, of having a single unified\r\n * `state` object and an updater that merges updates into the existing state, as\r\n * opposed to replacing it.\r\n *\r\n * ```js\r\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\r\n *\r\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\r\n *\r\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\r\n * ```\r\n *\r\n * @param initialState The initial state object\r\n */\r\nexport default function useMergeState(initialState) {\r\n  const [state, setState] = useState(initialState);\r\n  const updater = useCallback(update => {\r\n    if (update === null) return;\r\n    if (typeof update === 'function') {\r\n      setState(state => {\r\n        const nextState = update(state);\r\n        return nextState == null ? state : Object.assign({}, state, nextState);\r\n      });\r\n    } else {\r\n      setState(state => Object.assign({}, state, update));\r\n    }\r\n  }, [setState]);\r\n  return [state, updater];\r\n}"],"mappings":";AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,OAAO;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,aAAaA,CAACC,YAAY,EAAE;EAClD,IAAAC,SAAA,GAA0BH,QAAQ,CAACE,YAAY,CAAC;IAAAE,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAMI,OAAO,GAAGT,WAAW,CAAC,UAAAU,MAAM,EAAI;IACpC,IAAIA,MAAM,KAAK,IAAI,EAAE;IACrB,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;MAChCF,QAAQ,CAAC,UAAAD,KAAK,EAAI;QAChB,IAAMI,SAAS,GAAGD,MAAM,CAACH,KAAK,CAAC;QAC/B,OAAOI,SAAS,IAAI,IAAI,GAAGJ,KAAK,GAAGK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,KAAK,EAAEI,SAAS,CAAC;MACxE,CAAC,CAAC;IACJ,CAAC,MAAM;MACLH,QAAQ,CAAC,UAAAD,KAAK;QAAA,OAAIK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,KAAK,EAAEG,MAAM,CAAC;MAAA,EAAC;IACrD;EACF,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EACd,OAAO,CAACD,KAAK,EAAEE,OAAO,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}