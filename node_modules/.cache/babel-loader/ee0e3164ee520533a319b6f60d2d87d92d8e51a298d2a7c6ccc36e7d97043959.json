{"ast":null,"code":"import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n  var _useContext = useContext(MotionContext),\n    parent = _useContext.visualElement;\n  var lazyContext = useContext(LazyContext);\n  var presenceContext = useContext(PresenceContext);\n  var reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n  var visualElementRef = useRef();\n  /**\r\n   * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\r\n   */\n  createVisualElement = createVisualElement || lazyContext.renderer;\n  if (!visualElementRef.current && createVisualElement) {\n    visualElementRef.current = createVisualElement(Component, {\n      visualState: visualState,\n      parent: parent,\n      props: props,\n      presenceContext: presenceContext,\n      blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,\n      reducedMotionConfig: reducedMotionConfig\n    });\n  }\n  var visualElement = visualElementRef.current;\n  useInsertionEffect(function () {\n    visualElement && visualElement.update(props, presenceContext);\n  });\n  /**\r\n   * Cache this value as we want to know whether HandoffAppearAnimations\r\n   * was present on initial render - it will be deleted after this.\r\n   */\n  var wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n  useIsomorphicLayoutEffect(function () {\n    if (!visualElement) return;\n    microtask.postRender(visualElement.render);\n    /**\r\n     * Ideally this function would always run in a useEffect.\r\n     *\r\n     * However, if we have optimised appear animations to handoff from,\r\n     * it needs to happen synchronously to ensure there's no flash of\r\n     * incorrect styles in the event of a hydration error.\r\n     *\r\n     * So if we detect a situtation where optimised appear animations\r\n     * are running, we use useLayoutEffect to trigger animations.\r\n     */\n    if (wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n  });\n  useEffect(function () {\n    if (!visualElement) return;\n    visualElement.updateFeatures();\n    if (!wantsHandoff.current && visualElement.animationState) {\n      visualElement.animationState.animateChanges();\n    }\n    if (wantsHandoff.current) {\n      wantsHandoff.current = false;\n      // This ensures all future calls to animateChanges() will run in useEffect\n      window.HandoffComplete = true;\n    }\n  });\n  return visualElement;\n}\nexport { useVisualElement };","map":{"version":3,"names":["useContext","useRef","useInsertionEffect","useEffect","PresenceContext","MotionContext","useIsomorphicLayoutEffect","LazyContext","MotionConfigContext","optimizedAppearDataAttribute","microtask","useVisualElement","Component","visualState","props","createVisualElement","_useContext","parent","visualElement","lazyContext","presenceContext","reducedMotionConfig","reducedMotion","visualElementRef","renderer","current","blockInitialAnimation","initial","update","wantsHandoff","Boolean","window","HandoffComplete","postRender","render","animationState","animateChanges","updateFeatures"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\r\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\r\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\r\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\r\nimport { LazyContext } from '../../context/LazyContext.mjs';\r\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\r\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\r\nimport { microtask } from '../../frameloop/microtask.mjs';\r\n\r\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\r\n    const { visualElement: parent } = useContext(MotionContext);\r\n    const lazyContext = useContext(LazyContext);\r\n    const presenceContext = useContext(PresenceContext);\r\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\r\n    const visualElementRef = useRef();\r\n    /**\r\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\r\n     */\r\n    createVisualElement = createVisualElement || lazyContext.renderer;\r\n    if (!visualElementRef.current && createVisualElement) {\r\n        visualElementRef.current = createVisualElement(Component, {\r\n            visualState,\r\n            parent,\r\n            props,\r\n            presenceContext,\r\n            blockInitialAnimation: presenceContext\r\n                ? presenceContext.initial === false\r\n                : false,\r\n            reducedMotionConfig,\r\n        });\r\n    }\r\n    const visualElement = visualElementRef.current;\r\n    useInsertionEffect(() => {\r\n        visualElement && visualElement.update(props, presenceContext);\r\n    });\r\n    /**\r\n     * Cache this value as we want to know whether HandoffAppearAnimations\r\n     * was present on initial render - it will be deleted after this.\r\n     */\r\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\r\n    useIsomorphicLayoutEffect(() => {\r\n        if (!visualElement)\r\n            return;\r\n        microtask.postRender(visualElement.render);\r\n        /**\r\n         * Ideally this function would always run in a useEffect.\r\n         *\r\n         * However, if we have optimised appear animations to handoff from,\r\n         * it needs to happen synchronously to ensure there's no flash of\r\n         * incorrect styles in the event of a hydration error.\r\n         *\r\n         * So if we detect a situtation where optimised appear animations\r\n         * are running, we use useLayoutEffect to trigger animations.\r\n         */\r\n        if (wantsHandoff.current && visualElement.animationState) {\r\n            visualElement.animationState.animateChanges();\r\n        }\r\n    });\r\n    useEffect(() => {\r\n        if (!visualElement)\r\n            return;\r\n        visualElement.updateFeatures();\r\n        if (!wantsHandoff.current && visualElement.animationState) {\r\n            visualElement.animationState.animateChanges();\r\n        }\r\n        if (wantsHandoff.current) {\r\n            wantsHandoff.current = false;\r\n            // This ensures all future calls to animateChanges() will run in useEffect\r\n            window.HandoffComplete = true;\r\n        }\r\n    });\r\n    return visualElement;\r\n}\r\n\r\nexport { useVisualElement };\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,kBAAkB,EAAEC,SAAS,QAAQ,OAAO;AACzE,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,mBAAmB,QAAQ,uCAAuC;AAC3E,SAASC,4BAA4B,QAAQ,8CAA8C;AAC3F,SAASC,SAAS,QAAQ,+BAA+B;AAEzD,SAASC,gBAAgBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,KAAK,EAAEC,mBAAmB,EAAE;EAC1E,IAAAC,WAAA,GAAkChB,UAAU,CAACK,aAAa,CAAC;IAApCY,MAAM,GAAAD,WAAA,CAArBE,aAAa;EACrB,IAAMC,WAAW,GAAGnB,UAAU,CAACO,WAAW,CAAC;EAC3C,IAAMa,eAAe,GAAGpB,UAAU,CAACI,eAAe,CAAC;EACnD,IAAMiB,mBAAmB,GAAGrB,UAAU,CAACQ,mBAAmB,CAAC,CAACc,aAAa;EACzE,IAAMC,gBAAgB,GAAGtB,MAAM,EAAE;EACjC;AACJ;AACA;EACIc,mBAAmB,GAAGA,mBAAmB,IAAII,WAAW,CAACK,QAAQ;EACjE,IAAI,CAACD,gBAAgB,CAACE,OAAO,IAAIV,mBAAmB,EAAE;IAClDQ,gBAAgB,CAACE,OAAO,GAAGV,mBAAmB,CAACH,SAAS,EAAE;MACtDC,WAAW,EAAXA,WAAW;MACXI,MAAM,EAANA,MAAM;MACNH,KAAK,EAALA,KAAK;MACLM,eAAe,EAAfA,eAAe;MACfM,qBAAqB,EAAEN,eAAe,GAChCA,eAAe,CAACO,OAAO,KAAK,KAAK,GACjC,KAAK;MACXN,mBAAmB,EAAnBA;IACJ,CAAC,CAAC;EACN;EACA,IAAMH,aAAa,GAAGK,gBAAgB,CAACE,OAAO;EAC9CvB,kBAAkB,CAAC,YAAM;IACrBgB,aAAa,IAAIA,aAAa,CAACU,MAAM,CAACd,KAAK,EAAEM,eAAe,CAAC;EACjE,CAAC,CAAC;EACF;AACJ;AACA;AACA;EACI,IAAMS,YAAY,GAAG5B,MAAM,CAAC6B,OAAO,CAAChB,KAAK,CAACL,4BAA4B,CAAC,IAAI,CAACsB,MAAM,CAACC,eAAe,CAAC,CAAC;EACpG1B,yBAAyB,CAAC,YAAM;IAC5B,IAAI,CAACY,aAAa,EACd;IACJR,SAAS,CAACuB,UAAU,CAACf,aAAa,CAACgB,MAAM,CAAC;IAC1C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAIL,YAAY,CAACJ,OAAO,IAAIP,aAAa,CAACiB,cAAc,EAAE;MACtDjB,aAAa,CAACiB,cAAc,CAACC,cAAc,EAAE;IACjD;EACJ,CAAC,CAAC;EACFjC,SAAS,CAAC,YAAM;IACZ,IAAI,CAACe,aAAa,EACd;IACJA,aAAa,CAACmB,cAAc,EAAE;IAC9B,IAAI,CAACR,YAAY,CAACJ,OAAO,IAAIP,aAAa,CAACiB,cAAc,EAAE;MACvDjB,aAAa,CAACiB,cAAc,CAACC,cAAc,EAAE;IACjD;IACA,IAAIP,YAAY,CAACJ,OAAO,EAAE;MACtBI,YAAY,CAACJ,OAAO,GAAG,KAAK;MAC5B;MACAM,MAAM,CAACC,eAAe,GAAG,IAAI;IACjC;EACJ,CAAC,CAAC;EACF,OAAOd,aAAa;AACxB;AAEA,SAASP,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}