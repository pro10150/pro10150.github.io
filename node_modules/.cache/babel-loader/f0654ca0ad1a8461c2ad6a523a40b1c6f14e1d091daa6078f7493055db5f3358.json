{"ast":null,"code":"import { addMinutes } from \"./addMinutes.mjs\";\nimport { startOfMinute } from \"./startOfMinute.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * The {@link eachMinuteOfInterval} function options.\r\n */\n\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\nexport function eachMinuteOfInterval(interval, options) {\n  var _options$step;\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var reversed = +startDate > +endDate;\n  var endTime = reversed ? +startDate : +endDate;\n  var currentDate = reversed ? endDate : startDate;\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  var dates = [];\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachMinuteOfInterval;","map":{"version":3,"names":["addMinutes","startOfMinute","toDate","eachMinuteOfInterval","interval","options","_options$step","startDate","start","endDate","end","reversed","endTime","currentDate","step","dates","push","reverse"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/date-fns/eachMinuteOfInterval.mjs"],"sourcesContent":["import { addMinutes } from \"./addMinutes.mjs\";\r\nimport { startOfMinute } from \"./startOfMinute.mjs\";\r\nimport { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link eachMinuteOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\r\nexport function eachMinuteOfInterval(interval, options) {\r\n  const startDate = startOfMinute(toDate(interval.start));\r\n  const endDate = toDate(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed ? +startDate : +endDate;\r\n  let currentDate = reversed ? endDate : startDate;\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate = addMinutes(currentDate, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachMinuteOfInterval;\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAAA,IAAAC,aAAA;EACtD,IAAMC,SAAS,GAAGN,aAAa,CAACC,MAAM,CAACE,QAAQ,CAACI,KAAK,CAAC,CAAC;EACvD,IAAMC,OAAO,GAAGP,MAAM,CAACE,QAAQ,CAACM,GAAG,CAAC;EAEpC,IAAIC,QAAQ,GAAG,CAACJ,SAAS,GAAG,CAACE,OAAO;EACpC,IAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACJ,SAAS,GAAG,CAACE,OAAO;EAChD,IAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGF,SAAS;EAEhD,IAAIO,IAAI,IAAAR,aAAA,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,IAAI,cAAAR,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC7B,IAAI,CAACQ,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZH,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,IAAMI,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACF,WAAW,IAAID,OAAO,EAAE;IAC9BG,KAAK,CAACC,IAAI,CAACd,MAAM,CAACW,WAAW,CAAC,CAAC;IAC/BA,WAAW,GAAGb,UAAU,CAACa,WAAW,EAAEC,IAAI,CAAC;EAC7C;EAEA,OAAOH,QAAQ,GAAGI,KAAK,CAACE,OAAO,EAAE,GAAGF,KAAK;AAC3C;;AAEA;AACA,eAAeZ,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}