{"ast":null,"code":"import _slicedToArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useReducer } from 'react';\n\n/**\r\n * Returns a function that triggers a component update. the hook equivalent to\r\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\r\n * is preferable but may be required in some advanced usages of refs for interop or\r\n * when direct DOM manipulation is required.\r\n *\r\n * ```ts\r\n * const forceUpdate = useForceUpdate();\r\n *\r\n * const updateOnClick = useCallback(() => {\r\n *  forceUpdate()\r\n * }, [forceUpdate])\r\n *\r\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\r\n * ```\r\n */\nexport default function useForceUpdate() {\n  // The toggling state value is designed to defeat React optimizations for skipping\n  // updates when they are strictly equal to the last state value\n  var _useReducer = useReducer(function (state) {\n      return !state;\n    }, false),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    dispatch = _useReducer2[1];\n  return dispatch;\n}","map":{"version":3,"names":["useReducer","useForceUpdate","_useReducer","state","_useReducer2","_slicedToArray","dispatch"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@restart/hooks/esm/useForceUpdate.js"],"sourcesContent":["import { useReducer } from 'react';\r\n\r\n/**\r\n * Returns a function that triggers a component update. the hook equivalent to\r\n * `this.forceUpdate()` in a class component. In most cases using a state value directly\r\n * is preferable but may be required in some advanced usages of refs for interop or\r\n * when direct DOM manipulation is required.\r\n *\r\n * ```ts\r\n * const forceUpdate = useForceUpdate();\r\n *\r\n * const updateOnClick = useCallback(() => {\r\n *  forceUpdate()\r\n * }, [forceUpdate])\r\n *\r\n * return <button type=\"button\" onClick={updateOnClick}>Hi there</button>\r\n * ```\r\n */\r\nexport default function useForceUpdate() {\r\n  // The toggling state value is designed to defeat React optimizations for skipping\r\n  // updates when they are strictly equal to the last state value\r\n  const [, dispatch] = useReducer(state => !state, false);\r\n  return dispatch;\r\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAAA,EAAG;EACvC;EACA;EACA,IAAAC,WAAA,GAAqBF,UAAU,CAAC,UAAAG,KAAK;MAAA,OAAI,CAACA,KAAK;IAAA,GAAE,KAAK,CAAC;IAAAC,YAAA,GAAAC,cAAA,CAAAH,WAAA;IAA9CI,QAAQ,GAAAF,YAAA;EACjB,OAAOE,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}