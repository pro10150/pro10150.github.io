{"ast":null,"code":"import _objectSpread from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\r\n * Decide whether we should block this animation. Previously, we achieved this\r\n * just by checking whether the key was listed in protectedKeys, but this\r\n * posed problems if an animation was triggered by afterChildren and protectedKeys\r\n * had been set to true in the meantime.\r\n */\nfunction shouldBlockAnimation(_ref, key) {\n  var protectedKeys = _ref.protectedKeys,\n    needsAnimating = _ref.needsAnimating;\n  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction hasKeyframesChanged(value, target) {\n  var current = value.get();\n  if (Array.isArray(target)) {\n    for (var i = 0; i < target.length; i++) {\n      if (target[i] !== current) return true;\n    }\n  } else {\n    return current !== target;\n  }\n}\nfunction animateTarget(visualElement, definition) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$delay = _ref2.delay,\n    delay = _ref2$delay === void 0 ? 0 : _ref2$delay,\n    transitionOverride = _ref2.transitionOverride,\n    type = _ref2.type;\n  var _visualElement$makeTa = visualElement.makeTargetAnimatable(definition),\n    _visualElement$makeTa2 = _visualElement$makeTa.transition,\n    transition = _visualElement$makeTa2 === void 0 ? visualElement.getDefaultTransition() : _visualElement$makeTa2,\n    transitionEnd = _visualElement$makeTa.transitionEnd,\n    target = _objectWithoutProperties(_visualElement$makeTa, _excluded);\n  var willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  var animations = [];\n  var animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  var _loop = function _loop(key) {\n    var value = visualElement.getValue(key);\n    var valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      return \"continue\";\n    }\n    var valueTransition = _objectSpread({\n      delay: delay,\n      elapsed: 0\n    }, getValueTransition(transition || {}, key));\n    /**\r\n     * If this is the first time a value is being animated, check\r\n     * to see if we're handling off from an existing animation.\r\n     */\n    if (window.HandoffAppearAnimations) {\n      var appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n      if (appearId) {\n        var elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          valueTransition.isHandoff = true;\n        }\n      }\n    }\n    var canSkip = !valueTransition.isHandoff && !hasKeyframesChanged(value, valueTarget);\n    if (valueTransition.type === \"spring\" && (value.getVelocity() || valueTransition.velocity)) {\n      canSkip = false;\n    }\n    /**\r\n     * Temporarily disable skipping animations if there's an animation in\r\n     * progress. Better would be to track the current target of a value\r\n     * and compare that against valueTarget.\r\n     */\n    if (value.animation) {\n      canSkip = false;\n    }\n    if (canSkip) return \"continue\";\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    var animation = value.animation;\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation.then(function () {\n        return willChange.remove(key);\n      });\n    }\n    animations.push(animation);\n  };\n  for (var key in target) {\n    var _ret = _loop(key);\n    if (_ret === \"continue\") continue;\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(function () {\n      transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","_ref","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","hasKeyframesChanged","value","target","current","get","Array","isArray","i","length","animateTarget","visualElement","definition","_ref2","arguments","undefined","_ref2$delay","delay","transitionOverride","type","_visualElement$makeTa","makeTargetAnimatable","_visualElement$makeTa2","transition","getDefaultTransition","transitionEnd","_objectWithoutProperties","_excluded","willChange","getValue","animations","animationTypeState","animationState","getState","_loop","valueTarget","valueTransition","_objectSpread","elapsed","window","HandoffAppearAnimations","appearId","getProps","isHandoff","canSkip","getVelocity","velocity","animation","start","shouldReduceMotion","has","add","then","remove","push","_ret","Promise","all"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\r\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\r\nimport { animateMotionValue } from './motion-value.mjs';\r\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\r\nimport { setTarget } from '../../render/utils/setters.mjs';\r\nimport { getValueTransition } from '../utils/transitions.mjs';\r\nimport { frame } from '../../frameloop/frame.mjs';\r\n\r\n/**\r\n * Decide whether we should block this animation. Previously, we achieved this\r\n * just by checking whether the key was listed in protectedKeys, but this\r\n * posed problems if an animation was triggered by afterChildren and protectedKeys\r\n * had been set to true in the meantime.\r\n */\r\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\r\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\r\n    needsAnimating[key] = false;\r\n    return shouldBlock;\r\n}\r\nfunction hasKeyframesChanged(value, target) {\r\n    const current = value.get();\r\n    if (Array.isArray(target)) {\r\n        for (let i = 0; i < target.length; i++) {\r\n            if (target[i] !== current)\r\n                return true;\r\n        }\r\n    }\r\n    else {\r\n        return current !== target;\r\n    }\r\n}\r\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\r\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\r\n    const willChange = visualElement.getValue(\"willChange\");\r\n    if (transitionOverride)\r\n        transition = transitionOverride;\r\n    const animations = [];\r\n    const animationTypeState = type &&\r\n        visualElement.animationState &&\r\n        visualElement.animationState.getState()[type];\r\n    for (const key in target) {\r\n        const value = visualElement.getValue(key);\r\n        const valueTarget = target[key];\r\n        if (!value ||\r\n            valueTarget === undefined ||\r\n            (animationTypeState &&\r\n                shouldBlockAnimation(animationTypeState, key))) {\r\n            continue;\r\n        }\r\n        const valueTransition = {\r\n            delay,\r\n            elapsed: 0,\r\n            ...getValueTransition(transition || {}, key),\r\n        };\r\n        /**\r\n         * If this is the first time a value is being animated, check\r\n         * to see if we're handling off from an existing animation.\r\n         */\r\n        if (window.HandoffAppearAnimations) {\r\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\r\n            if (appearId) {\r\n                const elapsed = window.HandoffAppearAnimations(appearId, key, value, frame);\r\n                if (elapsed !== null) {\r\n                    valueTransition.elapsed = elapsed;\r\n                    valueTransition.isHandoff = true;\r\n                }\r\n            }\r\n        }\r\n        let canSkip = !valueTransition.isHandoff &&\r\n            !hasKeyframesChanged(value, valueTarget);\r\n        if (valueTransition.type === \"spring\" &&\r\n            (value.getVelocity() || valueTransition.velocity)) {\r\n            canSkip = false;\r\n        }\r\n        /**\r\n         * Temporarily disable skipping animations if there's an animation in\r\n         * progress. Better would be to track the current target of a value\r\n         * and compare that against valueTarget.\r\n         */\r\n        if (value.animation) {\r\n            canSkip = false;\r\n        }\r\n        if (canSkip)\r\n            continue;\r\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\r\n            ? { type: false }\r\n            : valueTransition));\r\n        const animation = value.animation;\r\n        if (isWillChangeMotionValue(willChange)) {\r\n            willChange.add(key);\r\n            animation.then(() => willChange.remove(key));\r\n        }\r\n        animations.push(animation);\r\n    }\r\n    if (transitionEnd) {\r\n        Promise.all(animations).then(() => {\r\n            transitionEnd && setTarget(visualElement, transitionEnd);\r\n        });\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport { animateTarget };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}