{"ast":null,"code":"import { useLayoutEffect as $6nfFC$useLayoutEffect, getOwnerDocument as $6nfFC$getOwnerDocument, runAfterTransition as $6nfFC$runAfterTransition, focusWithoutScrolling as $6nfFC$focusWithoutScrolling, getOwnerWindow as $6nfFC$getOwnerWindow, mergeProps as $6nfFC$mergeProps, useSyncRef as $6nfFC$useSyncRef, useObjectRef as $6nfFC$useObjectRef } from \"@react-aria/utils\";\nimport $6nfFC$react, { useRef as $6nfFC$useRef, useContext as $6nfFC$useContext, useMemo as $6nfFC$useMemo, useEffect as $6nfFC$useEffect, useState as $6nfFC$useState, useCallback as $6nfFC$useCallback } from \"react\";\nimport { getInteractionModality as $6nfFC$getInteractionModality, isFocusVisible as $6nfFC$isFocusVisible, useFocusVisibleListener as $6nfFC$useFocusVisibleListener, useFocus as $6nfFC$useFocus, useFocusWithin as $6nfFC$useFocusWithin, useKeyboard as $6nfFC$useKeyboard } from \"@react-aria/interactions\";\nimport $6nfFC$clsx from \"clsx\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */ /*\n       * Copyright 2020 Adobe. All rights reserved.\n       * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n       * you may not use this file except in compliance with the License. You may obtain a copy\n       * of the License at http://www.apache.org/licenses/LICENSE-2.0\n       *\n       * Unless required by applicable law or agreed to in writing, software distributed under\n       * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n       * OF ANY KIND, either express or implied. See the License for the specific language\n       * governing permissions and limitations under the License.\n       */\n\nfunction $6a99195332edec8b$export$80f3e147d781571c(element) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  const ownerDocument = (0, $6nfFC$getOwnerDocument)(element);\n  if ((0, $6nfFC$getInteractionModality)() === \"virtual\") {\n    let lastFocusedElement = ownerDocument.activeElement;\n    (0, $6nfFC$runAfterTransition)(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) (0, $6nfFC$focusWithoutScrolling)(element);\n    });\n  } else (0, $6nfFC$focusWithoutScrolling)(element);\n}\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $645f2e67b85a24c9$var$isStyleVisible(element) {\n  const windowObject = (0, $6nfFC$getOwnerWindow)(element);\n  if (!(element instanceof windowObject.HTMLElement) && !(element instanceof windowObject.SVGElement)) return false;\n  let {\n    display: display,\n    visibility: visibility\n  } = element.style;\n  let isVisible = display !== \"none\" && visibility !== \"hidden\" && visibility !== \"collapse\";\n  if (isVisible) {\n    const {\n      getComputedStyle: getComputedStyle\n    } = element.ownerDocument.defaultView;\n    let {\n      display: computedDisplay,\n      visibility: computedVisibility\n    } = getComputedStyle(element);\n    isVisible = computedDisplay !== \"none\" && computedVisibility !== \"hidden\" && computedVisibility !== \"collapse\";\n  }\n  return isVisible;\n}\nfunction $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {\n  return !element.hasAttribute(\"hidden\") && (element.nodeName === \"DETAILS\" && childElement && childElement.nodeName !== \"SUMMARY\" ? element.hasAttribute(\"open\") : true);\n}\nfunction $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {\n  return element.nodeName !== \"#comment\" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));\n}\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $6nfFC$useRef)(null);\n  let endRef = (0, $6nfFC$useRef)(null);\n  let scopeRef = (0, $6nfFC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext) || {};\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = (0, $6nfFC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    }\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (node) node.contain = !!contain;\n  }, [contain]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    var _startRef_current;\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  (0, $6nfFC$useEffect)(() => {\n    const activeElement = (0, $6nfFC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;\n    let scope = null;\n    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n    }\n  }, [scopeRef]);\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    return () => {\n      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;\n      var _focusScopeTree_getTreeNode_parent_scopeRef;\n      // Scope may have been re-parented.\n      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n  let focusManager = (0, $6nfFC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $6nfFC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $6nfFC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n  return (_useContext = (0, $6nfFC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || (0, $6nfFC$getOwnerDocument)(scope[0]).activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || (0, $6nfFC$getOwnerDocument)(scope[0]).activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nconst $9bf71ea28793e738$var$focusableElements = [\"input:not([disabled]):not([type=hidden])\", \"select:not([disabled])\", \"textarea:not([disabled])\", \"button:not([disabled])\", \"a[href]\", \"area[href]\", \"summary\", \"iframe\", \"object\", \"embed\", \"audio[controls]\", \"video[controls]\", \"[contenteditable]\"];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(\":not([hidden]),\") + \",[tabindex]:not([disabled]):not([hidden])\";\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n  return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $6nfFC$useRef)();\n  let raf = (0, $6nfFC$useRef)();\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n    const ownerDocument = (0, $6nfFC$getOwnerDocument)(scope ? scope[0] : undefined);\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = ownerDocument.activeElement;\n      let scope = scopeRef.current;\n      if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: true\n      }, scope);\n      if (!focusedElement) return;\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          if (ownerDocument.body.contains(e.target)) {\n            var _focusedNode_current;\n            focusedNode.current = e.target;\n            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n    ownerDocument.addEventListener(\"keydown\", onKeyDown, false);\n    ownerDocument.addEventListener(\"focusin\", onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener(\"focusout\", onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener(\"keydown\", onKeyDown, false);\n      ownerDocument.removeEventListener(\"focusin\", onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener(\"focusout\", onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  (0, $6nfFC$useLayoutEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  if (!element) return false;\n  if (!scope) return false;\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest(\"[data-react-aria-top-layer]\")) return true;\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element, scroll = false) {\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err) {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {\n  let sentinel = scope[0].previousElementSibling;\n  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $6nfFC$react).useRef(autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      const ownerDocument = (0, $6nfFC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $6nfFC$getOwnerDocument)(scope ? scope[0] : undefined);\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n    ownerDocument.addEventListener(\"focusin\", onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener(\"focusin\", onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = (0, $6nfFC$useRef)(typeof document !== \"undefined\" ? (0, $6nfFC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement : null);\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  (0, $6nfFC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $6nfFC$getOwnerDocument)(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) return;\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n    ownerDocument.addEventListener(\"focusin\", onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener(\"focusin\", onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener(\"focusin\", onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener(\"focusin\", onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $6nfFC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== \"Tab\" || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef)) return;\n      let focusedElement = ownerDocument.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) ownerDocument.addEventListener(\"keydown\", onKeyDown, true);\n    return () => {\n      if (!contain) ownerDocument.removeEventListener(\"keydown\", onKeyDown, true);\n    };\n  }, [scopeRef, restoreFocus, contain]);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0, $6nfFC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $6nfFC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (!treeNode) return;\n    var _nodeToRestoreRef_current;\n    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;\n    return () => {\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (restoreFocus && nodeToRestore && (\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = (0, $6nfFC$getOwnerDocument)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {\n  return {\n    focusNext(opts = {}) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $6nfFC$getOwnerDocument)(root).activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $6nfFC$getOwnerDocument)(root).activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next !== null && next !== void 0 ? next : null;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = $9bf71ea28793e738$var$last(walker);\n        if (!lastNode)\n          // couldn't wrap\n          return null;\n        previousNode = lastNode;\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode !== null && previousNode !== void 0 ? previousNode : null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next !== null && next !== void 0 ? next : null;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next = undefined;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    if (!parentNode) return;\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    if (!node) return;\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) children.forEach(child => parentNode && parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n  // Pre Order Depth First\n  *traverse(node = this.root) {\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n  clone() {\n    var _node_parent;\n    let newTree = new $9bf71ea28793e738$var$Tree();\n    var _node_parent_scopeRef;\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);\n    return newTree;\n  }\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n  constructor(props) {\n    this.children = new Set();\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {\n  let {\n    autoFocus = false,\n    isTextInput: isTextInput,\n    within: within\n  } = props;\n  let state = (0, $6nfFC$useRef)({\n    isFocused: false,\n    isFocusVisible: autoFocus || (0, $6nfFC$isFocusVisible)()\n  });\n  let [isFocused, setFocused] = (0, $6nfFC$useState)(false);\n  let [isFocusVisibleState, setFocusVisible] = (0, $6nfFC$useState)(() => state.current.isFocused && state.current.isFocusVisible);\n  let updateState = (0, $6nfFC$useCallback)(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n  let onFocusChange = (0, $6nfFC$useCallback)(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n  (0, $6nfFC$useFocusVisibleListener)(isFocusVisible => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {\n    isTextInput: isTextInput\n  });\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)({\n    isDisabled: within,\n    onFocusChange: onFocusChange\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $6nfFC$useFocusWithin)({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n  return {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\nfunction $907718708eab68af$export$1a38b4ad7f578e1d(props) {\n  let {\n    children: children,\n    focusClass: focusClass,\n    focusRingClass: focusRingClass\n  } = props;\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $f7dceffc5ad7768b$export$4e328f61c538687f)(props);\n  let child = (0, $6nfFC$react).Children.only(children);\n  return /*#__PURE__*/(0, $6nfFC$react).cloneElement(child, (0, $6nfFC$mergeProps)(child.props, {\n    ...focusProps,\n    className: (0, $6nfFC$clsx)({\n      [focusClass || \"\"]: isFocused,\n      [focusRingClass || \"\"]: isFocusVisible\n    })\n  }));\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/(0, $6nfFC$react).createContext(null);\nfunction $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {\n  let context = (0, $6nfFC$useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};\n  (0, $6nfFC$useSyncRef)(context, ref);\n  // eslint-disable-next-line\n  let {\n    ref: _,\n    ...otherProps\n  } = context;\n  return otherProps;\n}\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {\n  let {\n    children: children,\n    ...otherProps\n  } = props;\n  let objRef = (0, $6nfFC$useObjectRef)(ref);\n  let context = {\n    ...otherProps,\n    ref: objRef\n  };\n  return /*#__PURE__*/(0, $6nfFC$react).createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {\n    value: context\n  }, children);\n}\nlet $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/(0, $6nfFC$react).forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);\nfunction $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {\n  let {\n    focusProps: focusProps\n  } = (0, $6nfFC$useFocus)(props);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $6nfFC$useKeyboard)(props);\n  let interactions = (0, $6nfFC$mergeProps)(focusProps, keyboardProps);\n  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = (0, $6nfFC$useRef)(props.autoFocus);\n  (0, $6nfFC$useEffect)(() => {\n    if (autoFocusRef.current && domRef.current) (0, $6a99195332edec8b$export$80f3e147d781571c)(domRef.current);\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return {\n    focusableProps: (0, $6nfFC$mergeProps)({\n      ...interactions,\n      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n    }, interactionProps)\n  };\n}\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $83013635b024ae3d$export$eac1895992b9f3d6(ref, options) {\n  let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;\n  let [hasTabbableChild, setHasTabbableChild] = (0, $6nfFC$useState)(false);\n  (0, $6nfFC$useLayoutEffect)(() => {\n    if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {\n      let update = () => {\n        if (ref.current) {\n          let walker = (0, $9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {\n            tabbable: true\n          });\n          setHasTabbableChild(!!walker.nextNode());\n        }\n      };\n      update();\n      // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: [\"tabIndex\", \"disabled\"]\n      });\n      return () => {\n        // Disconnect mutation observer when a React update occurs on the top-level component\n        // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n        // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n        // so we also update if a child component re-renders and adds/removes something tabbable.\n        observer.disconnect();\n      };\n    }\n  });\n  return isDisabled ? false : hasTabbableChild;\n}\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $907718708eab68af$export$1a38b4ad7f578e1d as FocusRing, $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 as FocusableProvider, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c as useFocusable, $f7dceffc5ad7768b$export$4e328f61c538687f as useFocusRing, $6a99195332edec8b$export$80f3e147d781571c as focusSafely, $83013635b024ae3d$export$eac1895992b9f3d6 as useHasTabbableChild };","map":{"version":3,"names":["$6a99195332edec8b$export$80f3e147d781571c","element","ownerDocument","$6nfFC$getOwnerDocument","$6nfFC$getInteractionModality","lastFocusedElement","activeElement","$6nfFC$runAfterTransition","isConnected","$6nfFC$focusWithoutScrolling","$645f2e67b85a24c9$var$isStyleVisible","windowObject","$6nfFC$getOwnerWindow","HTMLElement","SVGElement","display","visibility","style","isVisible","getComputedStyle","defaultView","computedDisplay","computedVisibility","$645f2e67b85a24c9$var$isAttributeVisible","childElement","hasAttribute","nodeName","$645f2e67b85a24c9$export$e989c0fffaa6b27a","parentElement","$9bf71ea28793e738$var$FocusContext","$6nfFC$react","createContext","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","$6nfFC$useRef","endRef","scopeRef","parentNode","$6nfFC$useContext","node","$6nfFC$useMemo","$9bf71ea28793e738$var$TreeNode","$6nfFC$useLayoutEffect","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","_startRef_current","current","nextSibling","nodes","push","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","$6nfFC$useEffect","undefined","scope","$9bf71ea28793e738$var$isElementInScope","traverse","_focusScopeTree_getTreeNode_parent","_focusScopeTree_getTreeNode","_focusScopeTree_getTreeNode_parent_scopeRef","parentScope","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","createElement","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","sentinel","previousElementSibling","scopeRoot","$9bf71ea28793e738$var$getScopeRoot","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","onKeyDown","e","key","altKey","ctrlKey","metaKey","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","contains","_focusedNode_current","addEventListener","forEach","removeEventListener","$9bf71ea28793e738$var$isElementInAnyScope","some","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","scroll","err","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","document","treeNode","stopPropagation","blur","_nodeToRestoreRef_current","clonedTree","clone","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","matches","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","lastNode","last","lastChild","$9bf71ea28793e738$var$Tree","size","fastMap","data","get","addTreeNode","set","removeChild","child","delete","_node_parent","newTree","_node_parent_scopeRef","constructor","Map","add","Set","$f7dceffc5ad7768b$export$4e328f61c538687f","isTextInput","within","state","isFocused","isFocusVisible","$6nfFC$isFocusVisible","setFocused","$6nfFC$useState","isFocusVisibleState","setFocusVisible","updateState","$6nfFC$useCallback","onFocusChange","$6nfFC$useFocusVisibleListener","focusProps","$6nfFC$useFocus","isDisabled","focusWithinProps","$6nfFC$useFocusWithin","onFocusWithinChange","$907718708eab68af$export$1a38b4ad7f578e1d","focusClass","focusRingClass","Children","only","cloneElement","$6nfFC$mergeProps","className","$6nfFC$clsx","$e6afbd83fe6ebbd2$var$FocusableContext","$e6afbd83fe6ebbd2$var$useFocusableContext","context","$6nfFC$useSyncRef","_","otherProps","$e6afbd83fe6ebbd2$var$FocusableProvider","objRef","$6nfFC$useObjectRef","$e6afbd83fe6ebbd2$export$13f3202a3e5ddd5","forwardRef","$e6afbd83fe6ebbd2$export$4c014de7c8940b4c","domRef","keyboardProps","$6nfFC$useKeyboard","interactions","domProps","interactionProps","focusableProps","tabIndex","excludeFromTabOrder","$83013635b024ae3d$export$eac1895992b9f3d6","options","hasTabbableChild","setHasTabbableChild","update","observer","MutationObserver","observe","subtree","childList","attributes","attributeFilter","disconnect"],"sources":["/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/index.ts","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusScope.tsx","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/focusSafely.ts","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/isElementVisible.ts","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/FocusRing.tsx","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusRing.ts","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useFocusable.tsx","/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@react-aria/focus/dist/packages/@react-aria/focus/src/useHasTabbableChild.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {FocusScope, useFocusManager, getFocusableTreeWalker, createFocusManager, isElementInChildOfActiveScope} from './FocusScope';\nexport {FocusRing} from './FocusRing';\nexport {FocusableProvider, useFocusable} from './useFocusable';\nexport {useFocusRing} from './useFocusRing';\nexport {focusSafely} from './focusSafely';\nexport {useHasTabbableChild} from './useHasTabbableChild';\n\nexport type {FocusScopeProps, FocusManager, FocusManagerOptions} from './FocusScope';\nexport type {FocusRingProps} from './FocusRing';\nexport type {FocusableAria, FocusableOptions, FocusableProviderProps} from './useFocusable';\nexport type {AriaFocusRingProps, FocusRingAria} from './useFocusRing';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {getOwnerDocument, useLayoutEffect} from '@react-aria/utils';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement | null,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement | null\n}\n\ntype ScopeRef = RefObject<Element[]> | null;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext | null>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>(null);\n  let endRef = useRef<HTMLSpanElement>(null);\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    if (node) {\n      node.contain = !!contain;\n    }\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current?.nextSibling!;\n    let nodes: Element[] = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node as Element);\n      node = node.nextSibling as Element;\n    }\n\n    scopeRef.current = nodes;\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  useEffect(() => {\n    const activeElement = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;\n    let scope: TreeNode | null = null;\n\n    if (isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of focusScopeTree.traverse()) {\n        if (node.scopeRef && isElementInScope(activeElement, node.scopeRef.current)) {\n          scope = node;\n        }\n      }\n\n      if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n        activeScope = scope.scopeRef;\n      }\n    }\n  }, [scopeRef]);\n\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  useLayoutEffect(() => {\n    return () => {\n      // Scope may have been re-parented.\n      let parentScope = focusScopeTree.getTreeNode(scopeRef)?.parent?.scopeRef ?? null;\n\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || focusScopeTree.getTreeNode(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      focusScopeTree.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager | undefined {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getOwnerDocument(scope[0]).activeElement!;\n      let sentinel = scope[0].previousElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getOwnerDocument(scope[0]).activeElement!;\n      let sentinel = scope[scope.length - 1].nextElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling!;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling!;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement!;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain?: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef<ReturnType<typeof requestAnimationFrame>>();\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement;\n      let scope = scopeRef.current;\n      if (!scope || !isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable: true}, scope);\n      if (!focusedElement) {\n        return;\n      }\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling! : scope[0].previousElementSibling!;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope && activeScope.current) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (ownerDocument.activeElement && shouldContainFocus(scopeRef) && !isElementInChildScope(ownerDocument.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (ownerDocument.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current?.focus();\n          } else if (activeScope.current) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope?.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope?.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element?: Element | null, scope?: Element[] | null) {\n  if (!element) {\n    return false;\n  }\n  if (!scope) {\n    return false;\n  }\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (s && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling!;\n  let scopeRoot = getScopeRoot(scope);\n  let walker = getFocusableTreeWalker(scopeRoot, {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = getScopeRoot(scope);\n    walker = getFocusableTreeWalker(scopeRoot, {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus?: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!isElementInScope(ownerDocument.activeElement, activeScope.current) && scopeRef.current) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[]>, restore?: boolean, contain?: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    let onFocus = (e) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus?: boolean, contain?: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined).activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) &&\n      isElementInScope(ownerDocument.activeElement, scopeRef.current)\n      ) {\n        activeScope = scopeRef;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef)) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(ownerDocument.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      ownerDocument.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        ownerDocument.removeEventListener('keydown', onKeyDown, true);\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    let treeNode = focusScopeTree.getTreeNode(scopeRef);\n    if (!treeNode) {\n      return;\n    }\n    treeNode.nodeToRestore = nodeToRestoreRef.current ?? undefined;\n    return () => {\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          isElementInScope(ownerDocument.activeElement, scopeRef.current)\n          || (ownerDocument.activeElement === ownerDocument.body && shouldRestoreFocus(scopeRef))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = getOwnerDocument(root).createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getOwnerDocument(root).activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getOwnerDocument(root).activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next ?? null;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = last(walker);\n        if (!lastNode) {\n          // couldn't wrap\n          return null;\n        }\n        previousNode = lastNode;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode ?? null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next ?? null;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement | undefined = undefined;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    if (!parentNode) {\n      return;\n    }\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    if (!node) {\n      return;\n    }\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) {\n        children.forEach(child => parentNode && parentNode.addChild(child));\n      }\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent?.scopeRef ?? null, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore?: FocusableElement;\n  public parent?: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusWithoutScrolling, getOwnerDocument, runAfterTransition} from '@react-aria/utils';\nimport {getInteractionModality} from '@react-aria/interactions';\n\n/**\n * A utility function that focuses an element while avoiding undesired side effects such\n * as page scrolling and screen reader issues with CSS transitions.\n */\nexport function focusSafely(element: FocusableElement) {\n  // If the user is interacting with a virtual cursor, e.g. screen reader, then\n  // wait until after any animated transitions that are currently occurring on\n  // the page before shifting focus. This avoids issues with VoiceOver on iOS\n  // causing the page to scroll when moving focus if the element is transitioning\n  // from off the screen.\n  const ownerDocument = getOwnerDocument(element);\n  if (getInteractionModality() === 'virtual') {\n    let lastFocusedElement = ownerDocument.activeElement;\n    runAfterTransition(() => {\n      // If focus did not move and the element is still in the document, focus it.\n      if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) {\n        focusWithoutScrolling(element);\n      }\n    });\n  } else {\n    focusWithoutScrolling(element);\n  }\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getOwnerWindow} from '@react-aria/utils';\n\nfunction isStyleVisible(element: Element) {\n  const windowObject = getOwnerWindow(element);\n  if (!(element instanceof windowObject.HTMLElement) && !(element instanceof windowObject.SVGElement)) {\n    return false;\n  }\n\n  let {display, visibility} = element.style;\n\n  let isVisible = (\n    display !== 'none' &&\n    visibility !== 'hidden' &&\n    visibility !== 'collapse'\n  );\n\n  if (isVisible) {\n    const {getComputedStyle} = element.ownerDocument.defaultView as unknown as Window;\n    let {display: computedDisplay, visibility: computedVisibility} = getComputedStyle(element);\n\n    isVisible = (\n      computedDisplay !== 'none' &&\n      computedVisibility !== 'hidden' &&\n      computedVisibility !== 'collapse'\n    );\n  }\n\n  return isVisible;\n}\n\nfunction isAttributeVisible(element: Element, childElement?: Element) {\n  return (\n    !element.hasAttribute('hidden') &&\n    (element.nodeName === 'DETAILS' &&\n      childElement &&\n      childElement.nodeName !== 'SUMMARY'\n      ? element.hasAttribute('open')\n      : true)\n  );\n}\n\n/**\n * Adapted from https://github.com/testing-library/jest-dom and\n * https://github.com/vuejs/vue-test-utils-next/.\n * Licensed under the MIT License.\n * @param element - Element to evaluate for display or visibility.\n */\nexport function isElementVisible(element: Element, childElement?: Element) {\n  return (\n    element.nodeName !== '#comment' &&\n    isStyleVisible(element) &&\n    isAttributeVisible(element, childElement) &&\n    (!element.parentElement || isElementVisible(element.parentElement, element))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useFocusRing} from './useFocusRing';\n\nexport interface FocusRingProps {\n  /** Child element to apply CSS classes to. */\n  children: ReactElement,\n  /** CSS class to apply when the element is focused. */\n  focusClass?: string,\n  /** CSS class to apply when the element has keyboard focus. */\n  focusRingClass?: string,\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default false\n   */\n  within?: boolean,\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\n/**\n * A utility component that applies a CSS class when an element has keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function FocusRing(props: FocusRingProps) {\n  let {children, focusClass, focusRingClass} = props;\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing(props);\n  let child = React.Children.only(children);\n\n  return React.cloneElement(child, mergeProps(child.props, {\n    ...focusProps,\n    className: clsx({\n      [focusClass || '']: isFocused,\n      [focusRingClass || '']: isFocusVisible\n    })\n  }));\n}\n","import {DOMAttributes} from '@react-types/shared';\nimport {isFocusVisible, useFocus, useFocusVisibleListener, useFocusWithin} from '@react-aria/interactions';\nimport {useCallback, useRef, useState} from 'react';\n\nexport interface AriaFocusRingProps {\n  /**\n   * Whether to show the focus ring when something\n   * inside the container element has focus (true), or\n   * only if the container itself has focus (false).\n   * @default 'false'\n   */\n  within?: boolean,\n\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\nexport interface FocusRingAria {\n  /** Whether the element is currently focused. */\n  isFocused: boolean,\n\n  /** Whether keyboard focus should be visible. */\n  isFocusVisible: boolean,\n\n  /** Props to apply to the container element with the focus ring. */\n  focusProps: DOMAttributes\n}\n\n/**\n * Determines whether a focus ring should be shown to indicate keyboard focus.\n * Focus rings are visible only when the user is interacting with a keyboard,\n * not with a mouse, touch, or other input methods.\n */\nexport function useFocusRing(props: AriaFocusRingProps = {}): FocusRingAria {\n  let {\n    autoFocus = false,\n    isTextInput,\n    within\n  } = props;\n  let state = useRef({\n    isFocused: false,\n    isFocusVisible: autoFocus || isFocusVisible()\n  });\n  let [isFocused, setFocused] = useState(false);\n  let [isFocusVisibleState, setFocusVisible] = useState(() => state.current.isFocused && state.current.isFocusVisible);\n\n  let updateState = useCallback(() => setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);\n\n  let onFocusChange = useCallback(isFocused => {\n    state.current.isFocused = isFocused;\n    setFocused(isFocused);\n    updateState();\n  }, [updateState]);\n\n  useFocusVisibleListener((isFocusVisible) => {\n    state.current.isFocusVisible = isFocusVisible;\n    updateState();\n  }, [], {isTextInput});\n\n  let {focusProps} = useFocus({\n    isDisabled: within,\n    onFocusChange\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !within,\n    onFocusWithinChange: onFocusChange\n  });\n\n  return {\n    isFocused,\n    isFocusVisible: isFocusVisibleState,\n    focusProps: within ? focusWithinProps : focusProps\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableDOMProps, FocusableElement, FocusableProps} from '@react-types/shared';\nimport {focusSafely} from './';\nimport {mergeProps, useObjectRef, useSyncRef} from '@react-aria/utils';\nimport React, {ForwardedRef, MutableRefObject, ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\nimport {useFocus, useKeyboard} from '@react-aria/interactions';\n\nexport interface FocusableOptions extends FocusableProps, FocusableDOMProps {\n  /** Whether focus should be disabled. */\n  isDisabled?: boolean\n}\n\nexport interface FocusableProviderProps extends DOMAttributes {\n  /** The child element to provide DOM props to. */\n  children?: ReactNode\n}\n\ninterface FocusableContextValue extends FocusableProviderProps {\n  ref?: MutableRefObject<FocusableElement>\n}\n\nlet FocusableContext = React.createContext<FocusableContextValue | null>(null);\n\nfunction useFocusableContext(ref: RefObject<FocusableElement>): FocusableContextValue {\n  let context = useContext(FocusableContext) || {};\n  useSyncRef(context, ref);\n\n  // eslint-disable-next-line\n  let {ref: _, ...otherProps} = context;\n  return otherProps;\n}\n\n/**\n * Provides DOM props to the nearest focusable child.\n */\nfunction FocusableProvider(props: FocusableProviderProps, ref: ForwardedRef<FocusableElement>) {\n  let {children, ...otherProps} = props;\n  let objRef = useObjectRef(ref);\n  let context = {\n    ...otherProps,\n    ref: objRef\n  };\n\n  return (\n    <FocusableContext.Provider value={context}>\n      {children}\n    </FocusableContext.Provider>\n  );\n}\n\nlet _FocusableProvider = React.forwardRef(FocusableProvider);\nexport {_FocusableProvider as FocusableProvider};\n\nexport interface FocusableAria {\n  /** Props for the focusable element. */\n  focusableProps: DOMAttributes\n}\n\n/**\n * Used to make an element focusable and capable of auto focus.\n */\nexport function useFocusable(props: FocusableOptions, domRef: RefObject<FocusableElement>): FocusableAria {\n  let {focusProps} = useFocus(props);\n  let {keyboardProps} = useKeyboard(props);\n  let interactions = mergeProps(focusProps, keyboardProps);\n  let domProps = useFocusableContext(domRef);\n  let interactionProps = props.isDisabled ? {} : domProps;\n  let autoFocusRef = useRef(props.autoFocus);\n\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      focusSafely(domRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return {\n    focusableProps: mergeProps(\n      {\n        ...interactions,\n        tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined\n      },\n      interactionProps\n    )\n  };\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getFocusableTreeWalker} from './FocusScope';\nimport {RefObject, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\ninterface AriaHasTabbableChildOptions {\n  isDisabled?: boolean\n}\n\n// This was created for a special empty case of a component that can have child or\n// be empty, like Collection/Virtualizer/Table/ListView/etc. When these components\n// are empty they can have a message with a tabbable element, which is like them\n// being not empty, when it comes to focus and tab order.\n\n/**\n * Returns whether an element has a tabbable child, and updates as children change.\n * @private\n */\nexport function useHasTabbableChild(ref: RefObject<Element>, options?: AriaHasTabbableChildOptions): boolean {\n  let isDisabled = options?.isDisabled;\n  let [hasTabbableChild, setHasTabbableChild] = useState(false);\n\n  useLayoutEffect(() => {\n    if (ref?.current && !isDisabled) {\n      let update = () => {\n        if (ref.current) {\n          let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n          setHasTabbableChild(!!walker.nextNode());\n        }\n      };\n\n      update();\n\n      // Update when new elements are inserted, or the tabIndex/disabled attribute updates.\n      let observer = new MutationObserver(update);\n      observer.observe(ref.current, {\n        subtree: true,\n        childList: true,\n        attributes: true,\n        attributeFilter: ['tabIndex', 'disabled']\n      });\n\n      return () => {\n        // Disconnect mutation observer when a React update occurs on the top-level component\n        // so we update synchronously after re-rendering. Otherwise React will emit act warnings\n        // in tests since mutation observers fire asynchronously. The mutation observer is necessary\n        // so we also update if a child component re-renders and adds/removes something tabbable.\n        observer.disconnect();\n      };\n    }\n  });\n\n  return isDisabled ? false : hasTabbableChild;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}