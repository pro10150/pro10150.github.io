{"ast":null,"code":"import { toDate } from \"./toDate.mjs\";\n\n/**\r\n * The {@link eachDayOfInterval} function options.\r\n */\n\n/**\r\n * @name eachDayOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of dates within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of dates within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of days from the day of the interval start to the day of the interval end\r\n *\r\n * @example\r\n * // Each day between 6 October 2014 and 10 October 2014:\r\n * const result = eachDayOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 9, 10)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 00:00:00,\r\n * //   Tue Oct 07 2014 00:00:00,\r\n * //   Wed Oct 08 2014 00:00:00,\r\n * //   Thu Oct 09 2014 00:00:00,\r\n * //   Fri Oct 10 2014 00:00:00\r\n * // ]\r\n */\nexport function eachDayOfInterval(interval, options) {\n  var _options$step;\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var reversed = +startDate > +endDate;\n  var endTime = reversed ? +startDate : +endDate;\n  var currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = (_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n  var dates = [];\n  while (+currentDate <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n  return reversed ? dates.reverse() : dates;\n}\n\n// Fallback for modularized imports:\nexport default eachDayOfInterval;","map":{"version":3,"names":["toDate","eachDayOfInterval","interval","options","_options$step","startDate","start","endDate","end","reversed","endTime","currentDate","setHours","step","dates","push","setDate","getDate","reverse"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/date-fns/eachDayOfInterval.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link eachDayOfInterval} function options.\r\n */\r\n\r\n/**\r\n * @name eachDayOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of dates within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of dates within the specified time interval.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of days from the day of the interval start to the day of the interval end\r\n *\r\n * @example\r\n * // Each day between 6 October 2014 and 10 October 2014:\r\n * const result = eachDayOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 9, 10)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 00:00:00,\r\n * //   Tue Oct 07 2014 00:00:00,\r\n * //   Wed Oct 08 2014 00:00:00,\r\n * //   Thu Oct 09 2014 00:00:00,\r\n * //   Fri Oct 10 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachDayOfInterval(interval, options) {\r\n  const startDate = toDate(interval.start);\r\n  const endDate = toDate(interval.end);\r\n\r\n  let reversed = +startDate > +endDate;\r\n  const endTime = reversed ? +startDate : +endDate;\r\n  const currentDate = reversed ? endDate : startDate;\r\n  currentDate.setHours(0, 0, 0, 0);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate.setDate(currentDate.getDate() + step);\r\n    currentDate.setHours(0, 0, 0, 0);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachDayOfInterval;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAAA,IAAAC,aAAA;EACnD,IAAMC,SAAS,GAAGL,MAAM,CAACE,QAAQ,CAACI,KAAK,CAAC;EACxC,IAAMC,OAAO,GAAGP,MAAM,CAACE,QAAQ,CAACM,GAAG,CAAC;EAEpC,IAAIC,QAAQ,GAAG,CAACJ,SAAS,GAAG,CAACE,OAAO;EACpC,IAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACJ,SAAS,GAAG,CAACE,OAAO;EAChD,IAAMI,WAAW,GAAGF,QAAQ,GAAGF,OAAO,GAAGF,SAAS;EAClDM,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAEhC,IAAIC,IAAI,IAAAT,aAAA,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEU,IAAI,cAAAT,aAAA,cAAAA,aAAA,GAAI,CAAC;EAC7B,IAAI,CAACS,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,GAAG,CAAC,EAAE;IACZA,IAAI,GAAG,CAACA,IAAI;IACZJ,QAAQ,GAAG,CAACA,QAAQ;EACtB;EAEA,IAAMK,KAAK,GAAG,EAAE;EAEhB,OAAO,CAACH,WAAW,IAAID,OAAO,EAAE;IAC9BI,KAAK,CAACC,IAAI,CAACf,MAAM,CAACW,WAAW,CAAC,CAAC;IAC/BA,WAAW,CAACK,OAAO,CAACL,WAAW,CAACM,OAAO,EAAE,GAAGJ,IAAI,CAAC;IACjDF,WAAW,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAClC;EAEA,OAAOH,QAAQ,GAAGK,KAAK,CAACI,OAAO,EAAE,GAAGJ,KAAK;AAC3C;;AAEA;AACA,eAAeb,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}