{"ast":null,"code":"import _objectWithoutProperties from \"C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"labelProps\", \"inputProps\", \"descriptionProps\", \"errorMessageProps\"];\nimport { useEffect as $kOq5K$useEffect, useRef as $kOq5K$useRef } from \"react\";\nimport { filterDOMProps as $kOq5K$filterDOMProps, useFormReset as $kOq5K$useFormReset, getOwnerWindow as $kOq5K$getOwnerWindow, mergeProps as $kOq5K$mergeProps, useEffectEvent as $kOq5K$useEffectEvent } from \"@react-aria/utils\";\nimport { useControlledState as $kOq5K$useControlledState } from \"@react-stately/utils\";\nimport { useField as $kOq5K$useField } from \"@react-aria/label\";\nimport { useFocusable as $kOq5K$useFocusable } from \"@react-aria/focus\";\nimport { useFormValidation as $kOq5K$useFormValidation } from \"@react-aria/form\";\nimport { useFormValidationState as $kOq5K$useFormValidationState } from \"@react-stately/form\";\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ /*\r\n    * Copyright 2020 Adobe. All rights reserved.\r\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License. You may obtain a copy\r\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software distributed under\r\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n    * OF ANY KIND, either express or implied. See the License for the specific language\r\n    * governing permissions and limitations under the License.\r\n    */\n\nfunction $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {\n  let {\n    inputElementType = \"input\",\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    type = \"text\",\n    validationBehavior = \"aria\"\n  } = props;\n  let [value, setValue] = (0, $kOq5K$useControlledState)(props.value, props.defaultValue || \"\", props.onChange);\n  let {\n    focusableProps: focusableProps\n  } = (0, $kOq5K$useFocusable)(props, ref);\n  let validationState = (0, $kOq5K$useFormValidationState)(_objectSpread(_objectSpread({}, props), {}, {\n    value: value\n  }));\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = validationState.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $kOq5K$useField)(_objectSpread(_objectSpread({}, props), {}, {\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  }));\n  let domProps = (0, $kOq5K$filterDOMProps)(props, {\n    labelable: true\n  });\n  const inputOnlyProps = {\n    type: type,\n    pattern: props.pattern\n  };\n  (0, $kOq5K$useFormReset)(ref, value, setValue);\n  (0, $kOq5K$useFormValidation)(props, validationState, ref);\n  (0, $kOq5K$useEffect)(() => {\n    // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.\n    // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,\n    // which causes Chrome to skip validation. Only updating `value` is ok in our case since our\n    // textareas are always controlled. React is planning on removing this synchronization in a\n    // future major version.\n    // https://github.com/facebook/react/issues/19474\n    // https://github.com/facebook/react/issues/11896\n    if (ref.current instanceof (0, $kOq5K$getOwnerWindow)(ref.current).HTMLTextAreaElement) {\n      let input = ref.current;\n      Object.defineProperty(input, \"defaultValue\", {\n        get: () => input.value,\n        set: () => {},\n        configurable: true\n      });\n    }\n  }, [ref]);\n  return {\n    labelProps: labelProps,\n    inputProps: (0, $kOq5K$mergeProps)(domProps, inputElementType === \"input\" && inputOnlyProps, _objectSpread(_objectSpread({\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      required: isRequired && validationBehavior === \"native\",\n      \"aria-required\": isRequired && validationBehavior === \"aria\" || undefined,\n      \"aria-invalid\": isInvalid || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-activedescendant\": props[\"aria-activedescendant\"],\n      \"aria-autocomplete\": props[\"aria-autocomplete\"],\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      value: value,\n      onChange: e => setValue(e.target.value),\n      autoComplete: props.autoComplete,\n      autoCapitalize: props.autoCapitalize,\n      maxLength: props.maxLength,\n      minLength: props.minLength,\n      name: props.name,\n      placeholder: props.placeholder,\n      inputMode: props.inputMode,\n      // Clipboard events\n      onCopy: props.onCopy,\n      onCut: props.onCut,\n      onPaste: props.onPaste,\n      // Composition events\n      onCompositionEnd: props.onCompositionEnd,\n      onCompositionStart: props.onCompositionStart,\n      onCompositionUpdate: props.onCompositionUpdate,\n      // Selection events\n      onSelect: props.onSelect,\n      // Input events\n      onBeforeInput: props.onBeforeInput,\n      onInput: props.onInput\n    }, focusableProps), fieldProps)),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\n\n/*\r\n * Copyright 2021 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n\nfunction $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {\n  return typeof window !== \"undefined\" && window.InputEvent &&\n  // @ts-ignore\n  typeof InputEvent.prototype.getTargetRanges === \"function\";\n}\nfunction $d841c8010a73d545$export$4f384c9210e583c3(props, state, inputRef) {\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  let onBeforeInputFallback = (0, $kOq5K$useEffectEvent)(e => {\n    let input = inputRef.current;\n    // Compute the next value of the input if the event is allowed to proceed.\n    // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n    let nextValue;\n    switch (e.inputType) {\n      case \"historyUndo\":\n      case \"historyRedo\":\n        // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n        // because presumably the input would have already been validated previously.\n        return;\n      case \"deleteContent\":\n      case \"deleteByCut\":\n      case \"deleteByDrag\":\n        nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case \"deleteContentForward\":\n        // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n        // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n        // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n        // If we support additional locales in the future, this may need to change.\n        nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case \"deleteContentBackward\":\n        nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case \"deleteSoftLineBackward\":\n      case \"deleteHardLineBackward\":\n        nextValue = input.value.slice(input.selectionStart);\n        break;\n      default:\n        if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);\n        break;\n    }\n    // If we did not compute a value, or the new value is invalid, prevent the event\n    // so that the browser does not update the input text, move the selection, or add to\n    // the undo/redo stack.\n    if (nextValue == null || !state.validate(nextValue)) e.preventDefault();\n  });\n  (0, $kOq5K$useEffect)(() => {\n    if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent()) return;\n    let input = inputRef.current;\n    input.addEventListener(\"beforeinput\", onBeforeInputFallback, false);\n    return () => {\n      input.removeEventListener(\"beforeinput\", onBeforeInputFallback, false);\n    };\n  }, [inputRef, onBeforeInputFallback]);\n  let onBeforeInput = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? e => {\n    let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);\n    if (!state.validate(nextValue)) e.preventDefault();\n  } : null;\n  let _ref = (0, $2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef),\n    {\n      labelProps: labelProps,\n      inputProps: textFieldProps,\n      descriptionProps: descriptionProps,\n      errorMessageProps: errorMessageProps\n    } = _ref,\n    validation = _objectWithoutProperties(_ref, _excluded);\n  let compositionStartState = (0, $kOq5K$useRef)(null);\n  return _objectSpread({\n    inputProps: (0, $kOq5K$mergeProps)(textFieldProps, {\n      onBeforeInput: onBeforeInput,\n      onCompositionStart() {\n        // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n        // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n        // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n        // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n        // nor would we want to cancel them because the input from the user is incomplete at that point.\n        // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n        // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n        // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n        // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n        // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n        // are implemented, there is no other way to prevent composed input.\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n        let {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        } = inputRef.current;\n        compositionStartState.current = {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        };\n      },\n      onCompositionEnd() {\n        if (!state.validate(inputRef.current.value)) {\n          // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n          // But also update the value in React state as well so it is correct for future updates.\n          let {\n            value: value,\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n          } = compositionStartState.current;\n          inputRef.current.value = value;\n          inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          state.setInputValue(value);\n        }\n      }\n    }),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  }, validation);\n}\nexport { $2d73ec29415bd339$export$712718f7aec83d5 as useTextField, $d841c8010a73d545$export$4f384c9210e583c3 as useFormattedTextField };","map":{"version":3,"names":["$2d73ec29415bd339$export$712718f7aec83d5","props","ref","inputElementType","isDisabled","isRequired","isReadOnly","type","validationBehavior","value","setValue","$kOq5K$useControlledState","defaultValue","onChange","focusableProps","$kOq5K$useFocusable","validationState","$kOq5K$useFormValidationState","_objectSpread","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","fieldProps","descriptionProps","errorMessageProps","$kOq5K$useField","errorMessage","domProps","$kOq5K$filterDOMProps","labelable","inputOnlyProps","pattern","$kOq5K$useFormReset","$kOq5K$useFormValidation","$kOq5K$useEffect","current","$kOq5K$getOwnerWindow","HTMLTextAreaElement","input","Object","defineProperty","get","set","configurable","inputProps","$kOq5K$mergeProps","disabled","readOnly","required","undefined","e","target","autoComplete","autoCapitalize","maxLength","minLength","name","placeholder","inputMode","onCopy","onCut","onPaste","onCompositionEnd","onCompositionStart","onCompositionUpdate","onSelect","onBeforeInput","onInput","$d841c8010a73d545$var$supportsNativeBeforeInputEvent","window","InputEvent","prototype","getTargetRanges","$d841c8010a73d545$export$4f384c9210e583c3","state","inputRef","onBeforeInputFallback","$kOq5K$useEffectEvent","nextValue","inputType","slice","selectionStart","selectionEnd","data","validate","preventDefault","addEventListener","removeEventListener","_ref","textFieldProps","validation","_objectWithoutProperties","_excluded","compositionStartState","$kOq5K$useRef","setSelectionRange","setInputValue"],"sources":["C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\index.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useTextField.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {TextFieldAria} from './useTextField';\nexport {useTextField} from './useTextField';\nexport {useFormattedTextField} from './useFormattedTextField';\nexport type {AriaTextFieldOptions} from './useTextField';\nexport type {AriaTextFieldProps} from '@react-types/textfield';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {\n  ChangeEvent,\n  DOMFactory,\n  HTMLAttributes,\n  LabelHTMLAttributes,\n  ReactDOM,\n  RefObject,\n  useEffect\n} from 'react';\nimport {DOMAttributes, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, getOwnerWindow, mergeProps, useFormReset} from '@react-aria/utils';\nimport {useControlledState} from '@react-stately/utils';\nimport {useField} from '@react-aria/label';\nimport {useFocusable} from '@react-aria/focus';\nimport {useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\n\n/**\n * A map of HTML element names and their interface types.\n * For example `'a'` -> `HTMLAnchorElement`.\n */\ntype IntrinsicHTMLElements = {\n  [K in keyof IntrinsicHTMLAttributes]: IntrinsicHTMLAttributes[K] extends HTMLAttributes<infer T> ? T : never\n};\n\n/**\n * A map of HTML element names and their attribute interface types.\n * For example `'a'` -> `AnchorHTMLAttributes<HTMLAnchorElement>`.\n */\ntype IntrinsicHTMLAttributes = {\n  [K in keyof ReactDOM]: ReactDOM[K] extends DOMFactory<infer T, any> ? T : never\n};\n\ntype DefaultElementType = 'input';\n\n/**\n * The intrinsic HTML element names that `useTextField` supports; e.g. `input`,\n * `textarea`.\n */\ntype TextFieldIntrinsicElements = keyof Pick<IntrinsicHTMLElements, 'input' | 'textarea'>;\n\n/**\n * The HTML element interfaces that `useTextField` supports based on what is\n * defined for `TextFieldIntrinsicElements`; e.g. `HTMLInputElement`,\n * `HTMLTextAreaElement`.\n */\ntype TextFieldHTMLElementType = Pick<IntrinsicHTMLElements, TextFieldIntrinsicElements>;\n\n/**\n * The HTML attributes interfaces that `useTextField` supports based on what\n * is defined for `TextFieldIntrinsicElements`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldHTMLAttributesType = Pick<IntrinsicHTMLAttributes, TextFieldIntrinsicElements>;\n\n/**\n * The type of `inputProps` returned by `useTextField`; e.g. `InputHTMLAttributes`,\n * `TextareaHTMLAttributes`.\n */\ntype TextFieldInputProps<T extends TextFieldIntrinsicElements> = TextFieldHTMLAttributesType[T];\n\nexport interface AriaTextFieldOptions<T extends TextFieldIntrinsicElements> extends AriaTextFieldProps {\n  /**\n   * The HTML element used to render the input, e.g. 'input', or 'textarea'.\n   * It determines whether certain HTML attributes will be included in `inputProps`.\n   * For example, [`type`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-type).\n   * @default 'input'\n   */\n  inputElementType?: T,\n  /**\n   * A nonstandard attribute used by iOS Safari that controls how textual form elements should be automatically capitalized.\n   * See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocapitalize).\n   */\n  autoCapitalize?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'\n}\n\n/**\n * The type of `ref` object that can be passed to `useTextField` based on the given\n * intrinsic HTML element name; e.g.`RefObject<HTMLInputElement>`,\n * `RefObject<HTMLTextAreaElement>`.\n */\ntype TextFieldRefObject<T extends TextFieldIntrinsicElements> = RefObject<TextFieldHTMLElementType[T]>;\n\nexport interface TextFieldAria<T extends TextFieldIntrinsicElements = DefaultElementType> extends ValidationResult {\n  /** Props for the input element. */\n  inputProps: TextFieldInputProps<T>,\n  /** Props for the text field's visible label element, if any. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a text field.\n * @param props - Props for the text field.\n * @param ref - Ref to the HTML input or textarea element.\n */\nexport function useTextField<T extends TextFieldIntrinsicElements = DefaultElementType>(\n  props: AriaTextFieldOptions<T>,\n  ref: TextFieldRefObject<T>\n): TextFieldAria<T> {\n  let {\n    inputElementType = 'input',\n    isDisabled = false,\n    isRequired = false,\n    isReadOnly = false,\n    type = 'text',\n    validationBehavior = 'aria'\n  }: AriaTextFieldOptions<TextFieldIntrinsicElements> = props;\n  let [value, setValue] = useControlledState<string>(props.value, props.defaultValue || '', props.onChange);\n  let {focusableProps} = useFocusable(props, ref);\n  let validationState = useFormValidationState({\n    ...props,\n    value\n  });\n  let {isInvalid, validationErrors, validationDetails} = validationState.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  const inputOnlyProps = {\n    type,\n    pattern: props.pattern\n  };\n\n  useFormReset(ref, value, setValue);\n  useFormValidation(props, validationState, ref);\n\n  useEffect(() => {\n    // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.\n    // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,\n    // which causes Chrome to skip validation. Only updating `value` is ok in our case since our\n    // textareas are always controlled. React is planning on removing this synchronization in a\n    // future major version.\n    // https://github.com/facebook/react/issues/19474\n    // https://github.com/facebook/react/issues/11896\n    if (ref.current instanceof getOwnerWindow(ref.current).HTMLTextAreaElement) {\n      let input = ref.current;\n      Object.defineProperty(input, 'defaultValue', {\n        get: () => input.value,\n        set: () => {},\n        configurable: true\n      });\n    }\n  }, [ref]);\n\n  return {\n    labelProps,\n    inputProps: mergeProps(\n      domProps,\n      inputElementType === 'input' && inputOnlyProps,\n      {\n        disabled: isDisabled,\n        readOnly: isReadOnly,\n        required: isRequired && validationBehavior === 'native',\n        'aria-required': (isRequired && validationBehavior === 'aria') || undefined,\n        'aria-invalid': isInvalid || undefined,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-activedescendant': props['aria-activedescendant'],\n        'aria-autocomplete': props['aria-autocomplete'],\n        'aria-haspopup': props['aria-haspopup'],\n        value,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => setValue(e.target.value),\n        autoComplete: props.autoComplete,\n        autoCapitalize: props.autoCapitalize,\n        maxLength: props.maxLength,\n        minLength: props.minLength,\n        name: props.name,\n        placeholder: props.placeholder,\n        inputMode: props.inputMode,\n\n        // Clipboard events\n        onCopy: props.onCopy,\n        onCut: props.onCut,\n        onPaste: props.onPaste,\n\n        // Composition events\n        onCompositionEnd: props.onCompositionEnd,\n        onCompositionStart: props.onCompositionStart,\n        onCompositionUpdate: props.onCompositionUpdate,\n\n        // Selection events\n        onSelect: props.onSelect,\n\n        // Input events\n        onBeforeInput: props.onBeforeInput,\n        onInput: props.onInput,\n        ...focusableProps,\n        ...fieldProps\n      }\n    ),\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps, useEffectEvent} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  let onBeforeInputFallback = useEffectEvent((e: InputEvent) => {\n    let input = inputRef.current;\n\n    // Compute the next value of the input if the event is allowed to proceed.\n    // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n    let nextValue: string;\n    switch (e.inputType) {\n      case 'historyUndo':\n      case 'historyRedo':\n        // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n        // because presumably the input would have already been validated previously.\n        return;\n      case 'deleteContent':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteContentForward':\n        // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n        // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n        // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n        // If we support additional locales in the future, this may need to change.\n        nextValue = input.selectionEnd === input.selectionStart\n          ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n          : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteContentBackward':\n        nextValue = input.selectionEnd === input.selectionStart\n          ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n          : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteSoftLineBackward':\n      case 'deleteHardLineBackward':\n        nextValue = input.value.slice(input.selectionStart);\n        break;\n      default:\n        if (e.data != null) {\n          nextValue =\n            input.value.slice(0, input.selectionStart) +\n            e.data +\n            input.value.slice(input.selectionEnd);\n        }\n        break;\n    }\n\n    // If we did not compute a value, or the new value is invalid, prevent the event\n    // so that the browser does not update the input text, move the selection, or add to\n    // the undo/redo stack.\n    if (nextValue == null || !state.validate(nextValue)) {\n      e.preventDefault();\n    }\n  });\n\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n    input.addEventListener('beforeinput', onBeforeInputFallback, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInputFallback, false);\n    };\n  }, [inputRef, onBeforeInputFallback]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps, ...validation} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps,\n    descriptionProps,\n    errorMessageProps,\n    ...validation\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}