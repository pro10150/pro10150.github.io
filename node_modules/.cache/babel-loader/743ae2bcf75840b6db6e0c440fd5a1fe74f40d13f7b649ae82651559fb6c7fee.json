{"ast":null,"code":"import _slicedToArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\n\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\n  var _sort = [+toDate(intervalLeft.start), +toDate(intervalLeft.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort2 = _slicedToArray(_sort, 2),\n    leftStartTime = _sort2[0],\n    leftEndTime = _sort2[1];\n  var _sort3 = [+toDate(intervalRight.start), +toDate(intervalRight.end)].sort(function (a, b) {\n      return a - b;\n    }),\n    _sort4 = _slicedToArray(_sort3, 2),\n    rightStartTime = _sort4[0],\n    rightEndTime = _sort4[1];\n  if (options !== null && options !== void 0 && options.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}\n\n// Fallback for modularized imports:\nexport default areIntervalsOverlapping;","map":{"version":3,"names":["toDate","areIntervalsOverlapping","intervalLeft","intervalRight","options","_sort","start","end","sort","a","b","_sort2","_slicedToArray","leftStartTime","leftEndTime","_sort3","_sort4","rightStartTime","rightEndTime","inclusive"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/date-fns/areIntervalsOverlapping.mjs"],"sourcesContent":["import { toDate } from \"./toDate.mjs\";\r\n\r\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\r\n\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\r\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\r\n  const [leftStartTime, leftEndTime] = [\r\n    +toDate(intervalLeft.start),\r\n    +toDate(intervalLeft.end),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStartTime, rightEndTime] = [\r\n    +toDate(intervalRight.start),\r\n    +toDate(intervalRight.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  if (options?.inclusive)\r\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default areIntervalsOverlapping;\r\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,YAAY,EAAEC,aAAa,EAAEC,OAAO,EAAE;EAC5E,IAAAC,KAAA,GAAqC,CACnC,CAACL,MAAM,CAACE,YAAY,CAACI,KAAK,CAAC,EAC3B,CAACN,MAAM,CAACE,YAAY,CAACK,GAAG,CAAC,CAC1B,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAC,MAAA,GAAAC,cAAA,CAAAP,KAAA;IAHhBQ,aAAa,GAAAF,MAAA;IAAEG,WAAW,GAAAH,MAAA;EAIjC,IAAAI,MAAA,GAAuC,CACrC,CAACf,MAAM,CAACG,aAAa,CAACG,KAAK,CAAC,EAC5B,CAACN,MAAM,CAACG,aAAa,CAACI,GAAG,CAAC,CAC3B,CAACC,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAAKD,CAAC,GAAGC,CAAC;IAAA,EAAC;IAAAM,MAAA,GAAAJ,cAAA,CAAAG,MAAA;IAHhBE,cAAc,GAAAD,MAAA;IAAEE,YAAY,GAAAF,MAAA;EAKnC,IAAIZ,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEe,SAAS,EACpB,OAAON,aAAa,IAAIK,YAAY,IAAID,cAAc,IAAIH,WAAW;EAEvE,OAAOD,aAAa,GAAGK,YAAY,IAAID,cAAc,GAAGH,WAAW;AACrE;;AAEA;AACA,eAAeb,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}