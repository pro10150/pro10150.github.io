{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _inherits from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection, getFirstItem as $1BfjW$getFirstItem, getLastItem as $1BfjW$getLastItem, CollectionBuilder as $1BfjW$CollectionBuilder } from \"@react-stately/collections\";\nimport $1BfjW$react, { useState as $1BfjW$useState, useMemo as $1BfjW$useMemo, useCallback as $1BfjW$useCallback } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nimport { tableNestedRows as $1BfjW$tableNestedRows } from \"@react-stately/flags\";\nimport { useControlledState as $1BfjW$useControlledState } from \"@react-stately/utils\";\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ /*\r\n    * Copyright 2022 Adobe. All rights reserved.\r\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License. You may obtain a copy\r\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software distributed under\r\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n    * OF ANY KIND, either express or implied. See the License for the specific language\r\n    * governing permissions and limitations under the License.\r\n    */ /*\r\n       * Copyright 2022 Adobe. All rights reserved.\r\n       * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n       * you may not use this file except in compliance with the License. You may obtain a copy\r\n       * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n       *\r\n       * Unless required by applicable law or agreed to in writing, software distributed under\r\n       * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n       * OF ANY KIND, either express or implied. See the License for the specific language\r\n       * governing permissions and limitations under the License.\r\n       */ /*\r\n          * Copyright 2022 Adobe. All rights reserved.\r\n          * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n          * you may not use this file except in compliance with the License. You may obtain a copy\r\n          * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n          *\r\n          * Unless required by applicable law or agreed to in writing, software distributed under\r\n          * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n          * OF ANY KIND, either express or implied. See the License for the specific language\r\n          * governing permissions and limitations under the License.\r\n          */\nfunction $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\nfunction $6818b1c4fc67028d$export$9078bad4c3934604(width) {\n  if (!width) return 1;\n  var match = width.match(/^(.+)(?=fr$)/);\n  // if width is the incorrect format, just default it to a 1fr\n  if (!match) {\n    console.warn(\"width: \".concat(width, \" is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')\"), \"defaulting to '1fr'\");\n    return 1;\n  }\n  return parseFloat(match[0]);\n}\nfunction $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === \"string\") {\n    var match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error(\"Only percentages or numbers are supported for static column widths\");\n    return tableWidth * (parseFloat(match[0]) / 100);\n  }\n  return width;\n}\nfunction $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;\n}\nfunction $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;\n}\nfunction $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {\n  var hasNonFrozenItems = false;\n  var flexItems = columns.map(function (column, index) {\n    var _column_width, _ref, _ref1;\n    var width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : \"1fr\";\n    var frozen = false;\n    var baseSize = 0;\n    var flex = 0;\n    var targetMainSize = null;\n    if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {\n      baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);\n      frozen = true;\n    } else {\n      flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);\n      if (flex <= 0) frozen = true;\n    }\n    var _column_minWidth, _ref2;\n    var min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);\n    var max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);\n    var hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n    // 9.7.1\n    // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.\n    // 9.7.2\n    if (frozen) targetMainSize = hypotheticalMainSize;else if (baseSize > hypotheticalMainSize) {\n      frozen = true;\n      targetMainSize = hypotheticalMainSize;\n    }\n    // 9.7.3\n    if (!frozen) hasNonFrozenItems = true;\n    return {\n      frozen: frozen,\n      baseSize: baseSize,\n      hypotheticalMainSize: hypotheticalMainSize,\n      min: min,\n      max: max,\n      flex: flex,\n      targetMainSize: targetMainSize,\n      violation: 0\n    };\n  });\n  // 9.7.4\n  // 9.7.4.a\n  var _loop = function _loop() {\n    // 9.7.4.b\n    /**\r\n    * Calculate the remaining free space as for initial free space,\r\n    * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is\r\n    * less than one, multiply the initial free space by this sum (of flex factors).\r\n    * If the magnitude of this value is less than the magnitude of\r\n    * the remaining free space, use this as the remaining free space.\r\n    */\n    var usedWidth = 0;\n    var flexFactors = 0;\n    flexItems.forEach(function (item) {\n      if (item.frozen) usedWidth += item.targetMainSize;else {\n        usedWidth += item.baseSize;\n        flexFactors += item.flex;\n      }\n    });\n    var remainingFreeSpace = availableWidth - usedWidth;\n    // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0\n    // so no need to check for flexFactors < 1\n    // 9.7.4.c\n    /**\r\n    * If the remaining free space is zero\r\n    * - Do nothing.\r\n    * Else // remember, we're always in grow mode\r\n    * - Find the ratio of the item’s flex grow factor to the\r\n    * sum of the flex grow factors of all unfrozen items on\r\n    * the line. Set the item’s target main size to its flex\r\n    * base size plus a fraction of the remaining free space\r\n    * proportional to the ratio.\r\n    */\n    if (remainingFreeSpace > 0) flexItems.forEach(function (item) {\n      if (!item.frozen) {\n        var ratio = item.flex / flexFactors;\n        item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;\n      }\n    });\n    // 9.7.4.d\n    /**\r\n    * Fix min/max violations. Clamp each non-frozen item’s\r\n    * target main size by its used min and max main sizes\r\n    * and floor its content-box size at zero. If the item’s\r\n    * target main size was made smaller by this, it’s a max\r\n    * violation. If the item’s target main size was made\r\n    * larger by this, it’s a min violation.\r\n    */\n    var totalViolation = 0;\n    flexItems.forEach(function (item) {\n      item.violation = 0;\n      if (!item.frozen) {\n        var min = item.min,\n          max = item.max,\n          targetMainSize = item.targetMainSize;\n        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n        item.violation = item.targetMainSize - targetMainSize;\n        totalViolation += item.violation;\n      }\n    });\n    // 9.7.4.e\n    /**\r\n    * Freeze over-flexed items. The total violation is the\r\n    * sum of the adjustments from the previous step\r\n    * ∑(clamped size - unclamped size). If the total violation is:\r\n    * Zero\r\n    * - Freeze all items.\r\n    *\r\n    * Positive\r\n    * - Freeze all the items with min violations.\r\n    *\r\n    * Negative\r\n    * - Freeze all the items with max violations.\r\n    */\n    hasNonFrozenItems = false;\n    flexItems.forEach(function (item) {\n      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) item.frozen = true;else if (!item.frozen) hasNonFrozenItems = true;\n    });\n  };\n  while (hasNonFrozenItems) {\n    _loop();\n  }\n  return $6818b1c4fc67028d$var$cascadeRounding(flexItems);\n}\nfunction $6818b1c4fc67028d$var$cascadeRounding(flexItems) {\n  /*\r\n  Given an array of floats that sum to an integer, this rounds the floats\r\n  and returns an array of integers with the same sum.\r\n  */\n  var fpTotal = 0;\n  var intTotal = 0;\n  var roundedArray = [];\n  flexItems.forEach(function (item) {\n    var float = item.targetMainSize;\n    var integer = Math.round(float + fpTotal) - intTotal;\n    fpTotal += float;\n    intTotal += integer;\n    roundedArray.push(integer);\n  });\n  return roundedArray;\n}\nvar $a9e7ae544a4e41dd$export$7ff77a162970b30e = /*#__PURE__*/function () {\n  function $a9e7ae544a4e41dd$export$7ff77a162970b30e(options) {\n    _classCallCheck(this, $a9e7ae544a4e41dd$export$7ff77a162970b30e);\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n    var _options_getDefaultWidth;\n    this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : function () {\n      return \"1fr\";\n    };\n    var _options_getDefaultMinWidth;\n    this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : function () {\n      return 75;\n    };\n  }\n  _createClass($a9e7ae544a4e41dd$export$7ff77a162970b30e, [{\n    key: \"splitColumnsIntoControlledAndUncontrolled\",\n    value: /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */function splitColumnsIntoControlledAndUncontrolled(columns) {\n      return columns.reduce(function (acc, col) {\n        if (col.props.width != null) acc[0].set(col.key, col);else acc[1].set(col.key, col);\n        return acc;\n      }, [new Map(), new Map()]);\n    }\n    /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  }, {\n    key: \"recombineColumns\",\n    value: function recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {\n      return new Map(columns.map(function (col) {\n        if (uncontrolledColumns.has(col.key)) return [col.key, uncontrolledWidths.get(col.key)];else return [col.key, controlledColumns.get(col.key).props.width];\n      }));\n    }\n    /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  }, {\n    key: \"getInitialUncontrolledWidths\",\n    value: function getInitialUncontrolledWidths(uncontrolledColumns) {\n      var _this2 = this;\n      return new Map(Array.from(uncontrolledColumns).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          col = _ref4[1];\n        var _this_getDefaultWidth, _this;\n        var _col_props_defaultWidth, _ref;\n        return [key, (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = _this2).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : \"1fr\"];\n      }));\n    }\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(key) {\n      var _this_columnWidths_get;\n      return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;\n    }\n  }, {\n    key: \"getColumnMinWidth\",\n    value: function getColumnMinWidth(key) {\n      var _this_columnMinWidths_get;\n      return (_this_columnMinWidths_get = this.columnMinWidths.get(key)) !== null && _this_columnMinWidths_get !== void 0 ? _this_columnMinWidths_get : 0;\n    }\n  }, {\n    key: \"getColumnMaxWidth\",\n    value: function getColumnMaxWidth(key) {\n      var _this_columnMaxWidths_get;\n      return (_this_columnMaxWidths_get = this.columnMaxWidths.get(key)) !== null && _this_columnMaxWidths_get !== void 0 ? _this_columnMaxWidths_get : 0;\n    }\n  }, {\n    key: \"resizeColumnWidth\",\n    value: function resizeColumnWidth(tableWidth, collection, controlledWidths, uncontrolledWidths) {\n      var _this3 = this;\n      var col = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var width = arguments.length > 5 ? arguments[5] : undefined;\n      var prevColumnWidths = this.columnWidths;\n      // resizing a column\n      var resizeIndex = Infinity;\n      var resizingChanged = new Map([].concat(_toConsumableArray(controlledWidths), _toConsumableArray(uncontrolledWidths)));\n      var percentKeys = new Map();\n      var frKeysToTheRight = new Map();\n      var minWidths = new Map();\n      // freeze columns to the left to their previous pixel value\n      collection.columns.forEach(function (column, i) {\n        var _column_props_width_endsWith, _column_props_width;\n        var frKey;\n        var frValue;\n        minWidths.set(column.key, _this3.getDefaultMinWidth(collection.columns[i]));\n        if (col !== column.key && !column.props.width && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(uncontrolledWidths.get(column.key))) {\n          // uncontrolled don't have props.width for us, so instead get from our state\n          frKey = column.key;\n          frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(uncontrolledWidths.get(column.key));\n        } else if (col !== column.key && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(column.props.width) && !uncontrolledWidths.get(column.key)) {\n          // controlledWidths will be the same in the collection\n          frKey = column.key;\n          frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(column.props.width);\n        } else if (col !== column.key && ((_column_props_width = column.props.width) === null || _column_props_width === void 0 ? void 0 : (_column_props_width_endsWith = _column_props_width.endsWith) === null || _column_props_width_endsWith === void 0 ? void 0 : _column_props_width_endsWith.call(_column_props_width, \"%\"))) percentKeys.set(column.key, column.props.width);\n        // don't freeze columns to the right of the resizing one\n        if (resizeIndex < i) {\n          if (frKey) frKeysToTheRight.set(frKey, frValue);\n          return;\n        }\n        // we already know the new size of the resizing column\n        if (column.key === col) {\n          resizeIndex = i;\n          resizingChanged.set(column.key, Math.floor(width));\n          return;\n        }\n        // freeze column to previous value\n        resizingChanged.set(column.key, prevColumnWidths.get(column.key));\n      });\n      // predict pixels sizes for all columns based on resize\n      var columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(function (col) {\n        return _objectSpread(_objectSpread({}, col.props), {}, {\n          key: col.key\n        });\n      }), resizingChanged, function (i) {\n        return _this3.getDefaultWidth(collection.columns[i]);\n      }, function (i) {\n        return _this3.getDefaultMinWidth(collection.columns[i]);\n      });\n      // set all new column widths for onResize event\n      // columns going in will be the same order as the columns coming out\n      var newWidths = new Map();\n      // set all column widths based on calculateColumnSize\n      columnWidths.forEach(function (width, index) {\n        var key = collection.columns[index].key;\n        newWidths.set(key, width);\n      });\n      // add FR's back as they were to columns to the right\n      Array.from(frKeysToTheRight).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n          key = _ref6[0];\n        newWidths.set(key, \"\".concat(frKeysToTheRight.get(key), \"fr\"));\n      });\n      // put back in percents\n      Array.from(percentKeys).forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          width = _ref8[1];\n        // resizing locks a column to a px width\n        if (key === col) return;\n        newWidths.set(key, width);\n      });\n      return newWidths;\n    }\n  }, {\n    key: \"buildColumnWidths\",\n    value: function buildColumnWidths(tableWidth, collection, widths) {\n      var _this4 = this;\n      this.columnWidths = new Map();\n      this.columnMinWidths = new Map();\n      this.columnMaxWidths = new Map();\n      // initial layout or table/window resizing\n      var columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(function (col) {\n        return _objectSpread(_objectSpread({}, col.props), {}, {\n          key: col.key\n        });\n      }), widths, function (i) {\n        return _this4.getDefaultWidth(collection.columns[i]);\n      }, function (i) {\n        return _this4.getDefaultMinWidth(collection.columns[i]);\n      });\n      // columns going in will be the same order as the columns coming out\n      columnWidths.forEach(function (width, index) {\n        var key = collection.columns[index].key;\n        var column = collection.columns[index];\n        _this4.columnWidths.set(key, width);\n        var _column_props_minWidth;\n        _this4.columnMinWidths.set(key, (0, $6818b1c4fc67028d$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : _this4.getDefaultMinWidth(column), tableWidth));\n        _this4.columnMaxWidths.set(key, (0, $6818b1c4fc67028d$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));\n      });\n      return this.columnWidths;\n    }\n  }]);\n  return $a9e7ae544a4e41dd$export$7ff77a162970b30e;\n}();\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  var getDefaultWidth = props.getDefaultWidth,\n    getDefaultMinWidth = props.getDefaultMinWidth,\n    _props$tableWidth = props.tableWidth,\n    tableWidth = _props$tableWidth === void 0 ? 0 : _props$tableWidth;\n  var _ref9 = (0, $1BfjW$useState)(null),\n    _ref10 = _slicedToArray(_ref9, 2),\n    resizingColumn = _ref10[0],\n    setResizingColumn = _ref10[1];\n  var columnLayout = (0, $1BfjW$useMemo)(function () {\n    return new (0, $a9e7ae544a4e41dd$export$7ff77a162970b30e)({\n      getDefaultWidth: getDefaultWidth,\n      getDefaultMinWidth: getDefaultMinWidth\n    });\n  }, [getDefaultWidth, getDefaultMinWidth]);\n  var _ref11 = (0, $1BfjW$useMemo)(function () {\n      return columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns);\n    }, [state.collection.columns, columnLayout]),\n    _ref12 = _slicedToArray(_ref11, 2),\n    controlledColumns = _ref12[0],\n    uncontrolledColumns = _ref12[1];\n  // uncontrolled column widths\n  var _ref13 = (0, $1BfjW$useState)(function () {\n      return columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n    }),\n    _ref14 = _slicedToArray(_ref13, 2),\n    uncontrolledWidths = _ref14[0],\n    setUncontrolledWidths = _ref14[1];\n  // Update uncontrolled widths if the columns changed.\n  var _ref15 = (0, $1BfjW$useState)(state.collection.columns),\n    _ref16 = _slicedToArray(_ref15, 2),\n    lastColumns = _ref16[0],\n    setLastColumns = _ref16[1];\n  if (state.collection.columns !== lastColumns) {\n    if (state.collection.columns.length !== lastColumns.length || state.collection.columns.some(function (c, i) {\n      return c.key !== lastColumns[i].key;\n    })) {\n      var newUncontrolledWidths = columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n      setUncontrolledWidths(newUncontrolledWidths);\n    }\n    setLastColumns(state.collection.columns);\n  }\n  // combine columns back into one map that maintains same order as the columns\n  var colWidths = (0, $1BfjW$useMemo)(function () {\n    return columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns);\n  }, [state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns, columnLayout]);\n  var startResize = (0, $1BfjW$useCallback)(function (key) {\n    setResizingColumn(key);\n  }, [setResizingColumn]);\n  var updateResizedColumns = (0, $1BfjW$useCallback)(function (key, width) {\n    var newControlled = new Map(Array.from(controlledColumns).map(function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 2),\n        key = _ref18[0],\n        entry = _ref18[1];\n      return [key, entry.props.width];\n    }));\n    var newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);\n    var map = new Map(Array.from(uncontrolledColumns).map(function (_ref19) {\n      var _ref20 = _slicedToArray(_ref19, 1),\n        key = _ref20[0];\n      return [key, newSizes.get(key)];\n    }));\n    map.set(key, width);\n    setUncontrolledWidths(map);\n    return newSizes;\n  }, [controlledColumns, uncontrolledColumns, setUncontrolledWidths, tableWidth, columnLayout, state.collection, uncontrolledWidths]);\n  var endResize = (0, $1BfjW$useCallback)(function () {\n    setResizingColumn(null);\n  }, [setResizingColumn]);\n  (0, $1BfjW$useMemo)(function () {\n    return columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths);\n  }, [tableWidth, state.collection, colWidths, columnLayout]);\n  return (0, $1BfjW$useMemo)(function () {\n    return {\n      resizingColumn: resizingColumn,\n      updateResizedColumns: updateResizedColumns,\n      startResize: startResize,\n      endResize: endResize,\n      getColumnWidth: function getColumnWidth(key) {\n        return columnLayout.getColumnWidth(key);\n      },\n      getColumnMinWidth: function getColumnMinWidth(key) {\n        return columnLayout.getColumnMinWidth(key);\n      },\n      getColumnMaxWidth: function getColumnMaxWidth(key) {\n        return columnLayout.getColumnMaxWidth(key);\n      },\n      tableState: state\n    };\n  }, [columnLayout, resizingColumn, updateResizedColumns, startResize, endResize, state]);\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = \"row-header-column-\" + Math.random().toString(36).slice(2);\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = \"row-header-column-\" + Math.random().toString(36).slice(2);\nwhile ($788781baa30117fa$var$ROW_HEADER_COLUMN_KEY === $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG) $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = \"row-header-column-\" + Math.random().toString(36).slice(2);\nfunction $788781baa30117fa$export$7c127db850d4e81e(keyMap, columnNodes) {\n  if (columnNodes.length === 0) return [];\n  var columns = [];\n  var seen = new Map();\n  var _iterator = _createForOfIteratorHelper(columnNodes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _column = _step.value;\n      var parentKey = _column.parentKey;\n      var col = [_column];\n      while (parentKey) {\n        var parent = keyMap.get(parentKey);\n        if (!parent) break;\n        // If we've already seen this parent, than it is shared\n        // with a previous column. If the current column is taller\n        // than the previous column, than we need to shift the parent\n        // in the previous column so it's level with the current column.\n        if (seen.has(parent)) {\n          parent.colspan++;\n          var _seen$get = seen.get(parent),\n            _column2 = _seen$get.column,\n            index = _seen$get.index;\n          if (index > col.length) break;\n          for (var _i3 = index; _i3 < col.length; _i3++) _column2.splice(_i3, 0, null);\n          // Adjust shifted indices\n          for (var _i4 = col.length; _i4 < _column2.length; _i4++)\n          // eslint-disable-next-line max-depth\n          if (_column2[_i4] && seen.has(_column2[_i4])) seen.get(_column2[_i4]).index = _i4;\n        } else {\n          parent.colspan = 1;\n          col.push(parent);\n          seen.set(parent, {\n            column: col,\n            index: col.length - 1\n          });\n        }\n        parentKey = parent.parentKey;\n      }\n      columns.push(col);\n      _column.index = columns.length - 1;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  });\n  // Convert columns into rows.\n  var colIndex = 0;\n  for (var _i = 0, _columns = columns; _i < _columns.length; _i++) {\n    var column = _columns[_i];\n    var _i2 = maxLength - 1;\n    var _iterator2 = _createForOfIteratorHelper(column),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n        if (item) {\n          // Fill the space up until the current column with a placeholder\n          var row = headerRows[_i2];\n          var rowLength = row.reduce(function (p, c) {\n            return p + c.colspan;\n          }, 0);\n          if (rowLength < colIndex) {\n            var placeholder = {\n              type: \"placeholder\",\n              key: \"placeholder-\" + item.key,\n              colspan: colIndex - rowLength,\n              index: rowLength,\n              value: null,\n              rendered: null,\n              level: _i2,\n              hasChildNodes: false,\n              childNodes: [],\n              textValue: null\n            };\n            // eslint-disable-next-line max-depth\n            if (row.length > 0) {\n              row[row.length - 1].nextKey = placeholder.key;\n              placeholder.prevKey = row[row.length - 1].key;\n            }\n            row.push(placeholder);\n          }\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = item.key;\n            item.prevKey = row[row.length - 1].key;\n          }\n          item.level = _i2;\n          item.colIndex = colIndex;\n          row.push(item);\n        }\n        _i2--;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    colIndex++;\n  }\n  // Add placeholders at the end of each row that is shorter than the maximum\n  var i = 0;\n  var _iterator3 = _createForOfIteratorHelper(headerRows),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _row = _step3.value;\n      var _rowLength = _row.reduce(function (p, c) {\n        return p + c.colspan;\n      }, 0);\n      if (_rowLength < columnNodes.length) {\n        var _placeholder = {\n          type: \"placeholder\",\n          key: \"placeholder-\" + _row[_row.length - 1].key,\n          colspan: columnNodes.length - _rowLength,\n          index: _rowLength,\n          value: null,\n          rendered: null,\n          level: i,\n          hasChildNodes: false,\n          childNodes: [],\n          textValue: null,\n          prevKey: _row[_row.length - 1].key\n        };\n        _row.push(_placeholder);\n      }\n      i++;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: \"headerrow\",\n      key: \"headerrow-\" + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\nvar $788781baa30117fa$export$596e1b2e2cf93690 = /*#__PURE__*/function (_ref21, _Symbol$iterator) {\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _ref21);\n  var _super = _createSuper($788781baa30117fa$export$596e1b2e2cf93690);\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this5;\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: \"column\",\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: \"\",\n        level: 0,\n        index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n    // Add cell for drag buttons if needed.\n    if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {\n      var _rowHeaderColumn = {\n        type: \"column\",\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG,\n        value: null,\n        textValue: \"\",\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isDragButtonCell: true\n        }\n      };\n      columns.unshift(_rowHeaderColumn);\n    }\n    var rows = [];\n    var columnKeyMap = new Map();\n    var visit = function visit(node) {\n      switch (node.type) {\n        case \"body\":\n          body = node;\n          break;\n        case \"column\":\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n        case \"item\":\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n      var _iterator4 = _createForOfIteratorHelper(node.childNodes),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var child = _step4.value;\n          visit(child);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    };\n    var _iterator5 = _createForOfIteratorHelper(nodes),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var node = _step5.value;\n        visit(node);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    var headerRows = $788781baa30117fa$export$7c127db850d4e81e(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this5 = _super.call(this, {\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    _this5._size = 0;\n    _this5.columns = columns;\n    _this5.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this5.body = body;\n    _this5.headerRows = headerRows;\n    _this5._size = _toConsumableArray(body.childNodes).length;\n    // Default row header column to the first one.\n    if (_this5.rowHeaderColumnKeys.size === 0) {\n      if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n        if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) _this5.rowHeaderColumnKeys.add(_this5.columns[2].key);else _this5.rowHeaderColumnKeys.add(_this5.columns[1].key);\n      } else _this5.rowHeaderColumnKeys.add(_this5.columns[0].key);\n    }\n    return _this5;\n  }\n  _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(this.body.childNodes, \"t0\", 1);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var _getFirstItem;\n      return (_getFirstItem = (0, $1BfjW$getFirstItem)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var _getLastItem;\n      return (_getLastItem = (0, $1BfjW$getLastItem)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }, {\n    key: \"getTextValue\",\n    value: function getTextValue(key) {\n      var row = this.getItem(key);\n      if (!row) return \"\";\n      // If the row has a textValue, use that.\n      if (row.textValue) return row.textValue;\n      // Otherwise combine the text of each of the row header columns.\n      var rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n      if (rowHeaderColumnKeys) {\n        var text = [];\n        var _iterator6 = _createForOfIteratorHelper(row.childNodes),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var cell = _step6.value;\n            var column = this.columns[cell.index];\n            if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);\n            if (text.length === rowHeaderColumnKeys.size) break;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return text.join(\" \");\n      }\n      return \"\";\n    }\n  }]);\n  return $788781baa30117fa$export$596e1b2e2cf93690;\n}((0, $1BfjW$GridCollection), Symbol.iterator);\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: \"descending\",\n  descending: \"ascending\"\n};\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _ref22 = (0, $1BfjW$useState)(false),\n    _ref23 = _slicedToArray(_ref22, 2),\n    isKeyboardNavigationDisabled = _ref23[0],\n    setKeyboardNavigationDisabled = _ref23[1];\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? \"none\" : _props$selectionMode,\n    showSelectionCheckboxes = props.showSelectionCheckboxes,\n    showDragButtons = props.showDragButtons;\n  var context = (0, $1BfjW$useMemo)(function () {\n    return {\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  var collection = (0, $1BfjW$useCollection)(props, (0, $1BfjW$useCallback)(function (nodes) {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(nodes, null, context);\n  }, [context]), context);\n  var _ref24 = (0, $1BfjW$useGridState)(_objectSpread(_objectSpread({}, props), {}, {\n      collection: collection,\n      disabledBehavior: props.disabledBehavior || \"selection\"\n    })),\n    disabledKeys = _ref24.disabledKeys,\n    selectionManager = _ref24.selectionManager;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n    sort: function sort(columnKey, direction) {\n      var _props_sortDescriptor;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : \"ascending\"\n      });\n    }\n  };\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, columns, _iterator7, _step7, column, _columns2;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        children = props.children, columns = props.columns; // Clear columns so they aren't double added in strict mode.\n        context.columns = [];\n        if (!(typeof children === \"function\")) {\n          _context2.next = 24;\n          break;\n        }\n        if (columns) {\n          _context2.next = 5;\n          break;\n        }\n        throw new Error(\"props.children was a function but props.columns is missing\");\n      case 5:\n        _iterator7 = _createForOfIteratorHelper(columns);\n        _context2.prev = 6;\n        _iterator7.s();\n      case 8:\n        if ((_step7 = _iterator7.n()).done) {\n          _context2.next = 14;\n          break;\n        }\n        column = _step7.value;\n        _context2.next = 12;\n        return {\n          type: \"column\",\n          value: column,\n          renderer: children\n        };\n      case 12:\n        _context2.next = 8;\n        break;\n      case 14:\n        _context2.next = 19;\n        break;\n      case 16:\n        _context2.prev = 16;\n        _context2.t0 = _context2[\"catch\"](6);\n        _iterator7.e(_context2.t0);\n      case 19:\n        _context2.prev = 19;\n        _iterator7.f();\n        return _context2.finish(19);\n      case 22:\n        _context2.next = 27;\n        break;\n      case 24:\n        _columns2 = [];\n        (0, $1BfjW$react).Children.forEach(children, function (column) {\n          _columns2.push({\n            type: \"column\",\n            element: column\n          });\n        });\n        return _context2.delegateYield(_columns2, \"t1\", 27);\n      case 27:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, getCollectionNode, null, [[6, 16, 19, 22]]);\n});\n/**\r\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\r\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\r\n */ // We don't want getCollectionNode to show up in the type definition\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, items;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        children = props.children, items = props.items;\n        _context4.next = 3;\n        return {\n          type: \"body\",\n          hasChildNodes: true,\n          props: props,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator8, _step8, item, _items;\n            return _regeneratorRuntime().wrap(function childNodes$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!(typeof children === \"function\")) {\n                    _context3.next = 22;\n                    break;\n                  }\n                  if (items) {\n                    _context3.next = 3;\n                    break;\n                  }\n                  throw new Error(\"props.children was a function but props.items is missing\");\n                case 3:\n                  _iterator8 = _createForOfIteratorHelper(items);\n                  _context3.prev = 4;\n                  _iterator8.s();\n                case 6:\n                  if ((_step8 = _iterator8.n()).done) {\n                    _context3.next = 12;\n                    break;\n                  }\n                  item = _step8.value;\n                  _context3.next = 10;\n                  return {\n                    type: \"item\",\n                    value: item,\n                    renderer: children\n                  };\n                case 10:\n                  _context3.next = 6;\n                  break;\n                case 12:\n                  _context3.next = 17;\n                  break;\n                case 14:\n                  _context3.prev = 14;\n                  _context3.t0 = _context3[\"catch\"](4);\n                  _iterator8.e(_context3.t0);\n                case 17:\n                  _context3.prev = 17;\n                  _iterator8.f();\n                  return _context3.finish(17);\n                case 20:\n                  _context3.next = 25;\n                  break;\n                case 22:\n                  _items = [];\n                  (0, $1BfjW$react).Children.forEach(children, function (item) {\n                    _items.push({\n                      type: \"item\",\n                      element: item\n                    });\n                  });\n                  return _context3.delegateYield(_items, \"t1\", 25);\n                case 25:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, childNodes, null, [[4, 14, 17, 20]]);\n          })\n        };\n      case 3:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, getCollectionNode);\n});\n/**\r\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\r\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\r\n */ // We don't want getCollectionNode to show up in the type definition\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n$1cd244557c2f97d5$var$Column.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var title, children, childColumns, rendered, textValue, fullNodes, updateContext;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        title = props.title, children = props.children, childColumns = props.childColumns;\n        rendered = title || children;\n        textValue = props.textValue || (typeof rendered === \"string\" ? rendered : \"\") || props[\"aria-label\"];\n        _context6.next = 5;\n        return {\n          type: \"column\",\n          hasChildNodes: !!childColumns || title && (0, $1BfjW$react).Children.count(children) > 0,\n          rendered: rendered,\n          textValue: textValue,\n          props: props,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator9, _step9, child, _childColumns;\n            return _regeneratorRuntime().wrap(function childNodes$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (!childColumns) {\n                    _context5.next = 20;\n                    break;\n                  }\n                  _iterator9 = _createForOfIteratorHelper(childColumns);\n                  _context5.prev = 2;\n                  _iterator9.s();\n                case 4:\n                  if ((_step9 = _iterator9.n()).done) {\n                    _context5.next = 10;\n                    break;\n                  }\n                  child = _step9.value;\n                  _context5.next = 8;\n                  return {\n                    type: \"column\",\n                    value: child\n                  };\n                case 8:\n                  _context5.next = 4;\n                  break;\n                case 10:\n                  _context5.next = 15;\n                  break;\n                case 12:\n                  _context5.prev = 12;\n                  _context5.t0 = _context5[\"catch\"](2);\n                  _iterator9.e(_context5.t0);\n                case 15:\n                  _context5.prev = 15;\n                  _iterator9.f();\n                  return _context5.finish(15);\n                case 18:\n                  _context5.next = 24;\n                  break;\n                case 20:\n                  if (!title) {\n                    _context5.next = 24;\n                    break;\n                  }\n                  _childColumns = [];\n                  (0, $1BfjW$react).Children.forEach(children, function (child) {\n                    _childColumns.push({\n                      type: \"column\",\n                      element: child\n                    });\n                  });\n                  return _context5.delegateYield(_childColumns, \"t1\", 24);\n                case 24:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, childNodes, null, [[2, 12, 15, 18]]);\n          }),\n          shouldInvalidate: function shouldInvalidate(newContext) {\n            // This is a bit of a hack, but it works.\n            // If this method is called, then there's a cached version of this node available.\n            // But, we need to keep the list of columns in the new context up to date.\n            updateContext(newContext);\n            return false;\n          }\n        };\n      case 5:\n        fullNodes = _context6.sent;\n        updateContext = function updateContext(context) {\n          // register leaf columns on the context so that <Row> can access them\n          var _iterator10 = _createForOfIteratorHelper(fullNodes),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var node = _step10.value;\n              if (!node.hasChildNodes) context.columns.push(node);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        };\n        updateContext(context);\n      case 8:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, getCollectionNode);\n});\n/**\r\n * A Column represents a field of each item within a Table. Columns may also contain nested\r\n * Column elements to represent column groups. Nested columns can be statically defined as\r\n * children, or dynamically generated using a function based on the `childColumns` prop.\r\n */ // We don't want getCollectionNode to show up in the type definition\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props, context) {\n  var children, textValue, UNSTABLE_childItems;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context8) {\n    while (1) switch (_context8.prev = _context8.next) {\n      case 0:\n        children = props.children, textValue = props.textValue, UNSTABLE_childItems = props.UNSTABLE_childItems;\n        _context8.next = 3;\n        return {\n          type: \"item\",\n          props: props,\n          textValue: textValue,\n          \"aria-label\": props[\"aria-label\"],\n          hasChildNodes: true,\n          childNodes: /*#__PURE__*/_regeneratorRuntime().mark(function childNodes() {\n            var _iterator11, _step11, column, _iterator12, _step12, child, cells, childRows;\n            return _regeneratorRuntime().wrap(function childNodes$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  if (!context.showDragButtons) {\n                    _context7.next = 3;\n                    break;\n                  }\n                  _context7.next = 3;\n                  return {\n                    type: \"cell\",\n                    key: \"header-drag\",\n                    props: {\n                      isDragButtonCell: true\n                    }\n                  };\n                case 3:\n                  if (!(context.showSelectionCheckboxes && context.selectionMode !== \"none\")) {\n                    _context7.next = 6;\n                    break;\n                  }\n                  _context7.next = 6;\n                  return {\n                    type: \"cell\",\n                    key: \"header\",\n                    props: {\n                      isSelectionCell: true\n                    }\n                  };\n                case 6:\n                  if (!(typeof children === \"function\")) {\n                    _context7.next = 44;\n                    break;\n                  }\n                  _iterator11 = _createForOfIteratorHelper(context.columns);\n                  _context7.prev = 8;\n                  _iterator11.s();\n                case 10:\n                  if ((_step11 = _iterator11.n()).done) {\n                    _context7.next = 16;\n                    break;\n                  }\n                  column = _step11.value;\n                  _context7.next = 14;\n                  return {\n                    type: \"cell\",\n                    element: children(column.key),\n                    key: column.key // this is combined with the row key by CollectionBuilder\n                  };\n                case 14:\n                  _context7.next = 10;\n                  break;\n                case 16:\n                  _context7.next = 21;\n                  break;\n                case 18:\n                  _context7.prev = 18;\n                  _context7.t0 = _context7[\"catch\"](8);\n                  _iterator11.e(_context7.t0);\n                case 21:\n                  _context7.prev = 21;\n                  _iterator11.f();\n                  return _context7.finish(21);\n                case 24:\n                  if (!UNSTABLE_childItems) {\n                    _context7.next = 42;\n                    break;\n                  }\n                  _iterator12 = _createForOfIteratorHelper(UNSTABLE_childItems);\n                  _context7.prev = 26;\n                  _iterator12.s();\n                case 28:\n                  if ((_step12 = _iterator12.n()).done) {\n                    _context7.next = 34;\n                    break;\n                  }\n                  child = _step12.value;\n                  _context7.next = 32;\n                  return {\n                    type: \"item\",\n                    value: child\n                  };\n                case 32:\n                  _context7.next = 28;\n                  break;\n                case 34:\n                  _context7.next = 39;\n                  break;\n                case 36:\n                  _context7.prev = 36;\n                  _context7.t1 = _context7[\"catch\"](26);\n                  _iterator12.e(_context7.t1);\n                case 39:\n                  _context7.prev = 39;\n                  _iterator12.f();\n                  return _context7.finish(39);\n                case 42:\n                  _context7.next = 51;\n                  break;\n                case 44:\n                  cells = [];\n                  childRows = [];\n                  (0, $1BfjW$react).Children.forEach(children, function (node) {\n                    if (node.type === $70d70eb16ea48428$var$Row) {\n                      if (cells.length < context.columns.length) throw new Error(\"All of a Row's child Cells must be positioned before any child Rows.\");\n                      childRows.push({\n                        type: \"item\",\n                        element: node\n                      });\n                    } else cells.push({\n                      type: \"cell\",\n                      element: node\n                    });\n                  });\n                  if (!(cells.length !== context.columns.length)) {\n                    _context7.next = 49;\n                    break;\n                  }\n                  throw new Error(\"Cell count must match column count. Found \".concat(cells.length, \" cells and \").concat(context.columns.length, \" columns.\"));\n                case 49:\n                  return _context7.delegateYield(cells, \"t2\", 50);\n                case 50:\n                  return _context7.delegateYield(childRows, \"t3\", 51);\n                case 51:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, childNodes, null, [[8, 18, 21, 24], [26, 36, 39, 42]]);\n          }),\n          shouldInvalidate: function shouldInvalidate(newContext) {\n            // Invalidate all rows if the columns changed.\n            return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n              return c.key !== context.columns[i].key;\n            }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;\n          }\n        };\n      case 3:\n      case \"end\":\n        return _context8.stop();\n    }\n  }, getCollectionNode);\n});\n/**\r\n * A Row represents a single item in a Table and contains Cell elements for each column.\r\n * Cells can be statically defined as children, or generated dynamically using a function\r\n * based on the columns defined in the TableHeader.\r\n */ // We don't want getCollectionNode to show up in the type definition\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n$941d1d9a6a28982a$var$Cell.getCollectionNode = /*#__PURE__*/_regeneratorRuntime().mark(function getCollectionNode(props) {\n  var children, textValue;\n  return _regeneratorRuntime().wrap(function getCollectionNode$(_context9) {\n    while (1) switch (_context9.prev = _context9.next) {\n      case 0:\n        children = props.children;\n        textValue = props.textValue || (typeof children === \"string\" ? children : \"\") || props[\"aria-label\"] || \"\";\n        _context9.next = 4;\n        return {\n          type: \"cell\",\n          props: props,\n          rendered: children,\n          textValue: textValue,\n          \"aria-label\": props[\"aria-label\"],\n          hasChildNodes: false\n        };\n      case 4:\n      case \"end\":\n        return _context9.stop();\n    }\n  }, getCollectionNode);\n});\n/**\r\n * A Cell represents the value of a single Column within a Table Row.\r\n */ // We don't want getCollectionNode to show up in the type definition\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\n\n/*\r\n * Copyright 2023 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n\nfunction $ee65a0057fd99531$export$34dfa8a1622185a4(props) {\n  var _props$selectionMode2 = props.selectionMode,\n    selectionMode = _props$selectionMode2 === void 0 ? \"none\" : _props$selectionMode2,\n    showSelectionCheckboxes = props.showSelectionCheckboxes,\n    showDragButtons = props.showDragButtons,\n    propExpandedKeys = props.UNSTABLE_expandedKeys,\n    propDefaultExpandedKeys = props.UNSTABLE_defaultExpandedKeys,\n    UNSTABLE_onExpandedChange = props.UNSTABLE_onExpandedChange,\n    children = props.children;\n  if (!(0, $1BfjW$tableNestedRows)()) throw new Error(\"Feature flag for table nested rows must be enabled to use useTreeGridState.\");\n  var _ref25 = (0, $1BfjW$useControlledState)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : undefined, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : new Set(), UNSTABLE_onExpandedChange),\n    _ref26 = _slicedToArray(_ref25, 2),\n    expandedKeys = _ref26[0],\n    setExpandedKeys = _ref26[1];\n  var context = (0, $1BfjW$useMemo)(function () {\n    return {\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  var builder = (0, $1BfjW$useMemo)(function () {\n    return new (0, $1BfjW$CollectionBuilder)();\n  }, []);\n  var nodes = (0, $1BfjW$useMemo)(function () {\n    return builder.build({\n      children: children\n    }, context);\n  }, [builder, children, context]);\n  var treeGridCollection = (0, $1BfjW$useMemo)(function () {\n    return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {\n      showSelectionCheckboxes: showSelectionCheckboxes,\n      showDragButtons: showDragButtons,\n      expandedKeys: expandedKeys\n    });\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n  var onToggle = function onToggle(key) {\n    setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));\n  };\n  var collection = (0, $1BfjW$useMemo)(function () {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n  var tableState = (0, $4a0dd036d492cee4$export$907bcc6c48325fd6)(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection\n  }));\n  return _objectSpread(_objectSpread({}, tableState), {}, {\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys: expandedKeys,\n    toggleKey: onToggle\n  });\n}\nfunction $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {\n  var updatedExpandedKeys;\n  if (currentExpandedKeys === \"all\") {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(function (row) {\n      return row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount;\n    }).map(function (row) {\n      return row.key;\n    }));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) updatedExpandedKeys.delete(key);else updatedExpandedKeys.add(key);\n  }\n  return updatedExpandedKeys;\n}\nfunction $ee65a0057fd99531$var$convertExpanded(expanded) {\n  if (!expanded) return new Set();\n  return expanded === \"all\" ? \"all\" : new Set(expanded);\n}\nfunction $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {\n  var _opts$expandedKeys = opts.expandedKeys,\n    expandedKeys = _opts$expandedKeys === void 0 ? new Set() : _opts$expandedKeys;\n  var body;\n  var flattenedRows = [];\n  var columnCount = 0;\n  var userColumnCount = 0;\n  var originalColumns = [];\n  var keyMap = new Map();\n  if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) columnCount++;\n  if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) columnCount++;\n  var topLevelRows = [];\n  var visit = function visit(node) {\n    switch (node.type) {\n      case \"body\":\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case \"column\":\n        if (!node.hasChildNodes) userColumnCount++;\n        break;\n      case \"item\":\n        topLevelRows.push(node);\n        return;\n    }\n    var _iterator13 = _createForOfIteratorHelper(node.childNodes),\n      _step13;\n    try {\n      for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n        var child = _step13.value;\n        visit(child);\n      }\n    } catch (err) {\n      _iterator13.e(err);\n    } finally {\n      _iterator13.f();\n    }\n  };\n  var _iterator14 = _createForOfIteratorHelper(nodes),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var node = _step14.value;\n      if (node.type === \"column\") originalColumns.push(node);\n      visit(node);\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  columnCount += userColumnCount;\n  // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n  var globalRowCount = 0;\n  var visitNode = function visitNode(node, i) {\n    // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n    // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n    // values automatically calculated via CollectionBuilder\n    if (node.type === \"item\") {\n      var _childNodes = [];\n      var _iterator15 = _createForOfIteratorHelper(node.childNodes),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var child = _step15.value;\n          if (child.type === \"cell\") {\n            var cellClone = _objectSpread({}, child);\n            if (cellClone.index + 1 === columnCount) cellClone.nextKey = null;\n            _childNodes.push(_objectSpread({}, cellClone));\n          }\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        childNodes: _childNodes,\n        parentKey: body.key,\n        level: 1,\n        index: globalRowCount++\n      });\n      flattenedRows.push(clone);\n    }\n    var newProps = {};\n    // Assign indexOfType to cells and rows for aria-posinset\n    if (node.type !== \"placeholder\" && node.type !== \"column\") newProps[\"indexOfType\"] = i;\n    // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n    // via .childNodes returns the same object as the one found via keyMap look up\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n    var lastNode;\n    var rowIndex = 0;\n    var _iterator16 = _createForOfIteratorHelper(node.childNodes),\n      _step16;\n    try {\n      for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n        var _child = _step16.value;\n        if (!(_child.type === \"item\" && expandedKeys !== \"all\" && !expandedKeys.has(node.key))) {\n          if (_child.parentKey == null)\n            // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n            _child.parentKey = node.key;\n          if (lastNode) {\n            lastNode.nextKey = _child.key;\n            _child.prevKey = lastNode.key;\n          } else _child.prevKey = null;\n          if (_child.type === \"item\") visitNode(_child, rowIndex++);else\n            // We enforce that the cells come before rows so can just reuse cell index\n            visitNode(_child, _child.index);\n          lastNode = _child;\n        }\n      }\n    } catch (err) {\n      _iterator16.e(err);\n    } finally {\n      _iterator16.f();\n    }\n    if (lastNode) lastNode.nextKey = null;\n  };\n  var last;\n  topLevelRows.forEach(function (node, i) {\n    visitNode(node, i);\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else node.prevKey = null;\n    last = node;\n  });\n  if (last) last.nextKey = null;\n  return {\n    keyMap: keyMap,\n    userColumnCount: userColumnCount,\n    flattenedRows: flattenedRows,\n    tableNodes: [].concat(originalColumns, [_objectSpread(_objectSpread({}, body), {}, {\n      childNodes: flattenedRows\n    })])\n  };\n}\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section, $788781baa30117fa$export$596e1b2e2cf93690 as TableCollection, $788781baa30117fa$export$7c127db850d4e81e as buildHeaderRows, $a9e7ae544a4e41dd$export$7ff77a162970b30e as TableColumnLayout, $ee65a0057fd99531$export$34dfa8a1622185a4 as UNSTABLE_useTreeGridState };","map":{"version":3,"names":["$6818b1c4fc67028d$export$1994a077b98ee0d5","width","isNaN","String","match","$6818b1c4fc67028d$export$9078bad4c3934604","console","warn","concat","parseFloat","$6818b1c4fc67028d$export$7bbad27896f7ae9f","tableWidth","Error","$6818b1c4fc67028d$export$59185c62a7544aa0","maxWidth","Number","MAX_SAFE_INTEGER","$6818b1c4fc67028d$export$f556054ce4358701","minWidth","$6818b1c4fc67028d$export$55d50dc687385491","availableWidth","columns","changedColumns","getDefaultWidth","getDefaultMinWidth","hasNonFrozenItems","flexItems","map","column","index","_column_width","_ref","_ref1","get","key","defaultWidth","frozen","baseSize","flex","targetMainSize","_column_minWidth","_ref2","min","max","hypotheticalMainSize","Math","violation","_loop","usedWidth","flexFactors","forEach","item","remainingFreeSpace","ratio","totalViolation","sign","$6818b1c4fc67028d$var$cascadeRounding","fpTotal","intTotal","roundedArray","float","integer","round","push","$a9e7ae544a4e41dd$export$7ff77a162970b30e","options","_classCallCheck","columnWidths","Map","columnMinWidths","columnMaxWidths","_options_getDefaultWidth","_options_getDefaultMinWidth","_createClass","value","splitColumnsIntoControlledAndUncontrolled","reduce","acc","col","props","set","recombineColumns","uncontrolledWidths","uncontrolledColumns","controlledColumns","has","getInitialUncontrolledWidths","_this2","Array","from","_ref3","_ref4","_slicedToArray","_this_getDefaultWidth","_this","_col_props_defaultWidth","call","getColumnWidth","_this_columnWidths_get","getColumnMinWidth","_this_columnMinWidths_get","getColumnMaxWidth","_this_columnMaxWidths_get","resizeColumnWidth","collection","controlledWidths","_this3","arguments","length","undefined","prevColumnWidths","resizeIndex","Infinity","resizingChanged","_toConsumableArray","percentKeys","frKeysToTheRight","minWidths","i","_column_props_width_endsWith","_column_props_width","frKey","frValue","endsWith","floor","_objectSpread","newWidths","_ref5","_ref6","_ref7","_ref8","buildColumnWidths","widths","_this4","_column_props_minWidth","$292bc4e09cd0eb62$export$cb895dcf85db1319","state","_props$tableWidth","_ref9","$1BfjW$useState","_ref10","resizingColumn","setResizingColumn","columnLayout","$1BfjW$useMemo","_ref11","_ref12","_ref13","_ref14","setUncontrolledWidths","_ref15","_ref16","lastColumns","setLastColumns","some","c","newUncontrolledWidths","colWidths","startResize","$1BfjW$useCallback","updateResizedColumns","newControlled","_ref17","_ref18","entry","newSizes","_ref19","_ref20","endResize","tableState","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","random","toString","slice","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG","$788781baa30117fa$export$7c127db850d4e81e","keyMap","columnNodes","seen","_iterator","_createForOfIteratorHelper","_step","s","n","done","parentKey","parent","colspan","_seen$get","splice","err","e","f","maxLength","apply","headerRows","fill","colIndex","_i","_columns","_iterator2","_step2","row","rowLength","p","placeholder","type","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","_iterator3","_step3","$788781baa30117fa$export$596e1b2e2cf93690","_ref21","_Symbol$iterator","_inherits","_super","_createSuper","nodes","prev","opts","_this5","rowHeaderColumnKeys","Set","body","showSelectionCheckboxes","rowHeaderColumn","showDragButtons","isSelectionCell","unshift","isDragButtonCell","rows","columnKeyMap","visit","node","isRowHeader","add","_iterator4","_step4","child","_iterator5","_step5","columnCount","items","visitNode","_size","size","_regeneratorRuntime","mark","wrap","value$","_context","next","delegateYield","stop","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","_getFirstItem","$1BfjW$getFirstItem","getLastKey","_getLastItem","$1BfjW$getLastItem","getItem","at","idx","getTextValue","text","_iterator6","_step6","cell","join","$1BfjW$GridCollection","Symbol","iterator","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","_ref22","_ref23","isKeyboardNavigationDisabled","setKeyboardNavigationDisabled","_props$selectionMode","selectionMode","context","children","$1BfjW$useCollection","_ref24","$1BfjW$useGridState","disabledBehavior","disabledKeys","selectionManager","sortDescriptor","sort","columnKey","direction","_props_sortDescriptor","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","_iterator7","_step7","_columns2","getCollectionNode$","_context2","renderer","t0","finish","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","_context4","_iterator8","_step8","_items","childNodes$","_context3","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","title","childColumns","fullNodes","updateContext","_context6","count","_iterator9","_step9","_childColumns","_context5","shouldInvalidate","newContext","sent","_iterator10","_step10","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","UNSTABLE_childItems","_context8","_iterator11","_step11","_iterator12","_step12","cells","childRows","_context7","t1","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","_context9","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea","$ee65a0057fd99531$export$34dfa8a1622185a4","_props$selectionMode2","propExpandedKeys","UNSTABLE_expandedKeys","propDefaultExpandedKeys","UNSTABLE_defaultExpandedKeys","UNSTABLE_onExpandedChange","$1BfjW$tableNestedRows","_ref25","$1BfjW$useControlledState","$ee65a0057fd99531$var$convertExpanded","_ref26","expandedKeys","setExpandedKeys","builder","$1BfjW$CollectionBuilder","build","treeGridCollection","$ee65a0057fd99531$var$generateTreeGridCollection","onToggle","$ee65a0057fd99531$var$toggleKey","tableNodes","userColumnCount","toggleKey","currentExpandedKeys","updatedExpandedKeys","flattenedRows","filter","delete","expanded","_opts$expandedKeys","originalColumns","topLevelRows","_iterator13","_step13","_iterator14","_step14","globalRowCount","_iterator15","_step15","cellClone","clone","newProps","Object","assign","lastNode","rowIndex","_iterator16","_step16","last"],"sources":["C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\index.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableColumnResizeState.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableColumnLayout.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableUtils.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableState.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableCollection.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableHeader.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableBody.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Column.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Row.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Cell.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTreeGridState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {TableColumnResizeState, TableColumnResizeStateProps} from './useTableColumnResizeState';\nexport type {TableState, CollectionBuilderContext, TableStateProps} from './useTableState';\nexport type {TableHeaderProps, TableBodyProps, ColumnProps, RowProps, CellProps} from '@react-types/table';\nexport type {TreeGridState, TreeGridStateProps} from './useTreeGridState';\n\nexport {useTableColumnResizeState} from './useTableColumnResizeState';\nexport {useTableState} from './useTableState';\nexport {TableHeader} from './TableHeader';\nexport {TableBody} from './TableBody';\nexport {Column} from './Column';\nexport {Row} from './Row';\nexport {Cell} from './Cell';\nexport {Section} from '@react-stately/collections';\nexport {TableCollection, buildHeaderRows} from './TableCollection';\nexport {TableColumnLayout} from './TableColumnLayout';\nexport {UNSTABLE_useTreeGridState} from './useTreeGridState';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnSize} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\nimport {TableColumnLayout} from './TableColumnLayout';\nimport {TableState} from './useTableState';\nimport {useCallback, useMemo, useState} from 'react';\n\nexport interface TableColumnResizeStateProps<T> {\n  /**\n   * Current width of the table or table viewport that the columns\n   * should be calculated against.\n   */\n  tableWidth: number,\n  /** A function that is called to find the default width for a given column. */\n  getDefaultWidth?: (node: GridNode<T>) => ColumnSize | null | undefined,\n  /** A function that is called to find the default minWidth for a given column. */\n  getDefaultMinWidth?: (node: GridNode<T>) => ColumnSize | null | undefined\n}\nexport interface TableColumnResizeState<T> {\n  /**\n   * Called to update the state that a resize event has occurred.\n   * Returns the new widths for all columns based on the resized column.\n   */\n  updateResizedColumns: (key: Key, width: number) => Map<Key, ColumnSize>,\n  /** Callback for when onColumnResize has started. */\n  startResize: (key: Key) => void,\n  /** Callback for when onColumnResize has ended. */\n  endResize: () => void,\n  /** Gets the current width for the specified column. */\n  getColumnWidth: (key: Key) => number,\n  /** Gets the current minWidth for the specified column. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Gets the current maxWidth for the specified column. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of the currently resizing column. */\n  resizingColumn: Key | null,\n  /** A reference to the table state. */\n  tableState: TableState<T>\n}\n\n/**\n * Provides column width state management for a table component with column resizing support. Handles building\n * a map of column widths calculated from the table's width and any provided column width information from the collection.\n * In addition, it tracks the currently resizing column and provides callbacks for updating the widths upon resize operations.\n * @param props - Props for the table.\n * @param state - State for the table, as returned by `useTableState`.\n */\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps<T>, state: TableState<T>): TableColumnResizeState<T> {\n  let {\n    getDefaultWidth,\n    getDefaultMinWidth,\n    tableWidth = 0\n  } = props;\n\n  let [resizingColumn, setResizingColumn] = useState<Key | null>(null);\n  let columnLayout = useMemo(\n    () => new TableColumnLayout({\n      getDefaultWidth,\n      getDefaultMinWidth\n    }),\n    [getDefaultWidth, getDefaultMinWidth]\n  );\n\n  let [controlledColumns, uncontrolledColumns] = useMemo(() =>\n      columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns)\n  , [state.collection.columns, columnLayout]);\n\n  // uncontrolled column widths\n  let [uncontrolledWidths, setUncontrolledWidths] = useState(() =>\n    columnLayout.getInitialUncontrolledWidths(uncontrolledColumns)\n  );\n\n  // Update uncontrolled widths if the columns changed.\n  let [lastColumns, setLastColumns] = useState(state.collection.columns);\n  if (state.collection.columns !== lastColumns) {\n    if (\n      state.collection.columns.length !== lastColumns.length ||\n      state.collection.columns.some((c, i) => c.key !== lastColumns[i].key)\n    ) {\n      let newUncontrolledWidths = columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n      setUncontrolledWidths(newUncontrolledWidths);\n    }\n    setLastColumns(state.collection.columns);\n  }\n\n  // combine columns back into one map that maintains same order as the columns\n  let colWidths = useMemo(() =>\n      columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns)\n  , [state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns, columnLayout]);\n\n  let startResize = useCallback((key: Key) => {\n    setResizingColumn(key);\n  }, [setResizingColumn]);\n\n  let updateResizedColumns = useCallback((key: Key, width: number): Map<Key, ColumnSize> => {\n    let newControlled = new Map(Array.from(controlledColumns).map(([key, entry]) => [key, entry.props.width]));\n    let newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);\n\n    let map = new Map(Array.from(uncontrolledColumns).map(([key]) => [key, newSizes.get(key)]));\n    map.set(key, width);\n    setUncontrolledWidths(map);\n    return newSizes;\n  }, [controlledColumns, uncontrolledColumns, setUncontrolledWidths, tableWidth, columnLayout, state.collection, uncontrolledWidths]);\n\n  let endResize = useCallback(() => {\n    setResizingColumn(null);\n  }, [setResizingColumn]);\n\n  useMemo(() =>\n    columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths)\n  , [tableWidth, state.collection, colWidths, columnLayout]);\n\n  return useMemo(() => ({\n    resizingColumn,\n    updateResizedColumns,\n    startResize,\n    endResize,\n    getColumnWidth: (key: Key) =>\n      columnLayout.getColumnWidth(key),\n    getColumnMinWidth: (key: Key) =>\n      columnLayout.getColumnMinWidth(key),\n    getColumnMaxWidth: (key: Key) =>\n      columnLayout.getColumnMaxWidth(key),\n    tableState: state\n  }), [\n    columnLayout,\n    resizingColumn,\n    updateResizedColumns,\n    startResize,\n    endResize,\n    state\n  ]);\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  calculateColumnSizes,\n  getMaxWidth,\n  getMinWidth,\n  isStatic,\n  parseFractionalUnit\n} from './TableUtils';\nimport {ColumnSize, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\n\nexport interface TableColumnLayoutOptions<T> {\n  getDefaultWidth?: (column: GridNode<T>) => ColumnSize | null | undefined,\n  getDefaultMinWidth?: (column: GridNode<T>) => ColumnSize | null | undefined\n}\n\nexport class TableColumnLayout<T> {\n  getDefaultWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  getDefaultMinWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  columnWidths: Map<Key, number> = new Map();\n  columnMinWidths: Map<Key, number> = new Map();\n  columnMaxWidths: Map<Key, number> = new Map();\n\n  constructor(options: TableColumnLayoutOptions<T>) {\n    this.getDefaultWidth = options?.getDefaultWidth ?? (() => '1fr');\n    this.getDefaultMinWidth = options?.getDefaultMinWidth ?? (() => 75);\n  }\n\n  /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */\n  splitColumnsIntoControlledAndUncontrolled(columns: Array<GridNode<T>>): [Map<Key, GridNode<T>>, Map<Key, GridNode<T>>] {\n    return columns.reduce((acc, col) => {\n      if (col.props.width != null) {\n        acc[0].set(col.key, col);\n      } else {\n        acc[1].set(col.key, col);\n      }\n      return acc;\n    }, [new Map(), new Map()]);\n  }\n\n  /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  recombineColumns(columns: Array<GridNode<T>>, uncontrolledWidths: Map<Key, ColumnSize>, uncontrolledColumns: Map<Key, GridNode<T>>, controlledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(columns.map(col => {\n      if (uncontrolledColumns.has(col.key)) {\n        return [col.key, uncontrolledWidths.get(col.key)];\n      } else {\n        return [col.key, controlledColumns.get(col.key).props.width];\n      }\n    }));\n  }\n\n  /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  getInitialUncontrolledWidths(uncontrolledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(Array.from(uncontrolledColumns).map(([key, col]) =>\n      [key, col.props.defaultWidth ?? this.getDefaultWidth?.(col) ?? '1fr']\n    ));\n  }\n\n  getColumnWidth(key: Key): number {\n    return this.columnWidths.get(key) ?? 0;\n  }\n\n  getColumnMinWidth(key: Key): number {\n    return this.columnMinWidths.get(key) ?? 0;\n  }\n\n  getColumnMaxWidth(key: Key): number {\n    return this.columnMaxWidths.get(key) ?? 0;\n  }\n\n  resizeColumnWidth(tableWidth: number, collection: TableCollection<T>, controlledWidths: Map<Key, ColumnSize>, uncontrolledWidths: Map<Key, ColumnSize>, col = null, width: number): Map<Key, ColumnSize> {\n    let prevColumnWidths = this.columnWidths;\n    // resizing a column\n    let resizeIndex = Infinity;\n    let resizingChanged = new Map<Key, ColumnSize>([...controlledWidths, ...uncontrolledWidths]);\n    let percentKeys = new Map();\n    let frKeysToTheRight = new Map();\n    let minWidths = new Map();\n    // freeze columns to the left to their previous pixel value\n    collection.columns.forEach((column, i) => {\n      let frKey;\n      let frValue;\n      minWidths.set(column.key, this.getDefaultMinWidth(collection.columns[i]));\n      if (col !== column.key && !column.props.width && !isStatic(uncontrolledWidths.get(column.key))) {\n        // uncontrolled don't have props.width for us, so instead get from our state\n        frKey = column.key;\n        frValue = parseFractionalUnit(uncontrolledWidths.get(column.key) as string);\n      } else if (col !== column.key && !isStatic(column.props.width) && !uncontrolledWidths.get(column.key)) {\n        // controlledWidths will be the same in the collection\n        frKey = column.key;\n        frValue = parseFractionalUnit(column.props.width);\n      } else if (col !== column.key && column.props.width?.endsWith?.('%')) {\n        percentKeys.set(column.key, column.props.width);\n      }\n      // don't freeze columns to the right of the resizing one\n      if (resizeIndex < i) {\n        if (frKey) {\n          frKeysToTheRight.set(frKey, frValue);\n        }\n        return;\n      }\n      // we already know the new size of the resizing column\n      if (column.key === col) {\n        resizeIndex = i;\n        resizingChanged.set(column.key, Math.floor(width));\n        return;\n      }\n      // freeze column to previous value\n      resizingChanged.set(column.key, prevColumnWidths.get(column.key));\n    });\n\n    // predict pixels sizes for all columns based on resize\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      resizingChanged,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // set all new column widths for onResize event\n    // columns going in will be the same order as the columns coming out\n    let newWidths = new Map<Key, ColumnSize>();\n    // set all column widths based on calculateColumnSize\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      newWidths.set(key, width);\n    });\n\n    // add FR's back as they were to columns to the right\n    Array.from(frKeysToTheRight).forEach(([key]) => {\n      newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);\n    });\n\n    // put back in percents\n    Array.from(percentKeys).forEach(([key, width]) => {\n      // resizing locks a column to a px width\n      if (key === col) {\n        return;\n      }\n      newWidths.set(key, width);\n    });\n    return newWidths;\n  }\n\n  buildColumnWidths(tableWidth: number, collection: TableCollection<T>, widths: Map<Key, ColumnSize>) {\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n\n    // initial layout or table/window resizing\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      widths,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // columns going in will be the same order as the columns coming out\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      let column = collection.columns[index];\n      this.columnWidths.set(key, width);\n      this.columnMinWidths.set(key, getMinWidth(column.props.minWidth ?? this.getDefaultMinWidth(column), tableWidth));\n      this.columnMaxWidths.set(key, getMaxWidth(column.props.maxWidth, tableWidth));\n    });\n    return this.columnWidths;\n  }\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnSize} from '@react-types/table';\nimport {Key} from '@react-types/shared';\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nexport function parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  }\n  let match = width.match(/^(.+)(?=fr$)/);\n  // if width is the incorrect format, just default it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`,\n      'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseFloat(match[0]);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseFloat(match[0]) / 100);\n  }\n  return width;\n}\n\n\nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n    ? parseStaticWidth(maxWidth, tableWidth)\n    : Number.MAX_SAFE_INTEGER;\n}\n\n// cannot support FR units, we'd need to know everything else in the table to do that\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n    ? parseStaticWidth(minWidth, tableWidth)\n    : 0;\n}\n\n\nexport interface IColumn {\n  minWidth?: number | string,\n  maxWidth?: number | string,\n  width?: number | string,\n  defaultWidth?: number | string,\n  key?: Key\n}\n\n/**\n * Implements the flex algorithm described in https://www.w3.org/TR/css-flexbox-1/#layout-algorithm\n * It makes a few constraint/assumptions:\n * 1. All basis values are 0 unless it is a static width, then the basis is the static width\n * 2. All flex grow and shrink values are equal to the FR specified on the column, grow and shrink for the same column are equal\n * 3. We only have one row\n * An example of the setup can be seen here https://jsfiddle.net/snowystinger/wv0ymjaf/61/ where I let the browser figure out the\n * flex of the columns.\n * Note: We differ in one key aspect, all of our column widths must be whole numbers, so we avoid browser\n * sub pixel rounding errors. To do this, we use a cascading rounding algorithm to ensure that the sum of the widths is maintained\n * while distributing the rounding remainder across the columns.\n *\n * As noted in the chrome source code, this algorithm is very accurate, but has the potential to be quadratic.\n * They have deemed this to be acceptable because the number of elements is usually small and the flex factors\n * are usually not high variance. I believe we can make the same assumptions. Particularly once resizing is\n * started, it will convert all columns to the left to static widths, so it will cut down on the number of FR columns.\n *\n * There are likely faster ways to do this, I've chosen to stick to the spec as closely as possible for readability, accuracy, and for the\n * note that this behaving quadratically is unlikely to be a problem.\n * @param availableWidth - The visible width of the table.\n * @param columns - The table defined columns.\n * @param changedColumns - Any columns we want to override, for example, during resizing.\n * @param getDefaultWidth - A function that returns the default width of a column by its index.\n * @param getDefaultMinWidth - A function that returns the default min width of a column by its index.\n */\nexport function calculateColumnSizes(availableWidth: number, columns: IColumn[], changedColumns: Map<Key, ColumnSize>, getDefaultWidth, getDefaultMinWidth) {\n  let hasNonFrozenItems = false;\n  let flexItems = columns.map((column, index) => {\n    let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : column.width ?? column.defaultWidth ?? getDefaultWidth?.(index) ?? '1fr';\n    let frozen = false;\n    let baseSize = 0;\n    let flex = 0;\n    let targetMainSize = null;\n    if (isStatic(width)) {\n      baseSize = parseStaticWidth(width, availableWidth);\n      frozen = true;\n    } else {\n      flex = parseFractionalUnit(width);\n      if (flex <= 0) {\n        frozen = true;\n      }\n    }\n\n    let min = getMinWidth(column.minWidth ?? getDefaultMinWidth?.(index) ?? 0, availableWidth);\n    let max = getMaxWidth(column.maxWidth, availableWidth);\n    let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n\n    // 9.7.1\n    // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.\n    // 9.7.2\n    if (frozen) {\n      targetMainSize = hypotheticalMainSize;\n    } else if (baseSize > hypotheticalMainSize) {\n      frozen = true;\n      targetMainSize = hypotheticalMainSize;\n    }\n\n    // 9.7.3\n    if (!frozen) {\n      hasNonFrozenItems = true;\n    }\n    return {\n      frozen,\n      baseSize,\n      hypotheticalMainSize,\n      min,\n      max,\n      flex,\n      targetMainSize,\n      violation: 0\n    };\n  });\n\n  // 9.7.4\n  // 9.7.4.a\n  while (hasNonFrozenItems) {\n    // 9.7.4.b\n    /**\n     * Calculate the remaining free space as for initial free space,\n     * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is\n     * less than one, multiply the initial free space by this sum (of flex factors).\n     * If the magnitude of this value is less than the magnitude of\n     * the remaining free space, use this as the remaining free space.\n     */\n    let usedWidth = 0;\n    let flexFactors = 0;\n    flexItems.forEach(item => {\n      if (item.frozen) {\n        usedWidth += item.targetMainSize;\n      } else {\n        usedWidth += item.baseSize;\n        flexFactors += item.flex;\n      }\n    });\n\n    let remainingFreeSpace = availableWidth - usedWidth;\n    // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0\n    // so no need to check for flexFactors < 1\n    // 9.7.4.c\n    /**\n     * If the remaining free space is zero\n     * - Do nothing.\n     * Else // remember, we're always in grow mode\n     * - Find the ratio of the item’s flex grow factor to the\n     * sum of the flex grow factors of all unfrozen items on\n     * the line. Set the item’s target main size to its flex\n     * base size plus a fraction of the remaining free space\n     * proportional to the ratio.\n     */\n    if (remainingFreeSpace > 0) {\n      flexItems.forEach((item) => {\n        if (!item.frozen) {\n          let ratio = item.flex / flexFactors;\n          item.targetMainSize = item.baseSize + (ratio * remainingFreeSpace);\n        }\n      });\n    }\n\n    // 9.7.4.d\n    /**\n     * Fix min/max violations. Clamp each non-frozen item’s\n     * target main size by its used min and max main sizes\n     * and floor its content-box size at zero. If the item’s\n     * target main size was made smaller by this, it’s a max\n     * violation. If the item’s target main size was made\n     * larger by this, it’s a min violation.\n     */\n    let totalViolation = 0;\n    flexItems.forEach(item => {\n      item.violation = 0;\n      if (!item.frozen) {\n        let {min, max, targetMainSize} = item;\n        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n\n        item.violation = item.targetMainSize - targetMainSize;\n        totalViolation += item.violation;\n      }\n    });\n\n    // 9.7.4.e\n    /**\n     * Freeze over-flexed items. The total violation is the\n     * sum of the adjustments from the previous step\n     * ∑(clamped size - unclamped size). If the total violation is:\n     * Zero\n     * - Freeze all items.\n     *\n     * Positive\n     * - Freeze all the items with min violations.\n     *\n     * Negative\n     * - Freeze all the items with max violations.\n     */\n    hasNonFrozenItems = false;\n    flexItems.forEach(item => {\n      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) {\n        item.frozen = true;\n      } else if (!item.frozen) {\n        hasNonFrozenItems = true;\n      }\n    });\n  }\n\n  return cascadeRounding(flexItems);\n}\n\nfunction cascadeRounding(flexItems): number[] {\n  /*\n  Given an array of floats that sum to an integer, this rounds the floats\n  and returns an array of integers with the same sum.\n  */\n\n  let fpTotal = 0;\n  let intTotal = 0;\n  let roundedArray = [];\n  flexItems.forEach(function (item) {\n    let float = item.targetMainSize;\n    let integer = Math.round(float + fpTotal) - intTotal;\n    fpTotal += float;\n    intTotal += integer;\n    roundedArray.push(integer);\n  });\n\n  return roundedArray;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection, TableBodyProps, TableHeaderProps} from '@react-types/table';\nimport {Key, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {ReactElement, useCallback, useMemo, useState} from 'react';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  showDragButtons: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends MultipleSelectionStateProps, Sortable {\n  /** The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows. */\n  children?: [ReactElement<TableHeaderProps<T>>, ReactElement<TableBodyProps<T>>],\n  /** A list of row keys to disable. */\n  disabledKeys?: Iterable<Key>,\n  /** A pre-constructed collection to use instead of building one from items and children. */\n  collection?: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean,\n  /** Whether the row drag button should be displayed.\n   * @private\n   */\n  showDragButtons?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none', showSelectionCheckboxes, showDragButtons} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n    showDragButtons: showDragButtons,\n    selectionMode,\n    columns: []\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [props.children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n\n  let collection = useCollection<T, ITableCollection<T>>(\n    props,\n    useCallback((nodes) => new TableCollection(nodes, null, context), [context]),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({\n    ...props,\n    collection,\n    disabledBehavior: props.disabledBehavior || 'selection'\n  });\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getFirstItem, getLastItem} from '@react-stately/collections';\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key} from '@react-types/shared';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean,\n  showDragButtons?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\nlet ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);\nwhile (ROW_HEADER_COLUMN_KEY === ROW_HEADER_COLUMN_KEY_DRAG) {\n  ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);\n}\n\n/** @private */\nexport function buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  if (columnNodes.length === 0) {\n    return [];\n  }\n\n  let columns: GridNode<T>[][] = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n      if (!parent) {\n        break;\n      }\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          // eslint-disable-next-line max-depth\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          // eslint-disable-next-line max-depth\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> implements ITableCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n  _size: number = 0;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: ITableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns: GridNode<T>[] = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: opts?.showDragButtons ? 1 : 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    // Add cell for drag buttons if needed.\n    if (opts?.showDragButtons) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY_DRAG,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isDragButtonCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n    this._size = [...body.childNodes].length;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      if (opts?.showSelectionCheckboxes) {\n        if (opts?.showDragButtons) {\n          this.rowHeaderColumnKeys.add(this.columns[2].key);\n        } else {\n          this.rowHeaderColumnKeys.add(this.columns[1].key);\n        }\n      } else {\n        this.rowHeaderColumnKeys.add(this.columns[0].key);\n      }\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return getFirstItem(this.body.childNodes)?.key;\n  }\n\n  getLastKey() {\n    return getLastItem(this.body.childNodes)?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  getTextValue(key: Key): string {\n    let row = this.getItem(key);\n    if (!row) {\n      return '';\n    }\n\n    // If the row has a textValue, use that.\n    if (row.textValue) {\n      return row.textValue;\n    }\n\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    if (rowHeaderColumnKeys) {\n      let text = [];\n      for (let cell of row.childNodes) {\n        let column = this.columns[cell.index];\n        if (rowHeaderColumnKeys.has(column.key) && cell.textValue) {\n          text.push(cell.textValue);\n        }\n\n        if (text.length === rowHeaderColumnKeys.size) {\n          break;\n        }\n      }\n\n      return text.join(' ');\n    }\n\n    return '';\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n\n  // Clear columns so they aren't double added in strict mode.\n  context.columns = [];\n\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row<T>(props: RowProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue, UNSTABLE_childItems} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showDragButtons) {\n        yield {\n          type: 'cell',\n          key: 'header-drag', // this is combined with the row key by CollectionBuilder\n          props: {\n            isDragButtonCell: true\n          }\n        };\n      }\n\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n\n        if (UNSTABLE_childItems) {\n          for (let child of UNSTABLE_childItems) {\n            // Note: in order to reuse the render function of TableBody for our child rows, we just need to yield a type and a value here. CollectionBuilder will then look up\n            // the parent renderer and use that to build the full node of this child row, using the value provided here to generate the cells\n            yield {\n              type: 'item',\n              value: child\n            };\n          }\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        let childRows: PartialNode<T>[] = [];\n        React.Children.forEach(children, node => {\n          if (node.type === Row) {\n            if (cells.length < context.columns.length) {\n              throw new Error('All of a Row\\'s child Cells must be positioned before any child Rows.');\n            }\n\n            childRows.push({\n              type: 'item',\n              element: node\n            });\n          } else {\n            cells.push({\n              type: 'cell',\n              element: node\n            });\n          }\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.showDragButtons !== context.showDragButtons ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as <T>(props: RowProps<T>) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {JSX, ReactElement} from 'react';\nimport {PartialNode} from '@react-stately/collections';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilder} from '@react-stately/collections';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\nimport {ReactElement, useMemo} from 'react';\nimport {TableCollection} from './TableCollection';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableState, TableStateProps, useTableState} from './useTableState';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeGridState<T> extends TableState<T> {\n  /** A set of keys for items that are expanded. */\n  expandedKeys: 'all' | Set<Key>,\n  /** Toggles the expanded state for a row by its key. */\n  toggleKey(key: Key): void,\n  /** The key map containing nodes representing the collection's tree grid structure. */\n  keyMap: Map<Key, GridNode<T>>,\n  /** The number of leaf columns provided by the user. */\n  userColumnCount: number\n}\n\nexport interface TreeGridStateProps<T> extends Omit<TableStateProps<T>, 'collection'> {\n  /** The currently expanded keys in the collection (controlled). */\n  UNSTABLE_expandedKeys?: 'all' | Iterable<Key>,\n  /** The initial expanded keys in the collection (uncontrolled). */\n  UNSTABLE_defaultExpandedKeys?: 'all' | Iterable<Key>,\n  /** Handler that is called when items are expanded or collapsed. */\n  UNSTABLE_onExpandedChange?: (keys: Set<Key>) => any\n}\n\n/**\n * Provides state management for a tree grid component. Handles building a collection\n * of columns and rows from props. In addition, it tracks and manages expanded rows, row selection, and sort order changes.\n */\nexport function UNSTABLE_useTreeGridState<T extends object>(props: TreeGridStateProps<T>): TreeGridState<T> {\n  let {\n    selectionMode = 'none',\n    showSelectionCheckboxes,\n    showDragButtons,\n    UNSTABLE_expandedKeys: propExpandedKeys,\n    UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys,\n    UNSTABLE_onExpandedChange,\n    children\n  } = props;\n\n  if (!tableNestedRows()) {\n    throw new Error('Feature flag for table nested rows must be enabled to use useTreeGridState.');\n  }\n\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    propExpandedKeys ? convertExpanded(propExpandedKeys) : undefined,\n    propDefaultExpandedKeys ? convertExpanded(propDefaultExpandedKeys) : new Set(),\n    UNSTABLE_onExpandedChange\n  );\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n    showDragButtons: showDragButtons,\n    selectionMode,\n    columns: []\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n\n  let builder = useMemo(() => new CollectionBuilder<T>(), []);\n  let nodes = useMemo(() => builder.build({children: children as ReactElement[]}, context), [builder, children, context]);\n  let treeGridCollection = useMemo(() => {\n    return generateTreeGridCollection<T>(nodes, {showSelectionCheckboxes, showDragButtons, expandedKeys});\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key, treeGridCollection));\n  };\n\n  let collection = useMemo(() => {\n    return new TableCollection(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n\n  let tableState = useTableState({...props, collection});\n  return {\n    ...tableState,\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys,\n    toggleKey: onToggle\n  };\n}\n\nfunction toggleKey<T>(currentExpandedKeys: 'all' | Set<Key>, key: Key, collection: TreeGridCollection<T>): Set<Key> {\n  let updatedExpandedKeys: Set<Key>;\n  if (currentExpandedKeys === 'all') {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(row => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map(row => row.key));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) {\n      updatedExpandedKeys.delete(key);\n    } else {\n      updatedExpandedKeys.add(key);\n    }\n  }\n\n  return updatedExpandedKeys;\n}\n\nfunction convertExpanded(expanded: 'all' | Iterable<Key>): 'all' | Set<Key> {\n  if (!expanded) {\n    return new Set<Key>();\n  }\n\n  return expanded === 'all'\n    ? 'all'\n    : new Set(expanded);\n}\n\ninterface TreeGridCollectionOptions {\n  showSelectionCheckboxes?: boolean,\n  showDragButtons?: boolean,\n  expandedKeys: 'all' | Set<Key>\n}\n\ninterface TreeGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>>,\n  tableNodes: GridNode<T>[],\n  flattenedRows: GridNode<T>[],\n  userColumnCount: number\n}\nfunction generateTreeGridCollection<T>(nodes, opts: TreeGridCollectionOptions): TreeGridCollection<T> {\n  let {\n    expandedKeys = new Set()\n  } = opts;\n\n  let body: GridNode<T>;\n  let flattenedRows = [];\n  let columnCount = 0;\n  let userColumnCount = 0;\n  let originalColumns = [];\n  let keyMap = new Map();\n\n  if (opts?.showSelectionCheckboxes) {\n    columnCount++;\n  }\n\n  if (opts?.showDragButtons) {\n    columnCount++;\n  }\n\n  let topLevelRows = [];\n  let visit = (node: GridNode<T>) => {\n    switch (node.type) {\n      case 'body':\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case 'column':\n        if (!node.hasChildNodes) {\n          userColumnCount++;\n        }\n        break;\n      case 'item':\n        topLevelRows.push(node);\n        return;\n    }\n\n    for (let child of node.childNodes) {\n      visit(child);\n    }\n  };\n\n  for (let node of nodes) {\n    if (node.type === 'column') {\n      originalColumns.push(node);\n    }\n    visit(node);\n  }\n  columnCount += userColumnCount;\n\n  // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n  let globalRowCount = 0;\n  let visitNode = (node: GridNode<T>, i?: number) => {\n    // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n    // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n    // values automatically calculated via CollectionBuilder\n    if (node.type === 'item') {\n      let childNodes = [];\n      for (let child of node.childNodes) {\n        if (child.type === 'cell') {\n          let cellClone = {...child};\n          if (cellClone.index + 1 === columnCount) {\n            cellClone.nextKey = null;\n          }\n          childNodes.push({...cellClone});\n        }\n      }\n      let clone = {...node, childNodes: childNodes, parentKey: body.key, level: 1, index: globalRowCount++};\n      flattenedRows.push(clone);\n    }\n\n    let newProps = {};\n\n    // Assign indexOfType to cells and rows for aria-posinset\n    if (node.type !== 'placeholder' && node.type !== 'column') {\n      newProps['indexOfType'] = i;\n    }\n\n    // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n    // via .childNodes returns the same object as the one found via keyMap look up\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n\n    let lastNode: GridNode<T>;\n    let rowIndex = 0;\n    for (let child of node.childNodes) {\n      if (!(child.type === 'item' && expandedKeys !== 'all' && !expandedKeys.has(node.key))) {\n        if (child.parentKey == null) {\n          // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n\n        if (lastNode) {\n          lastNode.nextKey = child.key;\n          child.prevKey = lastNode.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        if (child.type === 'item') {\n          visitNode(child, rowIndex++);\n        } else {\n          // We enforce that the cells come before rows so can just reuse cell index\n          visitNode(child, child.index);\n        }\n\n        lastNode = child;\n      }\n    }\n\n    if (lastNode) {\n      lastNode.nextKey = null;\n    }\n  };\n\n  let last: GridNode<T>;\n  topLevelRows.forEach((node: GridNode<T>, i) => {\n    visitNode(node as GridNode<T>, i);\n\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else {\n      node.prevKey = null;\n    }\n\n    last = node;\n  });\n\n  if (last) {\n    last.nextKey = null;\n  }\n\n  return {\n    keyMap,\n    userColumnCount,\n    flattenedRows,\n    tableNodes: [...originalColumns, {...body, childNodes: flattenedRows}]\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}