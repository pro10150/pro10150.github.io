{"ast":null,"code":"import _defineProperty from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useGlobalListeners as $fA3fN$useGlobalListeners, clamp as $fA3fN$clamp, mergeProps as $fA3fN$mergeProps, focusWithoutScrolling as $fA3fN$focusWithoutScrolling, useFormReset as $fA3fN$useFormReset } from \"@react-aria/utils\";\nimport { useRef as $fA3fN$useRef, useCallback as $fA3fN$useCallback, useEffect as $fA3fN$useEffect } from \"react\";\nimport { useMove as $fA3fN$useMove, setInteractionModality as $fA3fN$setInteractionModality, useKeyboard as $fA3fN$useKeyboard } from \"@react-aria/interactions\";\nimport { useLabel as $fA3fN$useLabel } from \"@react-aria/label\";\nimport { useLocale as $fA3fN$useLocale } from \"@react-aria/i18n\";\nimport { useFocusable as $fA3fN$useFocusable } from \"@react-aria/focus\";\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ /*\r\n    * Copyright 2020 Adobe. All rights reserved.\r\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License. You may obtain a copy\r\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software distributed under\r\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n    * OF ANY KIND, either express or implied. See the License for the specific language\r\n    * governing permissions and limitations under the License.\r\n    */\nvar $aa519ee6cf463259$export$d6c8d9636a3dc49c = new WeakMap();\nfunction $aa519ee6cf463259$export$68e648cbec363a18(state, index) {\n  var data = $aa519ee6cf463259$export$d6c8d9636a3dc49c.get(state);\n  if (!data) throw new Error(\"Unknown slider state\");\n  return \"\".concat(data.id, \"-\").concat(index);\n}\nfunction $bcca50147b47f54d$export$56b2c08e277f365(props, state, trackRef) {\n  var _ref = (0, $fA3fN$useLabel)(props),\n    labelProps = _ref.labelProps,\n    fieldProps = _ref.fieldProps;\n  var isVertical = props.orientation === \"vertical\";\n  var _labelProps_id;\n  // Attach id of the label to the state so it can be accessed by useSliderThumb.\n  (0, $aa519ee6cf463259$export$d6c8d9636a3dc49c).set(state, {\n    id: (_labelProps_id = labelProps.id) !== null && _labelProps_id !== void 0 ? _labelProps_id : fieldProps.id,\n    \"aria-describedby\": props[\"aria-describedby\"],\n    \"aria-details\": props[\"aria-details\"]\n  });\n  var _ref2 = (0, $fA3fN$useLocale)(),\n    direction = _ref2.direction;\n  var _ref3 = (0, $fA3fN$useGlobalListeners)(),\n    addGlobalListener = _ref3.addGlobalListener,\n    removeGlobalListener = _ref3.removeGlobalListener;\n  // When the user clicks or drags the track, we want the motion to set and drag the\n  // closest thumb.  Hence we also need to install useMove() on the track element.\n  // Here, we keep track of which index is the \"closest\" to the drag start point.\n  // It is set onMouseDown/onTouchDown; see trackProps below.\n  var realTimeTrackDraggingIndex = (0, $fA3fN$useRef)(null);\n  var reverseX = direction === \"rtl\";\n  var currentPosition = (0, $fA3fN$useRef)(null);\n  var _ref4 = (0, $fA3fN$useMove)({\n      onMoveStart: function onMoveStart() {\n        currentPosition.current = null;\n      },\n      onMove: function onMove(_ref5) {\n        var deltaX = _ref5.deltaX,\n          deltaY = _ref5.deltaY;\n        var _trackRef$current$get = trackRef.current.getBoundingClientRect(),\n          height = _trackRef$current$get.height,\n          width = _trackRef$current$get.width;\n        var size = isVertical ? height : width;\n        if (currentPosition.current == null) currentPosition.current = state.getThumbPercent(realTimeTrackDraggingIndex.current) * size;\n        var delta = isVertical ? deltaY : deltaX;\n        if (isVertical || reverseX) delta = -delta;\n        currentPosition.current += delta;\n        if (realTimeTrackDraggingIndex.current != null && trackRef.current) {\n          var percent = (0, $fA3fN$clamp)(currentPosition.current / size, 0, 1);\n          state.setThumbPercent(realTimeTrackDraggingIndex.current, percent);\n        }\n      },\n      onMoveEnd: function onMoveEnd() {\n        if (realTimeTrackDraggingIndex.current != null) {\n          state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n          realTimeTrackDraggingIndex.current = null;\n        }\n      }\n    }),\n    moveProps = _ref4.moveProps;\n  var currentPointer = (0, $fA3fN$useRef)(undefined);\n  var onDownTrack = function onDownTrack(e, id, clientX, clientY) {\n    // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.\n    if (trackRef.current && !props.isDisabled && state.values.every(function (_, i) {\n      return !state.isThumbDragging(i);\n    })) {\n      var _trackRef$current$get2 = trackRef.current.getBoundingClientRect(),\n        height = _trackRef$current$get2.height,\n        width = _trackRef$current$get2.width,\n        top = _trackRef$current$get2.top,\n        left = _trackRef$current$get2.left;\n      var size = isVertical ? height : width;\n      // Find the closest thumb\n      var trackPosition = isVertical ? top : left;\n      var clickPosition = isVertical ? clientY : clientX;\n      var offset = clickPosition - trackPosition;\n      var percent = offset / size;\n      if (direction === \"rtl\" || isVertical) percent = 1 - percent;\n      var value = state.getPercentValue(percent);\n      // to find the closet thumb we split the array based on the first thumb position to the \"right/end\" of the click.\n      var closestThumb;\n      var split = state.values.findIndex(function (v) {\n        return value - v < 0;\n      });\n      if (split === 0) closestThumb = split;else if (split === -1) closestThumb = state.values.length - 1;else {\n        var lastLeft = state.values[split - 1];\n        var firstRight = state.values[split];\n        // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one\n        if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) closestThumb = split - 1;else closestThumb = split;\n      }\n      // Confirm that the found closest thumb is editable, not disabled, and move it\n      if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {\n        // Don't unfocus anything\n        e.preventDefault();\n        realTimeTrackDraggingIndex.current = closestThumb;\n        state.setFocusedThumb(closestThumb);\n        currentPointer.current = id;\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, true);\n        state.setThumbValue(closestThumb, value);\n        addGlobalListener(window, \"mouseup\", onUpTrack, false);\n        addGlobalListener(window, \"touchend\", onUpTrack, false);\n        addGlobalListener(window, \"pointerup\", onUpTrack, false);\n      } else realTimeTrackDraggingIndex.current = null;\n    }\n  };\n  var onUpTrack = function onUpTrack(e) {\n    var _e_changedTouches;\n    var _e_pointerId;\n    var id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;\n    if (id === currentPointer.current) {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n      removeGlobalListener(window, \"mouseup\", onUpTrack, false);\n      removeGlobalListener(window, \"touchend\", onUpTrack, false);\n      removeGlobalListener(window, \"pointerup\", onUpTrack, false);\n    }\n  };\n  if (\"htmlFor\" in labelProps && labelProps.htmlFor) {\n    // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS\n    // causes this to override the `aria-labelledby` on the thumb. This causes the first\n    // thumb to only be announced as the slider label rather than its individual name as well.\n    // See https://bugs.webkit.org/show_bug.cgi?id=172464.\n    delete labelProps.htmlFor;\n    labelProps.onClick = function () {\n      var\n      // Safari does not focus <input type=\"range\"> elements when clicking on an associated <label>,\n      // so do it manually. In addition, make sure we show the focus ring.\n      _document_getElementById;\n      (_document_getElementById = document.getElementById((0, $aa519ee6cf463259$export$68e648cbec363a18)(state, 0))) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.focus();\n      (0, $fA3fN$setInteractionModality)(\"keyboard\");\n    };\n  }\n  return {\n    labelProps: labelProps,\n    // The root element of the Slider will have role=\"group\" to group together\n    // all the thumb inputs in the Slider.  The label of the Slider will\n    // be used to label the group.\n    groupProps: _objectSpread({\n      role: \"group\"\n    }, fieldProps),\n    trackProps: (0, $fA3fN$mergeProps)({\n      onMouseDown: function onMouseDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;\n        onDownTrack(e, undefined, e.clientX, e.clientY);\n      },\n      onPointerDown: function onPointerDown(e) {\n        if (e.pointerType === \"mouse\" && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;\n        onDownTrack(e, e.pointerId, e.clientX, e.clientY);\n      },\n      onTouchStart: function onTouchStart(e) {\n        onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n      },\n      style: {\n        position: \"relative\",\n        touchAction: \"none\"\n      }\n    }, moveProps),\n    outputProps: {\n      htmlFor: state.values.map(function (_, index) {\n        return (0, $aa519ee6cf463259$export$68e648cbec363a18)(state, index);\n      }).join(\" \"),\n      \"aria-live\": \"off\"\n    }\n  };\n}\nfunction $47b897dc8cdb026b$export$8d15029008292ae(opts, state) {\n  var _style;\n  var _opts$index = opts.index,\n    index = _opts$index === void 0 ? 0 : _opts$index,\n    isRequired = opts.isRequired,\n    validationState = opts.validationState,\n    isInvalid = opts.isInvalid,\n    trackRef = opts.trackRef,\n    inputRef = opts.inputRef,\n    _opts$orientation = opts.orientation,\n    orientation = _opts$orientation === void 0 ? state.orientation : _opts$orientation,\n    name = opts.name;\n  var isDisabled = opts.isDisabled || state.isDisabled;\n  var isVertical = orientation === \"vertical\";\n  var _ref6 = (0, $fA3fN$useLocale)(),\n    direction = _ref6.direction;\n  var _ref7 = (0, $fA3fN$useGlobalListeners)(),\n    addGlobalListener = _ref7.addGlobalListener,\n    removeGlobalListener = _ref7.removeGlobalListener;\n  var data = (0, $aa519ee6cf463259$export$d6c8d9636a3dc49c).get(state);\n  var _opts_arialabelledby;\n  var _ref8 = (0, $fA3fN$useLabel)(_objectSpread(_objectSpread({}, opts), {}, {\n      id: (0, $aa519ee6cf463259$export$68e648cbec363a18)(state, index),\n      \"aria-labelledby\": \"\".concat(data.id, \" \").concat((_opts_arialabelledby = opts[\"aria-labelledby\"]) !== null && _opts_arialabelledby !== void 0 ? _opts_arialabelledby : \"\").trim()\n    })),\n    labelProps = _ref8.labelProps,\n    fieldProps = _ref8.fieldProps;\n  var value = state.values[index];\n  var focusInput = (0, $fA3fN$useCallback)(function () {\n    if (inputRef.current) (0, $fA3fN$focusWithoutScrolling)(inputRef.current);\n  }, [inputRef]);\n  var isFocused = state.focusedThumb === index;\n  (0, $fA3fN$useEffect)(function () {\n    if (isFocused) focusInput();\n  }, [isFocused, focusInput]);\n  var reverseX = direction === \"rtl\";\n  var currentPosition = (0, $fA3fN$useRef)(null);\n  var _ref9 = (0, $fA3fN$useKeyboard)({\n      onKeyDown: function onKeyDown(e) {\n        var getThumbMaxValue = state.getThumbMaxValue,\n          getThumbMinValue = state.getThumbMinValue,\n          decrementThumb = state.decrementThumb,\n          incrementThumb = state.incrementThumb,\n          setThumbValue = state.setThumbValue,\n          setThumbDragging = state.setThumbDragging,\n          pageSize = state.pageSize;\n        // these are the cases that useMove or useSlider don't handle\n        if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {\n          e.continuePropagation();\n          return;\n        }\n        // same handling as useMove, stopPropagation to prevent useSlider from handling the event as well.\n        e.preventDefault();\n        // remember to set this so that onChangeEnd is fired\n        setThumbDragging(index, true);\n        switch (e.key) {\n          case \"PageUp\":\n            incrementThumb(index, pageSize);\n            break;\n          case \"PageDown\":\n            decrementThumb(index, pageSize);\n            break;\n          case \"Home\":\n            setThumbValue(index, getThumbMinValue(index));\n            break;\n          case \"End\":\n            setThumbValue(index, getThumbMaxValue(index));\n            break;\n        }\n        setThumbDragging(index, false);\n      }\n    }),\n    keyboardProps = _ref9.keyboardProps;\n  var _ref10 = (0, $fA3fN$useMove)({\n      onMoveStart: function onMoveStart() {\n        currentPosition.current = null;\n        state.setThumbDragging(index, true);\n      },\n      onMove: function onMove(_ref11) {\n        var deltaX = _ref11.deltaX,\n          deltaY = _ref11.deltaY,\n          pointerType = _ref11.pointerType,\n          shiftKey = _ref11.shiftKey;\n        var getThumbPercent = state.getThumbPercent,\n          setThumbPercent = state.setThumbPercent,\n          decrementThumb = state.decrementThumb,\n          incrementThumb = state.incrementThumb,\n          step = state.step,\n          pageSize = state.pageSize;\n        var _trackRef$current$get3 = trackRef.current.getBoundingClientRect(),\n          width = _trackRef$current$get3.width,\n          height = _trackRef$current$get3.height;\n        var size = isVertical ? height : width;\n        if (currentPosition.current == null) currentPosition.current = getThumbPercent(index) * size;\n        if (pointerType === \"keyboard\") {\n          if (deltaX > 0 && reverseX || deltaX < 0 && !reverseX || deltaY > 0) decrementThumb(index, shiftKey ? pageSize : step);else incrementThumb(index, shiftKey ? pageSize : step);\n        } else {\n          var delta = isVertical ? deltaY : deltaX;\n          if (isVertical || reverseX) delta = -delta;\n          currentPosition.current += delta;\n          setThumbPercent(index, (0, $fA3fN$clamp)(currentPosition.current / size, 0, 1));\n        }\n      },\n      onMoveEnd: function onMoveEnd() {\n        state.setThumbDragging(index, false);\n      }\n    }),\n    moveProps = _ref10.moveProps;\n  // Immediately register editability with the state\n  state.setThumbEditable(index, !isDisabled);\n  var _ref12 = (0, $fA3fN$useFocusable)((0, $fA3fN$mergeProps)(opts, {\n      onFocus: function onFocus() {\n        return state.setFocusedThumb(index);\n      },\n      onBlur: function onBlur() {\n        return state.setFocusedThumb(undefined);\n      }\n    }), inputRef),\n    focusableProps = _ref12.focusableProps;\n  var currentPointer = (0, $fA3fN$useRef)(undefined);\n  var onDown = function onDown(id) {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n    addGlobalListener(window, \"mouseup\", onUp, false);\n    addGlobalListener(window, \"touchend\", onUp, false);\n    addGlobalListener(window, \"pointerup\", onUp, false);\n  };\n  var onUp = function onUp(e) {\n    var _e_changedTouches;\n    var _e_pointerId;\n    var id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, \"mouseup\", onUp, false);\n      removeGlobalListener(window, \"touchend\", onUp, false);\n      removeGlobalListener(window, \"pointerup\", onUp, false);\n    }\n  };\n  var thumbPosition = state.getThumbPercent(index);\n  if (isVertical || direction === \"rtl\") thumbPosition = 1 - thumbPosition;\n  var interactions = !isDisabled ? (0, $fA3fN$mergeProps)(keyboardProps, moveProps, {\n    onMouseDown: function onMouseDown(e) {\n      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;\n      onDown();\n    },\n    onPointerDown: function onPointerDown(e) {\n      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;\n      onDown(e.pointerId);\n    },\n    onTouchStart: function onTouchStart(e) {\n      onDown(e.changedTouches[0].identifier);\n    }\n  }) : {};\n  (0, $fA3fN$useFormReset)(inputRef, value, function (v) {\n    state.setThumbValue(index, v);\n  });\n  // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n  return {\n    inputProps: (0, $fA3fN$mergeProps)(focusableProps, fieldProps, {\n      type: \"range\",\n      tabIndex: !isDisabled ? 0 : undefined,\n      min: state.getThumbMinValue(index),\n      max: state.getThumbMaxValue(index),\n      step: state.step,\n      value: value,\n      name: name,\n      disabled: isDisabled,\n      \"aria-orientation\": orientation,\n      \"aria-valuetext\": state.getThumbValueLabel(index),\n      \"aria-required\": isRequired || undefined,\n      \"aria-invalid\": isInvalid || validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": opts[\"aria-errormessage\"],\n      \"aria-describedby\": [data[\"aria-describedby\"], opts[\"aria-describedby\"]].filter(Boolean).join(\" \"),\n      \"aria-details\": [data[\"aria-details\"], opts[\"aria-details\"]].filter(Boolean).join(\" \"),\n      onChange: function onChange(e) {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      }\n    }),\n    thumbProps: _objectSpread(_objectSpread({}, interactions), {}, {\n      style: (_style = {\n        position: \"absolute\"\n      }, _defineProperty(_style, isVertical ? \"top\" : \"left\", \"\".concat(thumbPosition * 100, \"%\")), _defineProperty(_style, \"transform\", \"translate(-50%, -50%)\"), _defineProperty(_style, \"touchAction\", \"none\"), _style)\n    }),\n    labelProps: labelProps,\n    isDragging: state.isThumbDragging(index),\n    isDisabled: isDisabled,\n    isFocused: isFocused\n  };\n}\nexport { $bcca50147b47f54d$export$56b2c08e277f365 as useSlider, $47b897dc8cdb026b$export$8d15029008292ae as useSliderThumb };","map":{"version":3,"names":["$aa519ee6cf463259$export$d6c8d9636a3dc49c","WeakMap","$aa519ee6cf463259$export$68e648cbec363a18","state","index","data","get","Error","concat","id","$bcca50147b47f54d$export$56b2c08e277f365","props","trackRef","_ref","$fA3fN$useLabel","labelProps","fieldProps","isVertical","orientation","_labelProps_id","set","_ref2","$fA3fN$useLocale","direction","_ref3","$fA3fN$useGlobalListeners","addGlobalListener","removeGlobalListener","realTimeTrackDraggingIndex","$fA3fN$useRef","reverseX","currentPosition","_ref4","$fA3fN$useMove","onMoveStart","current","onMove","_ref5","deltaX","deltaY","_trackRef$current$get","getBoundingClientRect","height","width","size","getThumbPercent","delta","percent","$fA3fN$clamp","setThumbPercent","onMoveEnd","setThumbDragging","moveProps","currentPointer","undefined","onDownTrack","e","clientX","clientY","isDisabled","values","every","_","i","isThumbDragging","_trackRef$current$get2","top","left","trackPosition","clickPosition","offset","value","getPercentValue","closestThumb","split","findIndex","v","length","lastLeft","firstRight","Math","abs","isThumbEditable","preventDefault","setFocusedThumb","setThumbValue","window","onUpTrack","_e_changedTouches","_e_pointerId","pointerId","changedTouches","identifier","htmlFor","onClick","_document_getElementById","document","getElementById","focus","$fA3fN$setInteractionModality","groupProps","_objectSpread","role","trackProps","$fA3fN$mergeProps","onMouseDown","button","altKey","ctrlKey","metaKey","onPointerDown","pointerType","onTouchStart","style","position","touchAction","outputProps","map","join","$47b897dc8cdb026b$export$8d15029008292ae","opts","_style","_opts$index","isRequired","validationState","isInvalid","inputRef","_opts$orientation","name","_ref6","_ref7","_opts_arialabelledby","_ref8","trim","focusInput","$fA3fN$useCallback","$fA3fN$focusWithoutScrolling","isFocused","focusedThumb","$fA3fN$useEffect","_ref9","$fA3fN$useKeyboard","onKeyDown","getThumbMaxValue","getThumbMinValue","decrementThumb","incrementThumb","pageSize","test","key","continuePropagation","keyboardProps","_ref10","_ref11","shiftKey","step","_trackRef$current$get3","setThumbEditable","_ref12","$fA3fN$useFocusable","onFocus","onBlur","focusableProps","onDown","onUp","thumbPosition","interactions","$fA3fN$useFormReset","inputProps","type","tabIndex","min","max","disabled","getThumbValueLabel","filter","Boolean","onChange","parseFloat","target","thumbProps","_defineProperty","isDragging"],"sources":["C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\slider\\dist\\packages\\@react-aria\\slider\\src\\index.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\slider\\dist\\packages\\@react-aria\\slider\\src\\useSlider.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\slider\\dist\\packages\\@react-aria\\slider\\src\\utils.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@react-aria\\slider\\dist\\packages\\@react-aria\\slider\\src\\useSliderThumb.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useSlider} from './useSlider';\nexport {useSliderThumb} from './useSliderThumb';\nexport type {AriaSliderProps} from '@react-types/slider';\nexport type {SliderAria} from './useSlider';\nexport type {AriaSliderThumbOptions, SliderThumbAria} from './useSliderThumb';\nexport type {AriaSliderThumbProps} from '@react-types/slider';\nexport type {Orientation} from '@react-types/shared';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaSliderProps} from '@react-types/slider';\nimport {clamp, mergeProps, useGlobalListeners} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {getSliderThumbId, sliderData} from './utils';\nimport React, {LabelHTMLAttributes, OutputHTMLAttributes, RefObject, useRef} from 'react';\nimport {setInteractionModality, useMove} from '@react-aria/interactions';\nimport {SliderState} from '@react-stately/slider';\nimport {useLabel} from '@react-aria/label';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface SliderAria {\n  /** Props for the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n\n  /** Props for the root element of the slider component; groups slider inputs. */\n  groupProps: DOMAttributes,\n\n  /** Props for the track element. */\n  trackProps: DOMAttributes,\n\n  /** Props for the output element, displaying the value of the slider thumbs. */\n  outputProps: OutputHTMLAttributes<HTMLOutputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a slider component representing one or more values.\n *\n * @param props Props for the slider.\n * @param state State for the slider, as returned by `useSliderState`.\n * @param trackRef Ref for the \"track\" element.  The width of this element provides the \"length\"\n * of the track -- the span of one dimensional space that the slider thumb can be.  It also\n * accepts click and drag motions, so that the closest thumb will follow clicks and drags on\n * the track.\n */\nexport function useSlider<T extends number | number[]>(\n  props: AriaSliderProps<T>,\n  state: SliderState,\n  trackRef: RefObject<Element>\n): SliderAria {\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let isVertical = props.orientation === 'vertical';\n\n  // Attach id of the label to the state so it can be accessed by useSliderThumb.\n  sliderData.set(state, {\n    id: labelProps.id ?? fieldProps.id,\n    'aria-describedby': props['aria-describedby'],\n    'aria-details': props['aria-details']\n  });\n\n  let {direction} = useLocale();\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  // When the user clicks or drags the track, we want the motion to set and drag the\n  // closest thumb.  Hence we also need to install useMove() on the track element.\n  // Here, we keep track of which index is the \"closest\" to the drag start point.\n  // It is set onMouseDown/onTouchDown; see trackProps below.\n  const realTimeTrackDraggingIndex = useRef<number | null>(null);\n\n  const reverseX = direction === 'rtl';\n  const currentPosition = useRef<number>(null);\n  const {moveProps} = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n    },\n    onMove({deltaX, deltaY}) {\n      let {height, width} = trackRef.current.getBoundingClientRect();\n      let size = isVertical ? height : width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current = state.getThumbPercent(realTimeTrackDraggingIndex.current) * size;\n      }\n\n      let delta = isVertical ? deltaY : deltaX;\n      if (isVertical || reverseX) {\n        delta = -delta;\n      }\n\n      currentPosition.current += delta;\n\n      if (realTimeTrackDraggingIndex.current != null && trackRef.current) {\n        const percent = clamp(currentPosition.current / size, 0, 1);\n        state.setThumbPercent(realTimeTrackDraggingIndex.current, percent);\n      }\n    },\n    onMoveEnd() {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  });\n\n  let currentPointer = useRef<number | null | undefined>(undefined);\n  let onDownTrack = (e: React.UIEvent, id: number, clientX: number, clientY: number) => {\n    // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.\n    if (trackRef.current && !props.isDisabled && state.values.every((_, i) => !state.isThumbDragging(i))) {\n      let {height, width, top, left} = trackRef.current.getBoundingClientRect();\n      let size = isVertical ? height : width;\n      // Find the closest thumb\n      const trackPosition = isVertical ? top : left;\n      const clickPosition = isVertical ? clientY : clientX;\n      const offset = clickPosition - trackPosition;\n      let percent = offset / size;\n      if (direction === 'rtl' || isVertical) {\n        percent = 1 - percent;\n      }\n      let value = state.getPercentValue(percent);\n\n      // to find the closet thumb we split the array based on the first thumb position to the \"right/end\" of the click.\n      let closestThumb;\n      let split = state.values.findIndex(v => value - v < 0);\n      if (split === 0) { // If the index is zero then the closetThumb is the first one\n        closestThumb = split;\n      } else if (split === -1) { // If no index is found they've clicked past all the thumbs\n        closestThumb = state.values.length - 1;\n      } else {\n        let lastLeft = state.values[split - 1];\n        let firstRight = state.values[split];\n        // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one\n        if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) {\n          closestThumb = split - 1;\n        } else {\n          closestThumb = split;\n        }\n      }\n\n      // Confirm that the found closest thumb is editable, not disabled, and move it\n      if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {\n        // Don't unfocus anything\n        e.preventDefault();\n\n        realTimeTrackDraggingIndex.current = closestThumb;\n        state.setFocusedThumb(closestThumb);\n        currentPointer.current = id;\n\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, true);\n        state.setThumbValue(closestThumb, value);\n\n        addGlobalListener(window, 'mouseup', onUpTrack, false);\n        addGlobalListener(window, 'touchend', onUpTrack, false);\n        addGlobalListener(window, 'pointerup', onUpTrack, false);\n      } else {\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  };\n\n  let onUpTrack = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n\n      removeGlobalListener(window, 'mouseup', onUpTrack, false);\n      removeGlobalListener(window, 'touchend', onUpTrack, false);\n      removeGlobalListener(window, 'pointerup', onUpTrack, false);\n    }\n  };\n\n  if ('htmlFor' in labelProps && labelProps.htmlFor) {\n    // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS\n    // causes this to override the `aria-labelledby` on the thumb. This causes the first\n    // thumb to only be announced as the slider label rather than its individual name as well.\n    // See https://bugs.webkit.org/show_bug.cgi?id=172464.\n    delete labelProps.htmlFor;\n    labelProps.onClick = () => {\n      // Safari does not focus <input type=\"range\"> elements when clicking on an associated <label>,\n      // so do it manually. In addition, make sure we show the focus ring.\n      document.getElementById(getSliderThumbId(state, 0))?.focus();\n      setInteractionModality('keyboard');\n    };\n  }\n\n  return {\n    labelProps,\n    // The root element of the Slider will have role=\"group\" to group together\n    // all the thumb inputs in the Slider.  The label of the Slider will\n    // be used to label the group.\n    groupProps: {\n      role: 'group',\n      ...fieldProps\n    },\n    trackProps: mergeProps({\n      onMouseDown(e: React.MouseEvent) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDownTrack(e, undefined, e.clientX, e.clientY);\n      },\n      onPointerDown(e: React.PointerEvent) {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n        onDownTrack(e, e.pointerId, e.clientX, e.clientY);\n      },\n      onTouchStart(e: React.TouchEvent) { onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY); },\n      style: {\n        position: 'relative',\n        touchAction: 'none'\n      }\n    }, moveProps),\n    outputProps: {\n      htmlFor: state.values.map((_, index) => getSliderThumbId(state, index)).join(' '),\n      'aria-live': 'off'\n    }\n  };\n}\n","import {SliderState} from '@react-stately/slider';\n\ninterface SliderData {\n  id: string,\n  'aria-describedby'?: string,\n  'aria-details'?: string\n}\n\nexport const sliderData = new WeakMap<SliderState, SliderData>();\n\nexport function getSliderThumbId(state: SliderState, index: number) {\n  let data = sliderData.get(state);\n  if (!data) {\n    throw new Error('Unknown slider state');\n  }\n\n  return `${data.id}-${index}`;\n}\n","import {AriaSliderThumbProps} from '@react-types/slider';\nimport {clamp, focusWithoutScrolling, mergeProps, useFormReset, useGlobalListeners} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {getSliderThumbId, sliderData} from './utils';\nimport React, {ChangeEvent, InputHTMLAttributes, LabelHTMLAttributes, RefObject, useCallback, useEffect, useRef} from 'react';\nimport {SliderState} from '@react-stately/slider';\nimport {useFocusable} from '@react-aria/focus';\nimport {useKeyboard, useMove} from '@react-aria/interactions';\nimport {useLabel} from '@react-aria/label';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface SliderThumbAria {\n  /** Props for the root thumb element; handles the dragging motion. */\n  thumbProps: DOMAttributes,\n\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n\n  /** Props for the label element for this thumb (optional). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n\n  /** Whether this thumb is currently being dragged. */\n  isDragging: boolean,\n  /** Whether the thumb is currently focused. */\n  isFocused: boolean,\n  /** Whether the thumb is disabled. */\n  isDisabled: boolean\n}\n\nexport interface AriaSliderThumbOptions extends AriaSliderThumbProps {\n  /** A ref to the track element. */\n  trackRef: RefObject<Element>,\n  /** A ref to the thumb input element. */\n  inputRef: RefObject<HTMLInputElement>\n}\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(\n  opts: AriaSliderThumbOptions,\n  state: SliderState\n): SliderThumbAria {\n  let {\n    index = 0,\n    isRequired,\n    validationState,\n    isInvalid,\n    trackRef,\n    inputRef,\n    orientation = state.orientation,\n    name\n  } = opts;\n\n  let isDisabled = opts.isDisabled || state.isDisabled;\n  let isVertical = orientation === 'vertical';\n\n  let {direction} = useLocale();\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let data = sliderData.get(state);\n  const {labelProps, fieldProps} = useLabel({\n    ...opts,\n    id: getSliderThumbId(state, index),\n    'aria-labelledby': `${data.id} ${opts['aria-labelledby'] ?? ''}`.trim()\n  });\n\n  const value = state.values[index];\n\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  const isFocused = state.focusedThumb === index;\n\n  useEffect(() => {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n\n  let reverseX = direction === 'rtl';\n  let currentPosition = useRef<number>(null);\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown(e) {\n      let {\n        getThumbMaxValue,\n        getThumbMinValue,\n        decrementThumb,\n        incrementThumb,\n        setThumbValue,\n        setThumbDragging,\n        pageSize\n      } = state;\n      // these are the cases that useMove or useSlider don't handle\n      if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {\n        e.continuePropagation();\n        return;\n      }\n      // same handling as useMove, stopPropagation to prevent useSlider from handling the event as well.\n      e.preventDefault();\n      // remember to set this so that onChangeEnd is fired\n      setThumbDragging(index, true);\n      switch (e.key) {\n        case 'PageUp':\n          incrementThumb(index, pageSize);\n          break;\n        case 'PageDown':\n          decrementThumb(index, pageSize);\n          break;\n        case 'Home':\n          setThumbValue(index, getThumbMinValue(index));\n          break;\n        case 'End':\n          setThumbValue(index, getThumbMaxValue(index));\n          break;\n      }\n      setThumbDragging(index, false);\n    }\n  });\n\n  let {moveProps} = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove({deltaX, deltaY, pointerType, shiftKey}) {\n      const {\n        getThumbPercent,\n        setThumbPercent,\n        decrementThumb,\n        incrementThumb,\n        step,\n        pageSize\n      } = state;\n      let {width, height} = trackRef.current.getBoundingClientRect();\n      let size = isVertical ? height : width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current = getThumbPercent(index) * size;\n      }\n      if (pointerType === 'keyboard') {\n        if ((deltaX > 0 && reverseX) || (deltaX < 0 && !reverseX) || deltaY > 0) {\n          decrementThumb(index, shiftKey ? pageSize : step);\n        } else {\n          incrementThumb(index, shiftKey ? pageSize : step);\n        }\n      } else {\n        let delta = isVertical ? deltaY : deltaX;\n        if (isVertical || reverseX) {\n          delta = -delta;\n        }\n\n        currentPosition.current += delta;\n        setThumbPercent(index, clamp(currentPosition.current / size, 0, 1));\n      }\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    }\n  });\n\n  // Immediately register editability with the state\n  state.setThumbEditable(index, !isDisabled);\n\n  const {focusableProps} = useFocusable(\n    mergeProps(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined)\n    }),\n    inputRef\n  );\n\n  let currentPointer = useRef<number | undefined>(undefined);\n  let onDown = (id?: number) => {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n\n  };\n\n  let onUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n\n  let thumbPosition = state.getThumbPercent(index);\n  if (isVertical || direction === 'rtl') {\n    thumbPosition = 1 - thumbPosition;\n  }\n\n  let interactions = !isDisabled ? mergeProps(\n    keyboardProps,\n    moveProps,\n    {\n      onMouseDown: (e: React.MouseEvent) => {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown();\n      },\n      onPointerDown: (e: React.PointerEvent) => {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown(e.pointerId);\n      },\n      onTouchStart: (e: React.TouchEvent) => {onDown(e.changedTouches[0].identifier);}\n    }\n  ) : {};\n\n  useFormReset(inputRef, value, (v) => {\n    state.setThumbValue(index, v);\n  });\n\n  // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      type: 'range',\n      tabIndex: !isDisabled ? 0 : undefined,\n      min: state.getThumbMinValue(index),\n      max: state.getThumbMaxValue(index),\n      step: state.step,\n      value: value,\n      name,\n      disabled: isDisabled,\n      'aria-orientation': orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'aria-describedby': [data['aria-describedby'], opts['aria-describedby']].filter(Boolean).join(' '),\n      'aria-details': [data['aria-details'], opts['aria-details']].filter(Boolean).join(' '),\n      onChange: (e: ChangeEvent<HTMLInputElement>) => {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      }\n    }),\n    thumbProps: {\n      ...interactions,\n      style: {\n        position: 'absolute',\n        [isVertical ? 'top' : 'left']: `${thumbPosition * 100}%`,\n        transform: 'translate(-50%, -50%)',\n        touchAction: 'none'\n      }\n    },\n    labelProps,\n    isDragging: state.isThumbDragging(index),\n    isDisabled,\n    isFocused\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}