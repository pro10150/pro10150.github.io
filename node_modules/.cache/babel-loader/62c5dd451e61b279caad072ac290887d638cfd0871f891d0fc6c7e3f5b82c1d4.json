{"ast":null,"code":"\"use client\";\n\n// src/use-snippet.ts\nimport { snippet } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useClipboard } from \"@nextui-org/use-clipboard\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction useSnippet(originalProps) {\n  var _a, _b;\n  const [props, variantProps] = mapPropsVariants(originalProps, snippet.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    symbol = \"$\",\n    classNames,\n    timeout,\n    copyIcon,\n    checkIcon,\n    codeString,\n    disableCopy = false,\n    disableTooltip = false,\n    hideCopyButton = false,\n    autoFocus = false,\n    hideSymbol = false,\n    onCopy: onCopyProp,\n    tooltipProps: userTooltipProps = {},\n    copyButtonProps: userButtonProps = {},\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const tooltipProps = {\n    offset: 15,\n    delay: 1e3,\n    content: \"Copy to clipboard\",\n    color: (_b = originalProps == null ? void 0 : originalProps.color) != null ? _b : (_a = snippet.defaultVariants) == null ? void 0 : _a.color,\n    isDisabled: props.disableCopy,\n    ...userTooltipProps\n  };\n  const domRef = useDOMRef(ref);\n  const preRef = useRef(null);\n  const {\n    copy,\n    copied\n  } = useClipboard({\n    timeout\n  });\n  const isMultiLine = children && Array.isArray(children);\n  const {\n    isFocusVisible,\n    isFocused,\n    focusProps\n  } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(() => snippet({\n    ...variantProps\n  }), [...Object.values(variantProps)]);\n  const symbolBefore = useMemo(() => {\n    if (!symbol || typeof symbol !== \"string\") return symbol;\n    const str = symbol.trim();\n    return str ? \"\".concat(str, \" \") : \"\";\n  }, [symbol]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getSnippetProps = useCallback(() => ({\n    className: slots.base({\n      class: baseStyles\n    }),\n    ...filterDOMProps(otherProps, {\n      enabled: shouldFilterDOMProps\n    })\n  }), [slots, baseStyles, isMultiLine, otherProps]);\n  const onCopy = useCallback(() => {\n    var _a2;\n    if (disableCopy) {\n      return;\n    }\n    let stringValue = \"\";\n    if (typeof children === \"string\") {\n      stringValue = children;\n    } else if (Array.isArray(children)) {\n      children.forEach(child => {\n        var _a3, _b2;\n        const childString = typeof child === \"string\" ? child : (_b2 = (_a3 = child == null ? void 0 : child.props) == null ? void 0 : _a3.children) == null ? void 0 : _b2.toString();\n        if (childString) {\n          stringValue += childString + \"\\n\";\n        }\n      });\n    }\n    const valueToCopy = codeString || stringValue || ((_a2 = preRef.current) == null ? void 0 : _a2.textContent) || \"\";\n    copy(valueToCopy);\n    onCopyProp == null ? void 0 : onCopyProp(valueToCopy);\n  }, [copy, codeString, disableCopy, onCopyProp, children]);\n  const copyButtonProps = {\n    \"aria-label\": typeof tooltipProps.content === \"string\" ? tooltipProps.content : \"Copy to clipboard\",\n    size: \"sm\",\n    variant: \"light\",\n    isDisabled: disableCopy,\n    onPress: onCopy,\n    isIconOnly: true,\n    ...userButtonProps\n  };\n  const getCopyButtonProps = useCallback(() => ({\n    ...copyButtonProps,\n    \"data-copied\": dataAttr(copied),\n    className: slots.copyButton({\n      class: clsx(classNames == null ? void 0 : classNames.copyButton)\n    })\n  }), [slots, isFocusVisible, isFocused, disableCopy, classNames == null ? void 0 : classNames.copyButton, copyButtonProps, focusProps]);\n  return {\n    Component,\n    as,\n    domRef,\n    preRef,\n    children,\n    slots,\n    classNames,\n    copied,\n    onCopy,\n    copyIcon,\n    checkIcon,\n    symbolBefore,\n    isMultiLine,\n    isFocusVisible,\n    hideCopyButton,\n    disableCopy,\n    disableTooltip,\n    hideSymbol,\n    tooltipProps,\n    getSnippetProps,\n    getCopyButtonProps\n  };\n}\nexport { useSnippet };","map":{"version":3,"names":["snippet","mapPropsVariants","useDOMRef","filterDOMProps","clsx","dataAttr","useClipboard","useFocusRing","useMemo","useCallback","useRef","useSnippet","originalProps","_a","_b","props","variantProps","variantKeys","ref","as","children","symbol","classNames","timeout","copyIcon","checkIcon","codeString","disableCopy","disableTooltip","hideCopyButton","autoFocus","hideSymbol","onCopy","onCopyProp","tooltipProps","userTooltipProps","copyButtonProps","userButtonProps","className","otherProps","Component","shouldFilterDOMProps","offset","delay","content","color","defaultVariants","isDisabled","domRef","preRef","copy","copied","isMultiLine","Array","isArray","isFocusVisible","isFocused","focusProps","slots","Object","values","symbolBefore","str","trim","concat","baseStyles","base","getSnippetProps","class","enabled","_a2","stringValue","forEach","child","_a3","_b2","childString","toString","valueToCopy","current","textContent","size","variant","onPress","isIconOnly","getCopyButtonProps","copyButton"],"sources":["/Users/padchaa/Desktop/Personal/pro10150.github.io/node_modules/@nextui-org/snippet/dist/chunk-E6UNCQPZ.mjs"],"sourcesContent":["\"use client\";\n\n// src/use-snippet.ts\nimport { snippet } from \"@nextui-org/theme\";\nimport { mapPropsVariants } from \"@nextui-org/system\";\nimport { useDOMRef, filterDOMProps } from \"@nextui-org/react-utils\";\nimport { clsx, dataAttr } from \"@nextui-org/shared-utils\";\nimport { useClipboard } from \"@nextui-org/use-clipboard\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { useMemo, useCallback, useRef } from \"react\";\nfunction useSnippet(originalProps) {\n  var _a, _b;\n  const [props, variantProps] = mapPropsVariants(originalProps, snippet.variantKeys);\n  const {\n    ref,\n    as,\n    children,\n    symbol = \"$\",\n    classNames,\n    timeout,\n    copyIcon,\n    checkIcon,\n    codeString,\n    disableCopy = false,\n    disableTooltip = false,\n    hideCopyButton = false,\n    autoFocus = false,\n    hideSymbol = false,\n    onCopy: onCopyProp,\n    tooltipProps: userTooltipProps = {},\n    copyButtonProps: userButtonProps = {},\n    className,\n    ...otherProps\n  } = props;\n  const Component = as || \"div\";\n  const shouldFilterDOMProps = typeof Component === \"string\";\n  const tooltipProps = {\n    offset: 15,\n    delay: 1e3,\n    content: \"Copy to clipboard\",\n    color: (_b = originalProps == null ? void 0 : originalProps.color) != null ? _b : (_a = snippet.defaultVariants) == null ? void 0 : _a.color,\n    isDisabled: props.disableCopy,\n    ...userTooltipProps\n  };\n  const domRef = useDOMRef(ref);\n  const preRef = useRef(null);\n  const { copy, copied } = useClipboard({ timeout });\n  const isMultiLine = children && Array.isArray(children);\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus\n  });\n  const slots = useMemo(\n    () => snippet({\n      ...variantProps\n    }),\n    [...Object.values(variantProps)]\n  );\n  const symbolBefore = useMemo(() => {\n    if (!symbol || typeof symbol !== \"string\")\n      return symbol;\n    const str = symbol.trim();\n    return str ? `${str} ` : \"\";\n  }, [symbol]);\n  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);\n  const getSnippetProps = useCallback(\n    () => ({\n      className: slots.base({\n        class: baseStyles\n      }),\n      ...filterDOMProps(otherProps, {\n        enabled: shouldFilterDOMProps\n      })\n    }),\n    [slots, baseStyles, isMultiLine, otherProps]\n  );\n  const onCopy = useCallback(() => {\n    var _a2;\n    if (disableCopy) {\n      return;\n    }\n    let stringValue = \"\";\n    if (typeof children === \"string\") {\n      stringValue = children;\n    } else if (Array.isArray(children)) {\n      children.forEach((child) => {\n        var _a3, _b2;\n        const childString = typeof child === \"string\" ? child : (_b2 = (_a3 = child == null ? void 0 : child.props) == null ? void 0 : _a3.children) == null ? void 0 : _b2.toString();\n        if (childString) {\n          stringValue += childString + \"\\n\";\n        }\n      });\n    }\n    const valueToCopy = codeString || stringValue || ((_a2 = preRef.current) == null ? void 0 : _a2.textContent) || \"\";\n    copy(valueToCopy);\n    onCopyProp == null ? void 0 : onCopyProp(valueToCopy);\n  }, [copy, codeString, disableCopy, onCopyProp, children]);\n  const copyButtonProps = {\n    \"aria-label\": typeof tooltipProps.content === \"string\" ? tooltipProps.content : \"Copy to clipboard\",\n    size: \"sm\",\n    variant: \"light\",\n    isDisabled: disableCopy,\n    onPress: onCopy,\n    isIconOnly: true,\n    ...userButtonProps\n  };\n  const getCopyButtonProps = useCallback(\n    () => ({\n      ...copyButtonProps,\n      \"data-copied\": dataAttr(copied),\n      className: slots.copyButton({\n        class: clsx(classNames == null ? void 0 : classNames.copyButton)\n      })\n    }),\n    [\n      slots,\n      isFocusVisible,\n      isFocused,\n      disableCopy,\n      classNames == null ? void 0 : classNames.copyButton,\n      copyButtonProps,\n      focusProps\n    ]\n  );\n  return {\n    Component,\n    as,\n    domRef,\n    preRef,\n    children,\n    slots,\n    classNames,\n    copied,\n    onCopy,\n    copyIcon,\n    checkIcon,\n    symbolBefore,\n    isMultiLine,\n    isFocusVisible,\n    hideCopyButton,\n    disableCopy,\n    disableTooltip,\n    hideSymbol,\n    tooltipProps,\n    getSnippetProps,\n    getCopyButtonProps\n  };\n}\n\nexport {\n  useSnippet\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}