{"ast":null,"code":"import _classCallCheck from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\r\n * Maximum time between the value of two frames, beyond which we\r\n * assume the velocity has since been 0.\r\n */\nvar MAX_VELOCITY_DELTA = 30;\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\nvar collectMotionValues = {\n  current: undefined\n};\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\nvar MotionValue = /*#__PURE__*/function () {\n  /**\r\n   * @param init - The initiating value\r\n   * @param config - Optional configuration options\r\n   *\r\n   * -  `transformer`: A function to transform incoming values with.\r\n   *\r\n   * @internal\r\n   */\n  function MotionValue(init) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, MotionValue);\n    /**\r\n     * This will be replaced by the build step with the latest version number.\r\n     * When MotionValues are provided to motion components, warn if versions are mixed.\r\n     */\n    this.version = \"11.0.3\";\n    /**\r\n     * Tracks whether this value can output a velocity. Currently this is only true\r\n     * if the value is numerical, but we might be able to widen the scope here and support\r\n     * other value types.\r\n     *\r\n     * @internal\r\n     */\n    this.canTrackVelocity = false;\n    /**\r\n     * An object containing a SubscriptionManager for each active event.\r\n     */\n    this.events = {};\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var currentTime = time.now();\n      /**\r\n       * If we're updating the value during another frame or eventloop\r\n       * than the previous frame, then the we set the previous frame value\r\n       * to current.\r\n       */\n      if (_this.updatedAt !== currentTime) {\n        _this.setPrevFrameValue();\n      }\n      _this.prev = _this.current;\n      _this.setCurrent(v);\n      // Update update subscribers\n      if (_this.current !== _this.prev && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      }\n      // Update render subscribers\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n    this.hasAnimated = false;\n    this.setCurrent(init);\n    this.canTrackVelocity = isFloat(this.current);\n    this.owner = options.owner;\n  }\n  _createClass(MotionValue, [{\n    key: \"setCurrent\",\n    value: function setCurrent(current) {\n      this.current = current;\n      this.updatedAt = time.now();\n    }\n  }, {\n    key: \"setPrevFrameValue\",\n    value: function setPrevFrameValue() {\n      var prevFrameValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.current;\n      this.prevFrameValue = prevFrameValue;\n      this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` is updated.\r\n     *\r\n     * It returns a function that, when called, will cancel the subscription.\r\n     *\r\n     * When calling `onChange` inside a React component, it should be wrapped with the\r\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n     *\r\n     * ```jsx\r\n     * export const MyComponent = () => {\r\n     *   const x = useMotionValue(0)\r\n     *   const y = useMotionValue(0)\r\n     *   const opacity = useMotionValue(1)\r\n     *\r\n     *   useEffect(() => {\r\n     *     function updateOpacity() {\r\n     *       const maxXY = Math.max(x.get(), y.get())\r\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n     *       opacity.set(newOpacity)\r\n     *     }\r\n     *\r\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\r\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\r\n     *\r\n     *     return () => {\r\n     *       unsubscribeX()\r\n     *       unsubscribeY()\r\n     *     }\r\n     *   }, [])\r\n     *\r\n     *   return <motion.div style={{ x }} />\r\n     * }\r\n     * ```\r\n     *\r\n     * @param subscriber - A function that receives the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @deprecated\r\n     */\n  }, {\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(false, \"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");\n      }\n      return this.on(\"change\", subscription);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      var _this2 = this;\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n      var unsubscribe = this.events[eventName].add(callback);\n      if (eventName === \"change\") {\n        return function () {\n          unsubscribe();\n          /**\r\n           * If we have no more change listeners by the start\r\n           * of the next frame, stop active animations.\r\n           */\n          frame.read(function () {\n            if (!_this2.events.change.getSize()) {\n              _this2.stop();\n            }\n          });\n        };\n      }\n      return unsubscribe;\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      for (var eventManagers in this.events) {\n        this.events[eventManagers].clear();\n      }\n    }\n    /**\r\n     * Attaches a passive effect to the `MotionValue`.\r\n     *\r\n     * @internal\r\n     */\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect, stopPassiveEffect) {\n      this.passiveEffect = passiveEffect;\n      this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\r\n     * Sets the state of the `MotionValue`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```jsx\r\n     * const x = useMotionValue(0)\r\n     * x.set(10)\r\n     * ```\r\n     *\r\n     * @param latest - Latest value to set.\r\n     * @param render - Whether to notify render subscribers. Defaults to `true`\r\n     *\r\n     * @public\r\n     */\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n  }, {\n    key: \"setWithVelocity\",\n    value: function setWithVelocity(prev, current, delta) {\n      this.set(current);\n      this.prev = undefined;\n      this.prevFrameValue = prev;\n      this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\r\n     * Set the state of the `MotionValue`, stopping any active animations,\r\n     * effects, and resets velocity to `0`.\r\n     */\n  }, {\n    key: \"jump\",\n    value: function jump(v) {\n      this.updateAndNotify(v);\n      this.prev = v;\n      this.prevUpdatedAt = this.prevFrameValue = undefined;\n      this.stop();\n      if (this.stopPassiveEffect) this.stopPassiveEffect();\n    }\n    /**\r\n     * Returns the latest state of `MotionValue`\r\n     *\r\n     * @returns - The latest state of `MotionValue`\r\n     *\r\n     * @public\r\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      if (collectMotionValues.current) {\n        collectMotionValues.current.push(this);\n      }\n      return this.current;\n    }\n    /**\r\n     * @public\r\n     */\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\r\n     * Returns the latest velocity of `MotionValue`\r\n     *\r\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n     *\r\n     * @public\r\n     */\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      var currentTime = time.now();\n      if (!this.canTrackVelocity || this.prevFrameValue === undefined || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n        return 0;\n      }\n      var delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n      // Casts because of parseFloat's poor typing\n      return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);\n    }\n    /**\r\n     * Registers a new animation to control this `MotionValue`. Only one\r\n     * animation can drive a `MotionValue` at one time.\r\n     *\r\n     * ```jsx\r\n     * value.start()\r\n     * ```\r\n     *\r\n     * @param animation - A function that starts the provided animation\r\n     *\r\n     * @internal\r\n     */\n  }, {\n    key: \"start\",\n    value: function start(startAnimation) {\n      var _this3 = this;\n      this.stop();\n      return new Promise(function (resolve) {\n        _this3.hasAnimated = true;\n        _this3.animation = startAnimation(resolve);\n        if (_this3.events.animationStart) {\n          _this3.events.animationStart.notify();\n        }\n      }).then(function () {\n        if (_this3.events.animationComplete) {\n          _this3.events.animationComplete.notify();\n        }\n        _this3.clearAnimation();\n      });\n    }\n    /**\r\n     * Stop the currently active animation.\r\n     *\r\n     * @public\r\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.animation) {\n        this.animation.stop();\n        if (this.events.animationCancel) {\n          this.events.animationCancel.notify();\n        }\n      }\n      this.clearAnimation();\n    }\n    /**\r\n     * Returns `true` if this value is currently animating.\r\n     *\r\n     * @public\r\n     */\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.animation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      delete this.animation;\n    }\n    /**\r\n     * Destroy and clean up subscribers to this `MotionValue`.\r\n     *\r\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n     * created a `MotionValue` via the `motionValue` function.\r\n     *\r\n     * @public\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clearListeners();\n      this.stop();\n      if (this.stopPassiveEffect) {\n        this.stopPassiveEffect();\n      }\n    }\n  }]);\n  return MotionValue;\n}();\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\nexport { MotionValue, collectMotionValues, motionValue };","map":{"version":3,"names":["SubscriptionManager","velocityPerSecond","warnOnce","time","frame","MAX_VELOCITY_DELTA","isFloat","value","isNaN","parseFloat","collectMotionValues","current","undefined","MotionValue","init","_this","options","arguments","length","_classCallCheck","version","canTrackVelocity","events","updateAndNotify","v","render","currentTime","now","updatedAt","setPrevFrameValue","prev","setCurrent","change","notify","renderRequest","hasAnimated","owner","_createClass","key","prevFrameValue","prevUpdatedAt","onChange","subscription","process","env","NODE_ENV","on","eventName","callback","_this2","unsubscribe","add","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","delta","jump","get","push","getPrevious","getVelocity","Math","min","start","startAnimation","_this3","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { SubscriptionManager } from '../utils/subscription-manager.mjs';\r\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\r\nimport { warnOnce } from '../utils/warn-once.mjs';\r\nimport { time } from '../frameloop/sync-time.mjs';\r\nimport { frame } from '../frameloop/frame.mjs';\r\n\r\n/**\r\n * Maximum time between the value of two frames, beyond which we\r\n * assume the velocity has since been 0.\r\n */\r\nconst MAX_VELOCITY_DELTA = 30;\r\nconst isFloat = (value) => {\r\n    return !isNaN(parseFloat(value));\r\n};\r\nconst collectMotionValues = {\r\n    current: undefined,\r\n};\r\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\r\nclass MotionValue {\r\n    /**\r\n     * @param init - The initiating value\r\n     * @param config - Optional configuration options\r\n     *\r\n     * -  `transformer`: A function to transform incoming values with.\r\n     *\r\n     * @internal\r\n     */\r\n    constructor(init, options = {}) {\r\n        /**\r\n         * This will be replaced by the build step with the latest version number.\r\n         * When MotionValues are provided to motion components, warn if versions are mixed.\r\n         */\r\n        this.version = \"11.0.3\";\r\n        /**\r\n         * Tracks whether this value can output a velocity. Currently this is only true\r\n         * if the value is numerical, but we might be able to widen the scope here and support\r\n         * other value types.\r\n         *\r\n         * @internal\r\n         */\r\n        this.canTrackVelocity = false;\r\n        /**\r\n         * An object containing a SubscriptionManager for each active event.\r\n         */\r\n        this.events = {};\r\n        this.updateAndNotify = (v, render = true) => {\r\n            const currentTime = time.now();\r\n            /**\r\n             * If we're updating the value during another frame or eventloop\r\n             * than the previous frame, then the we set the previous frame value\r\n             * to current.\r\n             */\r\n            if (this.updatedAt !== currentTime) {\r\n                this.setPrevFrameValue();\r\n            }\r\n            this.prev = this.current;\r\n            this.setCurrent(v);\r\n            // Update update subscribers\r\n            if (this.current !== this.prev && this.events.change) {\r\n                this.events.change.notify(this.current);\r\n            }\r\n            // Update render subscribers\r\n            if (render && this.events.renderRequest) {\r\n                this.events.renderRequest.notify(this.current);\r\n            }\r\n        };\r\n        this.hasAnimated = false;\r\n        this.setCurrent(init);\r\n        this.canTrackVelocity = isFloat(this.current);\r\n        this.owner = options.owner;\r\n    }\r\n    setCurrent(current) {\r\n        this.current = current;\r\n        this.updatedAt = time.now();\r\n    }\r\n    setPrevFrameValue(prevFrameValue = this.current) {\r\n        this.prevFrameValue = prevFrameValue;\r\n        this.prevUpdatedAt = this.updatedAt;\r\n    }\r\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` is updated.\r\n     *\r\n     * It returns a function that, when called, will cancel the subscription.\r\n     *\r\n     * When calling `onChange` inside a React component, it should be wrapped with the\r\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n     *\r\n     * ```jsx\r\n     * export const MyComponent = () => {\r\n     *   const x = useMotionValue(0)\r\n     *   const y = useMotionValue(0)\r\n     *   const opacity = useMotionValue(1)\r\n     *\r\n     *   useEffect(() => {\r\n     *     function updateOpacity() {\r\n     *       const maxXY = Math.max(x.get(), y.get())\r\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n     *       opacity.set(newOpacity)\r\n     *     }\r\n     *\r\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\r\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\r\n     *\r\n     *     return () => {\r\n     *       unsubscribeX()\r\n     *       unsubscribeY()\r\n     *     }\r\n     *   }, [])\r\n     *\r\n     *   return <motion.div style={{ x }} />\r\n     * }\r\n     * ```\r\n     *\r\n     * @param subscriber - A function that receives the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @deprecated\r\n     */\r\n    onChange(subscription) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\r\n        }\r\n        return this.on(\"change\", subscription);\r\n    }\r\n    on(eventName, callback) {\r\n        if (!this.events[eventName]) {\r\n            this.events[eventName] = new SubscriptionManager();\r\n        }\r\n        const unsubscribe = this.events[eventName].add(callback);\r\n        if (eventName === \"change\") {\r\n            return () => {\r\n                unsubscribe();\r\n                /**\r\n                 * If we have no more change listeners by the start\r\n                 * of the next frame, stop active animations.\r\n                 */\r\n                frame.read(() => {\r\n                    if (!this.events.change.getSize()) {\r\n                        this.stop();\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        return unsubscribe;\r\n    }\r\n    clearListeners() {\r\n        for (const eventManagers in this.events) {\r\n            this.events[eventManagers].clear();\r\n        }\r\n    }\r\n    /**\r\n     * Attaches a passive effect to the `MotionValue`.\r\n     *\r\n     * @internal\r\n     */\r\n    attach(passiveEffect, stopPassiveEffect) {\r\n        this.passiveEffect = passiveEffect;\r\n        this.stopPassiveEffect = stopPassiveEffect;\r\n    }\r\n    /**\r\n     * Sets the state of the `MotionValue`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```jsx\r\n     * const x = useMotionValue(0)\r\n     * x.set(10)\r\n     * ```\r\n     *\r\n     * @param latest - Latest value to set.\r\n     * @param render - Whether to notify render subscribers. Defaults to `true`\r\n     *\r\n     * @public\r\n     */\r\n    set(v, render = true) {\r\n        if (!render || !this.passiveEffect) {\r\n            this.updateAndNotify(v, render);\r\n        }\r\n        else {\r\n            this.passiveEffect(v, this.updateAndNotify);\r\n        }\r\n    }\r\n    setWithVelocity(prev, current, delta) {\r\n        this.set(current);\r\n        this.prev = undefined;\r\n        this.prevFrameValue = prev;\r\n        this.prevUpdatedAt = this.updatedAt - delta;\r\n    }\r\n    /**\r\n     * Set the state of the `MotionValue`, stopping any active animations,\r\n     * effects, and resets velocity to `0`.\r\n     */\r\n    jump(v) {\r\n        this.updateAndNotify(v);\r\n        this.prev = v;\r\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\r\n        this.stop();\r\n        if (this.stopPassiveEffect)\r\n            this.stopPassiveEffect();\r\n    }\r\n    /**\r\n     * Returns the latest state of `MotionValue`\r\n     *\r\n     * @returns - The latest state of `MotionValue`\r\n     *\r\n     * @public\r\n     */\r\n    get() {\r\n        if (collectMotionValues.current) {\r\n            collectMotionValues.current.push(this);\r\n        }\r\n        return this.current;\r\n    }\r\n    /**\r\n     * @public\r\n     */\r\n    getPrevious() {\r\n        return this.prev;\r\n    }\r\n    /**\r\n     * Returns the latest velocity of `MotionValue`\r\n     *\r\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n     *\r\n     * @public\r\n     */\r\n    getVelocity() {\r\n        const currentTime = time.now();\r\n        if (!this.canTrackVelocity ||\r\n            this.prevFrameValue === undefined ||\r\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\r\n            return 0;\r\n        }\r\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\r\n        // Casts because of parseFloat's poor typing\r\n        return velocityPerSecond(parseFloat(this.current) -\r\n            parseFloat(this.prevFrameValue), delta);\r\n    }\r\n    /**\r\n     * Registers a new animation to control this `MotionValue`. Only one\r\n     * animation can drive a `MotionValue` at one time.\r\n     *\r\n     * ```jsx\r\n     * value.start()\r\n     * ```\r\n     *\r\n     * @param animation - A function that starts the provided animation\r\n     *\r\n     * @internal\r\n     */\r\n    start(startAnimation) {\r\n        this.stop();\r\n        return new Promise((resolve) => {\r\n            this.hasAnimated = true;\r\n            this.animation = startAnimation(resolve);\r\n            if (this.events.animationStart) {\r\n                this.events.animationStart.notify();\r\n            }\r\n        }).then(() => {\r\n            if (this.events.animationComplete) {\r\n                this.events.animationComplete.notify();\r\n            }\r\n            this.clearAnimation();\r\n        });\r\n    }\r\n    /**\r\n     * Stop the currently active animation.\r\n     *\r\n     * @public\r\n     */\r\n    stop() {\r\n        if (this.animation) {\r\n            this.animation.stop();\r\n            if (this.events.animationCancel) {\r\n                this.events.animationCancel.notify();\r\n            }\r\n        }\r\n        this.clearAnimation();\r\n    }\r\n    /**\r\n     * Returns `true` if this value is currently animating.\r\n     *\r\n     * @public\r\n     */\r\n    isAnimating() {\r\n        return !!this.animation;\r\n    }\r\n    clearAnimation() {\r\n        delete this.animation;\r\n    }\r\n    /**\r\n     * Destroy and clean up subscribers to this `MotionValue`.\r\n     *\r\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n     * created a `MotionValue` via the `motionValue` function.\r\n     *\r\n     * @public\r\n     */\r\n    destroy() {\r\n        this.clearListeners();\r\n        this.stop();\r\n        if (this.stopPassiveEffect) {\r\n            this.stopPassiveEffect();\r\n        }\r\n    }\r\n}\r\nfunction motionValue(init, options) {\r\n    return new MotionValue(init, options);\r\n}\r\n\r\nexport { MotionValue, collectMotionValues, motionValue };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}