{"ast":null,"code":"import _objectSpread from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _wrapRegExp from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/wrapRegExp.js\";\nimport _createForOfIteratorHelper from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { _ as $cUVuN$_ } from \"@swc/helpers/_/_class_private_field_init\";\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ /*\r\n    * Copyright 2020 Adobe. All rights reserved.\r\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License. You may obtain a copy\r\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software distributed under\r\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n    * OF ANY KIND, either express or implied. See the License for the specific language\r\n    * governing permissions and limitations under the License.\r\n    */\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ /*\r\n    * Copyright 2020 Adobe. All rights reserved.\r\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n    * you may not use this file except in compliance with the License. You may obtain a copy\r\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n    *\r\n    * Unless required by applicable law or agreed to in writing, software distributed under\r\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n    * OF ANY KIND, either express or implied. See the License for the specific language\r\n    * governing permissions and limitations under the License.\r\n    */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);else return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\nvar $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  var y1 = year - 1;\n  var monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === \"BC\" ? 1 - year : year;\n}\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  var era = \"AD\";\n  if (year <= 0) {\n    era = \"BC\";\n    year = 1 - year;\n  }\n  return [era, year];\n}\nvar $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\nvar $3b62074eb05584b2$export$80ee6245ec4f29ec = /*#__PURE__*/function () {\n  function $3b62074eb05584b2$export$80ee6245ec4f29ec() {\n    _classCallCheck(this, $3b62074eb05584b2$export$80ee6245ec4f29ec);\n    this.identifier = \"gregory\";\n  }\n  _createClass($3b62074eb05584b2$export$80ee6245ec4f29ec, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var jd0 = jd;\n      var depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n      var quadricent = Math.floor(depoch / 146097);\n      var dqc = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);\n      var cent = Math.floor(dqc / 36524);\n      var dcent = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);\n      var quad = Math.floor(dcent / 1461);\n      var dquad = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);\n      var yindex = Math.floor(dquad / 365);\n      var extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n      var _$3b62074eb05584b2$ex = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear),\n        _$3b62074eb05584b2$ex2 = _slicedToArray(_$3b62074eb05584b2$ex, 2),\n        era = _$3b62074eb05584b2$ex2[0],\n        year = _$3b62074eb05584b2$ex2[1];\n      var yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n      var leapAdj = 2;\n      if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n      var month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n      var day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear(date) {\n      return 12;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      return 9999;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"BC\", \"AD\"];\n    }\n  }, {\n    key: \"isInverseEra\",\n    value: function isInverseEra(date) {\n      return date.era === \"BC\";\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      if (date.year <= 0) {\n        date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n        date.year = 1 - date.year;\n      }\n    }\n  }]);\n  return $3b62074eb05584b2$export$80ee6245ec4f29ec;\n}();\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nvar $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  \"001\": 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AR: 1,\n  AT: 1,\n  AU: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CN: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  var julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  var dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return (0, $11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  var ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(a, timeZone);\n  var tomorrow = a.add({\n    days: 1\n  });\n  var tomorrowMs = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\nvar $14e0f24ef4ac5c92$var$localTimeZone = null;\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  var dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\nvar $14e0f24ef4ac5c92$var$cachedRegions = new Map();\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    var region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  var part = locale.split(\"-\")[1];\n  return part === \"u\" ? undefined : part;\n}\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  var region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return region ? (0, $2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;\n}\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  var days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\nvar $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  var julian = date.calendar.toJulianDay(date);\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  var dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  var region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  var _ref = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0],\n    _ref2 = _slicedToArray(_ref, 2),\n    start = _ref2[0],\n    end = _ref2[1];\n  return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  var year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  var date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === \"UTC\") return 0;\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n  var _$11d87f3f76e88657$va = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone),\n    year = _$11d87f3f76e88657$va.year,\n    month = _$11d87f3f76e88657$va.month,\n    day = _$11d87f3f76e88657$va.day,\n    hour = _$11d87f3f76e88657$va.hour,\n    minute = _$11d87f3f76e88657$va.minute,\n    second = _$11d87f3f76e88657$va.second;\n  var utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\nvar $11d87f3f76e88657$var$formattersByTimeZone = new Map();\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  var formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat(\"en-US\", {\n      timeZone: timeZone,\n      hour12: false,\n      era: \"short\",\n      year: \"numeric\",\n      month: \"numeric\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\"\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n  var parts = formatter.formatToParts(new Date(ms));\n  var namedParts = {};\n  var _iterator = _createForOfIteratorHelper(parts),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n      if (part.type !== \"literal\") namedParts[part.type] = part.value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\nvar $11d87f3f76e88657$var$DAYMILLIS = 86400000;\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  var earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  var later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  var found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(function (absolute) {\n    return $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute);\n  });\n}\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  var parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  var disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"compatible\";\n  var dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === \"UTC\") return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    var _date = new Date();\n    var year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n    _date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    _date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return _date.getTime();\n  }\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  var offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  var offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  var valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case \"compatible\":\n    case \"earlier\":\n      return valid[0];\n    case \"later\":\n      return valid[valid.length - 1];\n    case \"reject\":\n      throw new RangeError(\"Multiple possible absolute times found\");\n  }\n  switch (disambiguation) {\n    case \"earlier\":\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case \"compatible\":\n    case \"later\":\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case \"reject\":\n      throw new RangeError(\"No such absolute time found\");\n  }\n}\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  var disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"compatible\";\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  var offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  var date = new Date(ms + offset);\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth() + 1;\n  var day = date.getUTCDate();\n  var hour = date.getUTCHours();\n  var minute = date.getUTCMinutes();\n  var second = date.getUTCSeconds();\n  var millisecond = date.getUTCMilliseconds();\n  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  var hour = 0,\n    minute = 0,\n    second = 0,\n    millisecond = 0;\n  if (\"timeZone\" in date) {\n    hour = date.hour;\n    minute = date.minute;\n    second = date.second;\n    millisecond = date.millisecond;\n  } else if (\"hour\" in date && !time) return date;\n  if (time) {\n    hour = time.hour;\n    minute = time.minute;\n    second = time.second;\n    millisecond = time.millisecond;\n  }\n  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  var calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  var copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n  return copy;\n}\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n  var ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  var ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nvar $735220c2d4774dd3$var$ONE_HOUR = 3600000;\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  var mutableDate = date.copy();\n  var days = \"hour\" in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  var maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;\n    var isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n  var maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _date_calendar_isInverseEra, _date_calendar;\n  if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n  date.year += years;\n}\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n  var monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  var inverseDuration = {};\n  for (var key in duration) if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n  return inverseDuration;\n}\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  var mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  var mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  var days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  var result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  var res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  var mutable = value.copy();\n  switch (field) {\n    case \"era\":\n      {\n        var eras = value.calendar.getEras();\n        var eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex];\n        // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n    case \"year\":\n      var _mutable_calendar_isInverseEra, _mutable_calendar;\n      if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n    case \"month\":\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"day\":\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  var mutable = value.copy();\n  switch (field) {\n    case \"hour\":\n      {\n        var hours = value.hour;\n        var min = 0;\n        var max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          var isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n    case \"minute\":\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"second\":\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    case \"millisecond\":\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n  return mutable;\n}\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max) {\n  var round = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    var div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n  return value;\n}\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  var ms;\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {\n    var _res = $735220c2d4774dd3$export$e16d8520af44a096((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      weeks: duration.weeks,\n      days: duration.days\n    });\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(_res, dateTime.timeZone);\n  } else\n    // Otherwise, preserve the offset of the original date.\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  var res = (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);\n}\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case \"hour\":\n      {\n        var min = 0;\n        var max = 23;\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          var isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n        // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n        var plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n        var minDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        var minAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")].filter(function (ms) {\n          return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day;\n        })[0];\n        var maxDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n        var maxAbsolute = [(0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"), (0, $11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")].filter(function (ms) {\n          return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day;\n        }).pop();\n        // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n        var ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n        var hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);\n        var remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;\n        ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;\n        // Now compute the new timezone offset, and convert the absolute time back to local time.\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n      }\n    case \"minute\":\n    case \"second\":\n    case \"millisecond\":\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      {\n        var res = $735220c2d4774dd3$export$d52ced6badfb9a4c((0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);\n        var _ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);\n        return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(_ms, dateTime.timeZone), dateTime.calendar);\n      }\n    default:\n      throw new Error(\"Unsupported field \" + field);\n  }\n}\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  var plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(dateTime);\n  var res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  var ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$b4a036af3fc0b032)((0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n\nvar $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nvar $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nvar $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nvar $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::?(\\d{2}))?)?\\[(.*?)\\]$/;\nvar $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::?(\\d{2}))?)|Z)$/;\nvar $fae977aafc393c5c$var$DATE_TIME_DURATION_RE = /*#__PURE__*/_wrapRegExp(/^((\\x2D)|\\+)?P((\\d*)Y)?((\\d*)M)?((\\d*)W)?((\\d*)D)?((T)((\\d*[.,]?\\d{1,9})H)?((\\d*[.,]?\\d{1,9})M)?((\\d*[.,]?\\d{1,9})S)?)?$/, {\n  negative: 2,\n  years: 4,\n  months: 6,\n  weeks: 8,\n  days: 10,\n  time: 12,\n  hours: 14,\n  minutes: 16,\n  seconds: 18\n});\nvar $fae977aafc393c5c$var$requiredDurationTimeGroups = [\"hours\", \"minutes\", \"seconds\"];\nvar $fae977aafc393c5c$var$requiredDurationGroups = [\"years\", \"months\", \"weeks\", \"days\"].concat($fae977aafc393c5c$var$requiredDurationTimeGroups);\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  var m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  var m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  var m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  var m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var plainDateTime = (0, $11d87f3f76e88657$export$b21e0b124e224484)(date);\n  var ms;\n  if (m[8]) {\n    var _m_;\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    ms = (0, $11d87f3f76e88657$export$bd4fb2bc8bb06fb)(date) - date.offset;\n    // Validate offset against parsed date.\n    var absolutes = (0, $11d87f3f76e88657$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(\"Offset \".concat($fae977aafc393c5c$var$offsetToString(date.offset), \" is invalid for \").concat($fae977aafc393c5c$export$4223de14708adc63(date), \" in \").concat(date.timeZone));\n  } else\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = (0, $11d87f3f76e88657$export$5107c82f94518f5c)((0, $11d87f3f76e88657$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n  return (0, $11d87f3f76e88657$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  var m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n  var date = new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var _m_;\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n  return (0, $11d87f3f76e88657$export$538b00033cc11c75)(date, timeZone);\n}\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  var val = Number(value);\n  if (val < min || val > max) throw new RangeError(\"Value out of range: \".concat(min, \" <= \").concat(val, \" <= \").concat(max));\n  return val;\n}\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return \"\".concat(String(time.hour).padStart(2, \"0\"), \":\").concat(String(time.minute).padStart(2, \"0\"), \":\").concat(String(time.second).padStart(2, \"0\")).concat(time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\");\n}\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  var gregorianDate = (0, $11d87f3f76e88657$export$b4a036af3fc0b032)(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  return \"\".concat(String(gregorianDate.year).padStart(4, \"0\"), \"-\").concat(String(gregorianDate.month).padStart(2, \"0\"), \"-\").concat(String(gregorianDate.day).padStart(2, \"0\"));\n}\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return \"\".concat($fae977aafc393c5c$export$60dfd74aa96791bd(date), \"T\").concat($fae977aafc393c5c$export$f59dee82248f5ad4(date));\n}\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  var sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n  offset = Math.abs(offset);\n  var offsetHours = Math.floor(offset / 3600000);\n  var offsetMinutes = offset % 3600000 / 60000;\n  return \"\".concat(sign).concat(String(offsetHours).padStart(2, \"0\"), \":\").concat(String(offsetMinutes).padStart(2, \"0\"));\n}\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return \"\".concat($fae977aafc393c5c$export$4223de14708adc63(date)).concat($fae977aafc393c5c$var$offsetToString(date.offset), \"[\").concat(date.timeZone, \"]\");\n}\nfunction $fae977aafc393c5c$export$ecae829bb3747ea6(value) {\n  var _match_groups, _match_groups1, _match_groups2, _match_groups3, _match_groups4, _match_groups5, _match_groups6, _match_groups7, _match_groups8;\n  var match = value.match($fae977aafc393c5c$var$DATE_TIME_DURATION_RE);\n  if (!match) throw new Error(\"Invalid ISO 8601 Duration string: \".concat(value));\n  var parseDurationGroup = function parseDurationGroup(group, isNegative, min, max) {\n    if (!group) return 0;\n    try {\n      var sign = isNegative ? -1 : 1;\n      return sign * $fae977aafc393c5c$var$parseNumber(group.replace(\",\", \".\"), min, max);\n    } catch (_unused) {\n      throw new Error(\"Invalid ISO 8601 Duration string: \".concat(value));\n    }\n  };\n  var isNegative = !!((_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.negative);\n  var hasRequiredGroups = $fae977aafc393c5c$var$requiredDurationGroups.some(function (group) {\n    var _match_groups;\n    return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n  });\n  if (!hasRequiredGroups) throw new Error(\"Invalid ISO 8601 Duration string: \".concat(value));\n  var durationStringIncludesTime = (_match_groups1 = match.groups) === null || _match_groups1 === void 0 ? void 0 : _match_groups1.time;\n  if (durationStringIncludesTime) {\n    var hasRequiredDurationTimeGroups = $fae977aafc393c5c$var$requiredDurationTimeGroups.some(function (group) {\n      var _match_groups;\n      return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n    });\n    if (!hasRequiredDurationTimeGroups) throw new Error(\"Invalid ISO 8601 Duration string: \".concat(value));\n  }\n  var duration = {\n    years: parseDurationGroup((_match_groups2 = match.groups) === null || _match_groups2 === void 0 ? void 0 : _match_groups2.years, isNegative, 0, 9999),\n    months: parseDurationGroup((_match_groups3 = match.groups) === null || _match_groups3 === void 0 ? void 0 : _match_groups3.months, isNegative, 0, 12),\n    weeks: parseDurationGroup((_match_groups4 = match.groups) === null || _match_groups4 === void 0 ? void 0 : _match_groups4.weeks, isNegative, 0, Infinity),\n    days: parseDurationGroup((_match_groups5 = match.groups) === null || _match_groups5 === void 0 ? void 0 : _match_groups5.days, isNegative, 0, 31),\n    hours: parseDurationGroup((_match_groups6 = match.groups) === null || _match_groups6 === void 0 ? void 0 : _match_groups6.hours, isNegative, 0, 23),\n    minutes: parseDurationGroup((_match_groups7 = match.groups) === null || _match_groups7 === void 0 ? void 0 : _match_groups7.minutes, isNegative, 0, 59),\n    seconds: parseDurationGroup((_match_groups8 = match.groups) === null || _match_groups8 === void 0 ? void 0 : _match_groups8.seconds, isNegative, 0, 59)\n  };\n  if (duration.hours !== undefined && duration.hours % 1 !== 0 && (duration.minutes || duration.seconds)) throw new Error(\"Invalid ISO 8601 Duration string: \".concat(value, \" - only the smallest unit can be fractional\"));\n  if (duration.minutes !== undefined && duration.minutes % 1 !== 0 && duration.seconds) throw new Error(\"Invalid ISO 8601 Duration string: \".concat(value, \" - only the smallest unit can be fractional\"));\n  return duration;\n}\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  var calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  var era;\n  if (typeof args[0] === \"string\") era = args.shift();else {\n    var eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  var year = args.shift();\n  var month = args.shift();\n  var day = args.shift();\n  return [calendar, era, year, month, day];\n}\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$99faa760c7908e4f = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$99faa760c7908e4f() {\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$99faa760c7908e4f);\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var _$35ea8db9cb2ccb90$va = $35ea8db9cb2ccb90$var$shiftArgs(args),\n      _$35ea8db9cb2ccb90$va2 = _slicedToArray(_$35ea8db9cb2ccb90$va, 5),\n      calendar = _$35ea8db9cb2ccb90$va2[0],\n      era = _$35ea8db9cb2ccb90$va2[1],\n      year = _$35ea8db9cb2ccb90$va2[2],\n      month = _$35ea8db9cb2ccb90$va2[3],\n      day = _$35ea8db9cb2ccb90$va2[4];\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$99faa760c7908e4f, [{\n    key: \"copy\",\n    value: /** Returns a copy of this date. */function copy() {\n      if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n    }\n    /** Returns a new `CalendarDate` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields) {\n      return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);\n    }\n    /**\r\n    * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\r\n    * When the resulting value reaches the limits of the field, it wraps around.\r\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  }, {\n    key: \"toDate\",\n    value: function toDate(timeZone) {\n      return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$60dfd74aa96791bd)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      return (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$99faa760c7908e4f;\n}();\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$680ea196effce5f = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$680ea196effce5f() {\n    var hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var minute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var millisecond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$680ea196effce5f);\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type1, {\n      writable: true,\n      value: void 0\n    });\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    (0, $735220c2d4774dd3$export$7555de1e070510cb)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$680ea196effce5f, [{\n    key: \"copy\",\n    value: /** Returns a copy of this time. */function copy() {\n      return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `Time` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);\n    }\n    /** Returns a new `Time` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);\n    }\n    /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields) {\n      return (0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);\n    }\n    /**\r\n    * Returns a new `Time` with the given field adjusted by a specified amount.\r\n    * When the resulting value reaches the limits of the field, it wraps around.\r\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n    /** Converts the time to an ISO 8601 formatted string. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$f59dee82248f5ad4)(this);\n    }\n    /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$680ea196effce5f;\n}();\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$ca871e8dbb80966f = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$ca871e8dbb80966f() {\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$ca871e8dbb80966f);\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type2, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    var _$35ea8db9cb2ccb90$va3 = $35ea8db9cb2ccb90$var$shiftArgs(args),\n      _$35ea8db9cb2ccb90$va4 = _slicedToArray(_$35ea8db9cb2ccb90$va3, 5),\n      calendar = _$35ea8db9cb2ccb90$va4[0],\n      era = _$35ea8db9cb2ccb90$va4[1],\n      year = _$35ea8db9cb2ccb90$va4[2],\n      month = _$35ea8db9cb2ccb90$va4[3],\n      day = _$35ea8db9cb2ccb90$va4[4];\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$ca871e8dbb80966f, [{\n    key: \"copy\",\n    value: /** Returns a copy of this date. */function copy() {\n      if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields) {\n      return (0, $735220c2d4774dd3$export$adaa4cf7ef1b65be)((0, $735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);\n    }\n    /**\r\n    * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\r\n    * When the resulting value reaches the limits of the field, it wraps around.\r\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      switch (field) {\n        case \"era\":\n        case \"year\":\n        case \"month\":\n        case \"day\":\n          return (0, $735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);\n        default:\n          return (0, $735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);\n      }\n    }\n    /** Converts the date to a native JavaScript Date object in the given time zone. */\n  }, {\n    key: \"toDate\",\n    value: function toDate(timeZone, disambiguation) {\n      return (0, $11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$4223de14708adc63)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      var res = (0, $14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);\n      if (res === 0) return (0, $14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, (0, $11d87f3f76e88657$export$b21e0b124e224484)(b));\n      return res;\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$ca871e8dbb80966f;\n}();\nvar\n// This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/new WeakMap();\nvar $35ea8db9cb2ccb90$export$d3b7288e7994edea = /*#__PURE__*/function () {\n  function $35ea8db9cb2ccb90$export$d3b7288e7994edea() {\n    _classCallCheck(this, $35ea8db9cb2ccb90$export$d3b7288e7994edea);\n    (0, $cUVuN$_)(this, $35ea8db9cb2ccb90$var$_type3, {\n      writable: true,\n      value: void 0\n    });\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    var _$35ea8db9cb2ccb90$va5 = $35ea8db9cb2ccb90$var$shiftArgs(args),\n      _$35ea8db9cb2ccb90$va6 = _slicedToArray(_$35ea8db9cb2ccb90$va5, 5),\n      calendar = _$35ea8db9cb2ccb90$va6[0],\n      era = _$35ea8db9cb2ccb90$va6[1],\n      year = _$35ea8db9cb2ccb90$va6[2],\n      month = _$35ea8db9cb2ccb90$va6[3],\n      day = _$35ea8db9cb2ccb90$va6[4];\n    var timeZone = args.shift();\n    var offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(this);\n  }\n  _createClass($35ea8db9cb2ccb90$export$d3b7288e7994edea, [{\n    key: \"copy\",\n    value: /** Returns a copy of this date. */function copy() {\n      if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  }, {\n    key: \"add\",\n    value: function add(duration) {\n      return (0, $735220c2d4774dd3$export$96b1d28349274637)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  }, {\n    key: \"subtract\",\n    value: function subtract(duration) {\n      return (0, $735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  }, {\n    key: \"set\",\n    value: function set(fields, disambiguation) {\n      return (0, $735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);\n    }\n    /**\r\n    * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\r\n    * When the resulting value reaches the limits of the field, it wraps around.\r\n    */\n  }, {\n    key: \"cycle\",\n    value: function cycle(field, amount, options) {\n      return (0, $735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object. */\n  }, {\n    key: \"toDate\",\n    value: function toDate() {\n      return (0, $11d87f3f76e88657$export$83aac07b4c37b25)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, $fae977aafc393c5c$export$bf79f1ebf4b18792)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string in UTC. */\n  }, {\n    key: \"toAbsoluteString\",\n    value: function toAbsoluteString() {\n      return this.toDate().toISOString();\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  }, {\n    key: \"compare\",\n    value: function compare(b) {\n      // TODO: Is this a bad idea??\n      return this.toDate().getTime() - (0, $11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n    }\n  }]);\n  return $35ea8db9cb2ccb90$export$d3b7288e7994edea;\n}();\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nvar $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nvar $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nvar $62225008020f0a13$var$ERA_NAMES = [\"meiji\", \"taisho\", \"showa\", \"heisei\", \"reiwa\"];\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  var idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 3),\n      year = _ref4[0],\n      month = _ref4[1],\n      day = _ref4[2];\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\nfunction $62225008020f0a13$var$toGregorian(date) {\n  var eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\nvar $62225008020f0a13$export$b746ab2b60cdffbf = /*#__PURE__*/function (_ref5) {\n  _inherits($62225008020f0a13$export$b746ab2b60cdffbf, _ref5);\n  var _super = _createSuper($62225008020f0a13$export$b746ab2b60cdffbf);\n  function $62225008020f0a13$export$b746ab2b60cdffbf() {\n    var _this;\n    _classCallCheck(this, $62225008020f0a13$export$b746ab2b60cdffbf);\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.identifier = \"japanese\";\n    return _this;\n  }\n  _createClass($62225008020f0a13$export$b746ab2b60cdffbf, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var date = _get(_getPrototypeOf($62225008020f0a13$export$b746ab2b60cdffbf.prototype), \"fromJulianDay\", this).call(this, jd);\n      var era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return _get(_getPrototypeOf($62225008020f0a13$export$b746ab2b60cdffbf.prototype), \"toJulianDay\", this).call(this, $62225008020f0a13$var$toGregorian(date));\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      var gregorianDate = $62225008020f0a13$var$toGregorian(date);\n      var era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n      if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n        date.era = $62225008020f0a13$var$ERA_NAMES[era];\n        date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n      }\n      // Constrain in case we went before the first supported era.\n      this.constrainDate(date);\n    }\n  }, {\n    key: \"constrainDate\",\n    value: function constrainDate(date) {\n      var idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n      var end = $62225008020f0a13$var$ERA_END_DATES[idx];\n      if (end != null) {\n        var _end = _slicedToArray(end, 3),\n          endYear = _end[0],\n          endMonth = _end[1],\n          endDay = _end[2];\n        // Constrain the year to the maximum possible value in the era.\n        // Then constrain the month and day fields within that.\n        var maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n        date.year = Math.max(1, Math.min(maxYear, date.year));\n        if (date.year === maxYear) {\n          date.month = Math.min(endMonth, date.month);\n          if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n        }\n      }\n      if (date.year === 1 && idx >= 0) {\n        var _$62225008020f0a13$va = _slicedToArray($62225008020f0a13$var$ERA_START_DATES[idx], 3),\n          startMonth = _$62225008020f0a13$va[1],\n          startDay = _$62225008020f0a13$va[2];\n        date.month = Math.max(startMonth, date.month);\n        if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n      }\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return $62225008020f0a13$var$ERA_NAMES;\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      // Get the number of years in the era, taking into account the date's month and day fields.\n      var era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n      var cur = $62225008020f0a13$var$ERA_START_DATES[era];\n      var next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n      if (next == null)\n        // 9999 gregorian is the maximum year allowed.\n        return 9999 - cur[0] + 1;\n      var years = next[0] - cur[0];\n      if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n      return years;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return _get(_getPrototypeOf($62225008020f0a13$export$b746ab2b60cdffbf.prototype), \"getDaysInMonth\", this).call(this, $62225008020f0a13$var$toGregorian(date));\n    }\n  }, {\n    key: \"getMinimumMonthInYear\",\n    value: function getMinimumMonthInYear(date) {\n      var start = $62225008020f0a13$var$getMinimums(date);\n      return start ? start[1] : 1;\n    }\n  }, {\n    key: \"getMinimumDayInMonth\",\n    value: function getMinimumDayInMonth(date) {\n      var start = $62225008020f0a13$var$getMinimums(date);\n      return start && date.month === start[1] ? start[2] : 1;\n    }\n  }]);\n  return $62225008020f0a13$export$b746ab2b60cdffbf;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    var idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nvar $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\nvar $8d73d47422ca7302$export$42d20a78301dee44 = /*#__PURE__*/function (_ref6) {\n  _inherits($8d73d47422ca7302$export$42d20a78301dee44, _ref6);\n  var _super2 = _createSuper($8d73d47422ca7302$export$42d20a78301dee44);\n  function $8d73d47422ca7302$export$42d20a78301dee44() {\n    var _this2;\n    _classCallCheck(this, $8d73d47422ca7302$export$42d20a78301dee44);\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    _this2.identifier = \"buddhist\";\n    return _this2;\n  }\n  _createClass($8d73d47422ca7302$export$42d20a78301dee44, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var gregorianDate = _get(_getPrototypeOf($8d73d47422ca7302$export$42d20a78301dee44.prototype), \"fromJulianDay\", this).call(this, jd);\n      var year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return _get(_getPrototypeOf($8d73d47422ca7302$export$42d20a78301dee44.prototype), \"toJulianDay\", this).call(this, $8d73d47422ca7302$var$toGregorian(date));\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"BE\"];\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return _get(_getPrototypeOf($8d73d47422ca7302$export$42d20a78301dee44.prototype), \"getDaysInMonth\", this).call(this, $8d73d47422ca7302$var$toGregorian(date));\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate() {}\n  }]);\n  return $8d73d47422ca7302$export$42d20a78301dee44;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  var _ref7 = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START),\n    _ref8 = _slicedToArray(_ref7, 2),\n    era = _ref8[0],\n    year = _ref8[1];\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nvar $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === \"minguo\" ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  var y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return [\"minguo\", y];else return [\"before_minguo\", 1 - y];\n}\nvar $5f31bd6f0c8940b2$export$65e01080afcb0799 = /*#__PURE__*/function (_ref9) {\n  _inherits($5f31bd6f0c8940b2$export$65e01080afcb0799, _ref9);\n  var _super3 = _createSuper($5f31bd6f0c8940b2$export$65e01080afcb0799);\n  function $5f31bd6f0c8940b2$export$65e01080afcb0799() {\n    var _this3;\n    _classCallCheck(this, $5f31bd6f0c8940b2$export$65e01080afcb0799);\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    _this3 = _super3.call.apply(_super3, [this].concat(args));\n    _this3.identifier = \"roc\" // Republic of China\n    ;\n    return _this3;\n  }\n  _createClass($5f31bd6f0c8940b2$export$65e01080afcb0799, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var date = _get(_getPrototypeOf($5f31bd6f0c8940b2$export$65e01080afcb0799.prototype), \"fromJulianDay\", this).call(this, jd);\n      var extendedYear = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n      var _$5f31bd6f0c8940b2$va = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear),\n        _$5f31bd6f0c8940b2$va2 = _slicedToArray(_$5f31bd6f0c8940b2$va, 2),\n        era = _$5f31bd6f0c8940b2$va2[0],\n        year = _$5f31bd6f0c8940b2$va2[1];\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return _get(_getPrototypeOf($5f31bd6f0c8940b2$export$65e01080afcb0799.prototype), \"toJulianDay\", this).call(this, $5f31bd6f0c8940b2$var$toGregorian(date));\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"before_minguo\", \"minguo\"];\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      var _$5f31bd6f0c8940b2$va3 = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date)),\n        _$5f31bd6f0c8940b2$va4 = _slicedToArray(_$5f31bd6f0c8940b2$va3, 2),\n        era = _$5f31bd6f0c8940b2$va4[0],\n        year = _$5f31bd6f0c8940b2$va4[1];\n      date.era = era;\n      date.year = year;\n    }\n  }, {\n    key: \"isInverseEra\",\n    value: function isInverseEra(date) {\n      return date.era === \"before_minguo\";\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return _get(_getPrototypeOf($5f31bd6f0c8940b2$export$65e01080afcb0799.prototype), \"getDaysInMonth\", this).call(this, $5f31bd6f0c8940b2$var$toGregorian(date));\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      return date.era === \"before_minguo\" ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n    }\n  }]);\n  return $5f31bd6f0c8940b2$export$65e01080afcb0799;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  var _ref10 = (0, $3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date)),\n    _ref11 = _slicedToArray(_ref10, 2),\n    era = _ref11[0],\n    year = _ref11[1];\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nvar $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  var y0 = year > 0 ? year - 474 : year - 473;\n  var y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  var y0 = year > 0 ? year - 474 : year - 473;\n  var y1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(y0, 2820) + 474;\n  var offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\nvar $f3ed2e4472ae7e25$export$37fccdbfd14c5939 = /*#__PURE__*/function () {\n  function $f3ed2e4472ae7e25$export$37fccdbfd14c5939() {\n    _classCallCheck(this, $f3ed2e4472ae7e25$export$37fccdbfd14c5939);\n    this.identifier = \"persian\";\n  }\n  _createClass($f3ed2e4472ae7e25$export$37fccdbfd14c5939, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n      var n2820 = Math.floor(d0 / 1029983);\n      var d1 = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(d0, 1029983);\n      var y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n      var year = 474 + 2820 * n2820 + y2820;\n      if (year <= 0) year--;\n      var yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n      var month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n      var day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear() {\n      return 12;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      if (date.month <= 6) return 31;\n      if (date.month <= 11) return 30;\n      return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AP\"];\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9378-10-10 persian is 9999-12-31 gregorian.\n      // Round down to 9377 to set the maximum full year.\n      return 9377;\n    }\n  }]);\n  return $f3ed2e4472ae7e25$export$37fccdbfd14c5939;\n}();\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n// Starts in 78 AD,\nvar $82c358003bdda0a8$var$INDIAN_ERA_START = 78;\n// The Indian year starts 80 days later than the Gregorian year.\nvar $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\nvar $82c358003bdda0a8$export$39f31c639fa15726 = /*#__PURE__*/function (_ref12) {\n  _inherits($82c358003bdda0a8$export$39f31c639fa15726, _ref12);\n  var _super4 = _createSuper($82c358003bdda0a8$export$39f31c639fa15726);\n  function $82c358003bdda0a8$export$39f31c639fa15726() {\n    var _this4;\n    _classCallCheck(this, $82c358003bdda0a8$export$39f31c639fa15726);\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    _this4 = _super4.call.apply(_super4, [this].concat(args));\n    _this4.identifier = \"indian\";\n    return _this4;\n  }\n  _createClass($82c358003bdda0a8$export$39f31c639fa15726, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      // Gregorian date for Julian day\n      var date = _get(_getPrototypeOf($82c358003bdda0a8$export$39f31c639fa15726.prototype), \"fromJulianDay\", this).call(this, jd);\n      // Year in Saka era\n      var indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;\n      // Day number in Gregorian year (starting from 0)\n      var yDay = jd - (0, $3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);\n      var leapMonth;\n      if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n        //  Day is at the end of the preceding Saka year\n        indianYear--;\n        // Days in leapMonth this year, previous Gregorian year\n        leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n        yDay += leapMonth + 155 + 90 + 10;\n      } else {\n        // Days in leapMonth this year\n        leapMonth = (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n        yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n      }\n      var indianMonth;\n      var indianDay;\n      if (yDay < leapMonth) {\n        indianMonth = 1;\n        indianDay = yDay + 1;\n      } else {\n        var mDay = yDay - leapMonth;\n        if (mDay < 155) {\n          indianMonth = Math.floor(mDay / 31) + 2;\n          indianDay = mDay % 31 + 1;\n        } else {\n          mDay -= 155;\n          indianMonth = Math.floor(mDay / 30) + 7;\n          indianDay = mDay % 30 + 1;\n        }\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n      var _ref13 = (0, $3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear),\n        _ref14 = _slicedToArray(_ref13, 2),\n        era = _ref14[0],\n        year = _ref14[1];\n      var leapMonth;\n      var jd;\n      if ((0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {\n        leapMonth = 31;\n        jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);\n      } else {\n        leapMonth = 30;\n        jd = (0, $3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);\n      }\n      if (date.month === 1) return jd + date.day - 1;\n      jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n      if (date.month >= 8) jd += (date.month - 7) * 30;\n      jd += date.day - 1;\n      return jd;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      if (date.month === 1 && (0, $3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n      if (date.month >= 2 && date.month <= 6) return 31;\n      return 30;\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9999-12-31 gregorian is 9920-10-10 indian.\n      // Round down to 9919 for the last full year.\n      return 9919;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"saka\"];\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate() {}\n  }]);\n  return $82c358003bdda0a8$export$39f31c639fa15726;\n}((0, $3b62074eb05584b2$export$80ee6245ec4f29ec));\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nvar $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nvar $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nvar $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nvar $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  var year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  var month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  var day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);\n}\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\nvar $f2f3e0e3a817edbd$export$2066795aadd37bfc = /*#__PURE__*/function () {\n  function $f2f3e0e3a817edbd$export$2066795aadd37bfc() {\n    _classCallCheck(this, $f2f3e0e3a817edbd$export$2066795aadd37bfc);\n    this.identifier = \"islamic-civil\";\n  }\n  _createClass($f2f3e0e3a817edbd$export$2066795aadd37bfc, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      var length = 29 + date.month % 2;\n      if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n      return length;\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear() {\n      return 12;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9999 gregorian\n      return 9665;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AH\"];\n    }\n  }]);\n  return $f2f3e0e3a817edbd$export$2066795aadd37bfc;\n}();\nvar $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 = /*#__PURE__*/function (_$f2f3e0e3a817edbd$ex) {\n  _inherits($f2f3e0e3a817edbd$export$37f0887f2f9d22f7, _$f2f3e0e3a817edbd$ex);\n  var _super5 = _createSuper($f2f3e0e3a817edbd$export$37f0887f2f9d22f7);\n  function $f2f3e0e3a817edbd$export$37f0887f2f9d22f7() {\n    var _this5;\n    _classCallCheck(this, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7);\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    _this5 = _super5.call.apply(_super5, [this].concat(args));\n    _this5.identifier = \"islamic-tbla\";\n    return _this5;\n  }\n  _createClass($f2f3e0e3a817edbd$export$37f0887f2f9d22f7, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n    }\n  }]);\n  return $f2f3e0e3a817edbd$export$37f0887f2f9d22f7;\n}($f2f3e0e3a817edbd$export$2066795aadd37bfc); // Generated by scripts/generate-umalqura.js\nvar $f2f3e0e3a817edbd$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nvar $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nvar $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  var idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  var mask = 0x01 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  var day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n  for (var i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n  return day;\n}\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\nvar $f2f3e0e3a817edbd$export$5baab4758c231076 = /*#__PURE__*/function (_$f2f3e0e3a817edbd$ex2) {\n  _inherits($f2f3e0e3a817edbd$export$5baab4758c231076, _$f2f3e0e3a817edbd$ex2);\n  var _super6 = _createSuper($f2f3e0e3a817edbd$export$5baab4758c231076);\n  function $f2f3e0e3a817edbd$export$5baab4758c231076() {\n    var _this6;\n    _classCallCheck(this, $f2f3e0e3a817edbd$export$5baab4758c231076);\n    _this6 = _super6.call(this);\n    _this6.identifier = \"islamic-umalqura\";\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), function (c) {\n      return c.charCodeAt(0);\n    }).buffer);\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      var yearStart = 0;\n      for (var year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n        for (var i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n    return _this6;\n  }\n  _createClass($f2f3e0e3a817edbd$export$5baab4758c231076, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n      var startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n      var endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n      if (days < startDays || days > endDays) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"fromJulianDay\", this).call(this, jd);else {\n        var y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n        var m = 1;\n        var d = 1;\n        while (d > 0) {\n          y++;\n          d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n          var yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n          if (d === yearLength) {\n            m = 12;\n            break;\n          } else if (d < yearLength) {\n            var monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n            m = 1;\n            while (d > monthLength) {\n              d -= monthLength;\n              m++;\n              monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n            }\n            break;\n          }\n        }\n        return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n      }\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"toJulianDay\", this).call(this, date);\n      return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"getDaysInMonth\", this).call(this, date);\n      return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return _get(_getPrototypeOf($f2f3e0e3a817edbd$export$5baab4758c231076.prototype), \"getDaysInYear\", this).call(this, date);\n      return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n    }\n  }]);\n  return $f2f3e0e3a817edbd$export$5baab4758c231076;\n}($f2f3e0e3a817edbd$export$2066795aadd37bfc);\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nvar $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nvar $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nvar $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nvar $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nvar $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  var months = Math.floor((235 * year - 234) / 19);\n  var parts = 12084 + 13753 * months;\n  var day = months * 29 + Math.floor(parts / 25920);\n  if ((0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  var last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  var present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  var next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  var yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n    case 354:\n      return 1;\n    // normal\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  var yearType = $7c5f6fbf42389787$var$getYearType(year);\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) return yearType === 2 ? 30 : 29;\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) return yearType === 0 ? 29 : 30;\n  // Adar I only exists in leap years\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\nvar $7c5f6fbf42389787$export$ca405048b8fb5af = /*#__PURE__*/function () {\n  function $7c5f6fbf42389787$export$ca405048b8fb5af() {\n    _classCallCheck(this, $7c5f6fbf42389787$export$ca405048b8fb5af);\n    this.identifier = \"hebrew\";\n  }\n  _createClass($7c5f6fbf42389787$export$ca405048b8fb5af, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n      var m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n      var year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n      var ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n      var dayOfYear = Math.floor(d - ys);\n      // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n      while (dayOfYear < 1) {\n        year--;\n        ys = $7c5f6fbf42389787$var$startOfYear(year);\n        dayOfYear = Math.floor(d - ys);\n      }\n      // Now figure out which month we're in, and the date within that month\n      var month = 1;\n      var monthStart = 0;\n      while (monthStart < dayOfYear) {\n        monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n        month++;\n      }\n      month--;\n      monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      var day = dayOfYear - monthStart;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n      for (var month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n      return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear(date) {\n      return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 6239 gregorian\n      return 9999;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AM\"];\n    }\n  }, {\n    key: \"balanceYearMonth\",\n    value: function balanceYearMonth(date, previousDate) {\n      // Keep date in the same month when switching between leap years and non leap years\n      if (previousDate.year !== date.year) {\n        if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n      }\n    }\n  }]);\n  return $7c5f6fbf42389787$export$ca405048b8fb5af;\n}();\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\nvar $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nvar $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nvar $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1 // number of days from months (1 based)\n  ) + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {\n  var year = Math.floor(4 * (jd - epoch) / 1461);\n  var month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  var day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0)\n    // not intercalary month\n    return 30;else\n    // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\nvar $b956b2d7a6cf451f$export$26ba6eab5e20cd7d = /*#__PURE__*/function () {\n  function $b956b2d7a6cf451f$export$26ba6eab5e20cd7d() {\n    _classCallCheck(this, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d);\n    this.identifier = \"ethiopic\";\n  }\n  _createClass($b956b2d7a6cf451f$export$26ba6eab5e20cd7d, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var _$b956b2d7a6cf451f$va = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd),\n        _$b956b2d7a6cf451f$va2 = _slicedToArray(_$b956b2d7a6cf451f$va, 3),\n        year = _$b956b2d7a6cf451f$va2[0],\n        month = _$b956b2d7a6cf451f$va2[1],\n        day = _$b956b2d7a6cf451f$va2[2];\n      var era = \"AM\";\n      if (year <= 0) {\n        era = \"AA\";\n        year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var year = date.year;\n      if (date.era === \"AA\") year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n      return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);\n    }\n  }, {\n    key: \"getMonthsInYear\",\n    value: function getMonthsInYear() {\n      return 13;\n    }\n  }, {\n    key: \"getDaysInYear\",\n    value: function getDaysInYear(date) {\n      return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n      // Round down to 9991 for the last full year.\n      // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n      return date.era === \"AA\" ? 9999 : 9991;\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AA\", \"AM\"];\n    }\n  }]);\n  return $b956b2d7a6cf451f$export$26ba6eab5e20cd7d;\n}();\nvar $b956b2d7a6cf451f$export$d72e0c37005a4914 = /*#__PURE__*/function (_$b956b2d7a6cf451f$ex) {\n  _inherits($b956b2d7a6cf451f$export$d72e0c37005a4914, _$b956b2d7a6cf451f$ex);\n  var _super7 = _createSuper($b956b2d7a6cf451f$export$d72e0c37005a4914);\n  function $b956b2d7a6cf451f$export$d72e0c37005a4914() {\n    var _this7;\n    _classCallCheck(this, $b956b2d7a6cf451f$export$d72e0c37005a4914);\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    _this7 = _super7.call.apply(_super7, [this].concat(args));\n    _this7.identifier = \"ethioaa\" // also known as 'ethiopic-amete-alem' in ICU\n    ;\n    return _this7;\n  }\n  _createClass($b956b2d7a6cf451f$export$d72e0c37005a4914, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var _$b956b2d7a6cf451f$va3 = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd),\n        _$b956b2d7a6cf451f$va4 = _slicedToArray(_$b956b2d7a6cf451f$va3, 3),\n        year = _$b956b2d7a6cf451f$va4[0],\n        month = _$b956b2d7a6cf451f$va4[1],\n        day = _$b956b2d7a6cf451f$va4[2];\n      year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"AA\"];\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra() {\n      // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n      return 9999;\n    }\n  }]);\n  return $b956b2d7a6cf451f$export$d72e0c37005a4914;\n}($b956b2d7a6cf451f$export$26ba6eab5e20cd7d);\nvar $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 = /*#__PURE__*/function (_$b956b2d7a6cf451f$ex2) {\n  _inherits($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1, _$b956b2d7a6cf451f$ex2);\n  var _super8 = _createSuper($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1);\n  function $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1() {\n    var _this8;\n    _classCallCheck(this, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1);\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    _this8 = _super8.call.apply(_super8, [this].concat(args));\n    _this8.identifier = \"coptic\";\n    return _this8;\n  }\n  _createClass($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1, [{\n    key: \"fromJulianDay\",\n    value: function fromJulianDay(jd) {\n      var _$b956b2d7a6cf451f$va5 = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd),\n        _$b956b2d7a6cf451f$va6 = _slicedToArray(_$b956b2d7a6cf451f$va5, 3),\n        year = _$b956b2d7a6cf451f$va6[0],\n        month = _$b956b2d7a6cf451f$va6[1],\n        day = _$b956b2d7a6cf451f$va6[2];\n      var era = \"CE\";\n      if (year <= 0) {\n        era = \"BCE\";\n        year = 1 - year;\n      }\n      return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n  }, {\n    key: \"toJulianDay\",\n    value: function toJulianDay(date) {\n      var year = date.year;\n      if (date.era === \"BCE\") year = 1 - year;\n      return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n    }\n  }, {\n    key: \"getDaysInMonth\",\n    value: function getDaysInMonth(date) {\n      var year = date.year;\n      if (date.era === \"BCE\") year = 1 - year;\n      return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n    }\n  }, {\n    key: \"isInverseEra\",\n    value: function isInverseEra(date) {\n      return date.era === \"BCE\";\n    }\n  }, {\n    key: \"balanceDate\",\n    value: function balanceDate(date) {\n      if (date.year <= 0) {\n        date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n        date.year = 1 - date.year;\n      }\n    }\n  }, {\n    key: \"getEras\",\n    value: function getEras() {\n      return [\"BCE\", \"CE\"];\n    }\n  }, {\n    key: \"getYearsInEra\",\n    value: function getYearsInEra(date) {\n      // 9999-12-30 gregorian is 9716-02-20 coptic.\n      // Round down to 9715 for the last full year.\n      // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n      return date.era === \"BCE\" ? 9999 : 9715;\n    }\n  }]);\n  return $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1;\n}($b956b2d7a6cf451f$export$26ba6eab5e20cd7d);\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case \"buddhist\":\n      return new (0, $8d73d47422ca7302$export$42d20a78301dee44)();\n    case \"ethiopic\":\n      return new (0, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();\n    case \"ethioaa\":\n      return new (0, $b956b2d7a6cf451f$export$d72e0c37005a4914)();\n    case \"coptic\":\n      return new (0, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();\n    case \"hebrew\":\n      return new (0, $7c5f6fbf42389787$export$ca405048b8fb5af)();\n    case \"indian\":\n      return new (0, $82c358003bdda0a8$export$39f31c639fa15726)();\n    case \"islamic-civil\":\n      return new (0, $f2f3e0e3a817edbd$export$2066795aadd37bfc)();\n    case \"islamic-tbla\":\n      return new (0, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();\n    case \"islamic-umalqura\":\n      return new (0, $f2f3e0e3a817edbd$export$5baab4758c231076)();\n    case \"japanese\":\n      return new (0, $62225008020f0a13$export$b746ab2b60cdffbf)();\n    case \"persian\":\n      return new (0, $f3ed2e4472ae7e25$export$37fccdbfd14c5939)();\n    case \"roc\":\n      return new (0, $5f31bd6f0c8940b2$export$65e01080afcb0799)();\n    case \"gregory\":\n    default:\n      return new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)();\n  }\n}\n\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\nvar $fb18d541ea1ad717$var$formatterCache = new Map();\nvar $fb18d541ea1ad717$export$ad991b66133851cf = /*#__PURE__*/function () {\n  function $fb18d541ea1ad717$export$ad991b66133851cf(locale) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, $fb18d541ea1ad717$export$ad991b66133851cf);\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n  _createClass($fb18d541ea1ad717$export$ad991b66133851cf, [{\n    key: \"format\",\n    value: /** Formats a date as a string according to the locale and format options passed to the constructor. */function format(value) {\n      return this.formatter.format(value);\n    }\n    /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value) {\n      return this.formatter.formatToParts(value);\n    }\n    /** Formats a date range as a string. */\n  }, {\n    key: \"formatRange\",\n    value: function formatRange(start, end) {\n      // @ts-ignore\n      if (typeof this.formatter.formatRange === \"function\")\n        // @ts-ignore\n        return this.formatter.formatRange(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      // Very basic fallback for old browsers.\n      return \"\".concat(this.formatter.format(start), \" \\u2013 \").concat(this.formatter.format(end));\n    }\n    /** Formats a date range as an array of parts. */\n  }, {\n    key: \"formatRangeToParts\",\n    value: function formatRangeToParts(start, end) {\n      // @ts-ignore\n      if (typeof this.formatter.formatRangeToParts === \"function\")\n        // @ts-ignore\n        return this.formatter.formatRangeToParts(start, end);\n      if (end < start) throw new RangeError(\"End date must be >= start date\");\n      var startParts = this.formatter.formatToParts(start);\n      var endParts = this.formatter.formatToParts(end);\n      return [].concat(_toConsumableArray(startParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"startRange\"\n        });\n      })), [{\n        type: \"literal\",\n        value: \" \\u2013 \",\n        source: \"shared\"\n      }], _toConsumableArray(endParts.map(function (p) {\n        return _objectSpread(_objectSpread({}, p), {}, {\n          source: \"endRange\"\n        });\n      })));\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      var resolvedOptions = this.formatter.resolvedOptions();\n      if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n        if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n        resolvedOptions.hourCycle = this.resolvedHourCycle;\n        resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n      }\n      // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n      // https://bugs.webkit.org/show_bug.cgi?id=241564\n      if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n      return resolvedOptions;\n    }\n  }]);\n  return $fb18d541ea1ad717$export$ad991b66133851cf;\n}(); // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nvar $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: \"h11\"\n  },\n  false: {}\n};\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === \"boolean\" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = _objectSpread({}, options);\n    var pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n    var defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n  var cacheKey = locale + (options ? Object.entries(options).sort(function (a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }).join() : \"\");\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  var numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\nvar $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === \"24\";\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\nvar $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n    hour: \"numeric\",\n    hour12: false\n  }).resolvedOptions().hourCycle === \"h12\";\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined;\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n  locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n  var formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, _objectSpread(_objectSpread({}, options), {}, {\n    timeZone: undefined // use local timezone\n  }));\n\n  var min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(function (p) {\n    return p.type === \"hour\";\n  }).value, 10);\n  var max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(function (p) {\n    return p.type === \"hour\";\n  }).value, 10);\n  if (min === 0 && max === 23) return \"h23\";\n  if (min === 24 && max === 23) return \"h24\";\n  if (min === 0 && max === 11) return \"h11\";\n  if (min === 12 && max === 11) return \"h12\";\n  throw new Error(\"Unexpected hour cycle result\");\n}\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fae977aafc393c5c$export$ecae829bb3747ea6 as parseDuration, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"names":["$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","Math","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","date","era","$35ea8db9cb2ccb90$export$99faa760c7908e4f","calendar","year","month","day","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","hour","minute","second","millisecond","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","identifier","fromJulianDay","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","_$3b62074eb05584b2$ex","_$3b62074eb05584b2$ex2","_slicedToArray","yearDay","leapAdj","key","value","toJulianDay","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","isInverseEra","balanceDate","$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AR","AT","AU","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CN","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$11d87f3f76e88657$export$b4a036af3fc0b032","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","dayOfWeek","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","$11d87f3f76e88657$export$1b96692a1ba042ac","Date","now","$11d87f3f76e88657$export$93522d1a439f3617","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","$11d87f3f76e88657$export$5107c82f94518f5c","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","undefined","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","_ref","_ref2","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","_$11d87f3f76e88657$va","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","_iterator","_createForOfIteratorHelper","_step","s","n","done","type","err","e","f","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","disambiguation","arguments","length","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","setFullYear","setHours","offsetBefore","offsetAfter","valid","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$35ea8db9cb2ccb90$export$d3b7288e7994edea","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","$35ea8db9cb2ccb90$export$680ea196effce5f","calendarDate","copy","$735220c2d4774dd3$export$c4e2ecac49351ef2","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","years","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","maxYear","_mutableDate_calendar_isInverseEra","_mutableDate_calendar","call","maxMonth","_date_calendar_isInverseEra","_date_calendar","monthsInYear","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","_mutable_calendar_isInverseEra","_mutable_calendar","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","remainder","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$var$DATE_TIME_DURATION_RE","_wrapRegExp","negative","$fae977aafc393c5c$var$requiredDurationTimeGroups","$fae977aafc393c5c$var$requiredDurationGroups","concat","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","_m_","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$fae977aafc393c5c$export$ecae829bb3747ea6","_match_groups","_match_groups1","_match_groups2","_match_groups3","_match_groups4","_match_groups5","_match_groups6","_match_groups7","_match_groups8","parseDurationGroup","group","isNegative","replace","_unused","groups","hasRequiredGroups","some","durationStringIncludesTime","hasRequiredDurationTimeGroups","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","$35ea8db9cb2ccb90$var$_type","WeakMap","_classCallCheck","$cUVuN$_","Array","_len","_key","_$35ea8db9cb2ccb90$va","_$35ea8db9cb2ccb90$va2","_createClass","cycle","toDate","toString","$35ea8db9cb2ccb90$var$_type1","$35ea8db9cb2ccb90$var$_type2","_len2","_key2","_$35ea8db9cb2ccb90$va3","_$35ea8db9cb2ccb90$va4","$35ea8db9cb2ccb90$var$_type3","_len3","_key3","_$35ea8db9cb2ccb90$va5","_$35ea8db9cb2ccb90$va6","toAbsoluteString","toISOString","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","_ref3","_ref4","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","_ref5","_inherits","_super","_createSuper","_this","_get","_getPrototypeOf","prototype","_end","endYear","endMonth","endDay","_$62225008020f0a13$va","startMonth","startDay","cur","next","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","_ref6","_super2","_this2","$8d73d47422ca7302$var$toGregorian","_ref7","_ref8","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","_ref9","_super3","_$5f31bd6f0c8940b2$va","_$5f31bd6f0c8940b2$va2","$5f31bd6f0c8940b2$var$toGregorian","_$5f31bd6f0c8940b2$va3","_$5f31bd6f0c8940b2$va4","_ref10","_ref11","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","_ref12","_super4","_this4","indianYear","leapMonth","indianMonth","indianDay","mDay","_ref13","_ref14","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","_$f2f3e0e3a817edbd$ex","_super5","_this5","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","_$f2f3e0e3a817edbd$ex2","_super6","_this6","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","startDays","endDays","d","yearLength","monthLength","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","_$b956b2d7a6cf451f$va","_$b956b2d7a6cf451f$va2","$b956b2d7a6cf451f$export$d72e0c37005a4914","_$b956b2d7a6cf451f$ex","_super7","_$b956b2d7a6cf451f$va3","_$b956b2d7a6cf451f$va4","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","_$b956b2d7a6cf451f$ex2","_super8","_this8","_$b956b2d7a6cf451f$va5","_$b956b2d7a6cf451f$va6","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","$fb18d541ea1ad717$var$getCachedDateFormatter","format","formatRange","formatRangeToParts","startParts","endParts","_toConsumableArray","map","p","_objectSpread","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","parseInt","find"],"sources":["C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\index.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\CalendarDate.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\manipulation.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\conversion.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\GregorianCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\utils.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\queries.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\weekStartData.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\string.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\JapaneseCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\BuddhistCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\TaiwanCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\PersianCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IndianCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IslamicCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\HebrewCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\EthiopicCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\createCalendar.ts","C:\\Users\\pk117\\Desktop\\Personal\\pro10150.github.io\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {\n  AnyCalendarDate,\n  AnyTime,\n  AnyDateTime,\n  Calendar,\n  DateDuration,\n  TimeDuration,\n  DateTimeDuration,\n  DateFields,\n  TimeFields,\n  DateField,\n  TimeField,\n  Disambiguation,\n  CycleOptions,\n  CycleTimeOptions\n} from './types';\n\nexport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nexport {GregorianCalendar} from './calendars/GregorianCalendar';\nexport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nexport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nexport {TaiwanCalendar} from './calendars/TaiwanCalendar';\nexport {PersianCalendar} from './calendars/PersianCalendar';\nexport {IndianCalendar} from './calendars/IndianCalendar';\nexport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nexport {HebrewCalendar} from './calendars/HebrewCalendar';\nexport {EthiopicCalendar, EthiopicAmeteAlemCalendar, CopticCalendar} from './calendars/EthiopicCalendar';\nexport {createCalendar} from './createCalendar';\nexport {\n  toCalendarDate,\n  toCalendarDateTime,\n  toTime,\n  toCalendar,\n  toZoned,\n  toTimeZone,\n  toLocalTimeZone,\n  fromDate,\n  fromAbsolute\n} from './conversion';\nexport {\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  isEqualDay,\n  isEqualMonth,\n  isEqualYear,\n  isToday,\n  getDayOfWeek,\n  now,\n  today,\n  getHoursInDay,\n  getLocalTimeZone,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  endOfMonth,\n  endOfWeek,\n  endOfYear,\n  getMinimumMonthInYear,\n  getMinimumDayInMonth,\n  getWeeksInMonth,\n  minDate,\n  maxDate,\n  isWeekend,\n  isWeekday\n} from './queries';\nexport {\n  parseDate,\n  parseDateTime,\n  parseTime,\n  parseAbsolute,\n  parseAbsoluteToLocal,\n  parseZonedDateTime,\n  parseDuration\n} from './string';\nexport {DateFormatter} from './DateFormatter';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // @ts-ignore\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in milliseconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate | AnyDateTime> = date.copy();\n  let days = 'hour' in mutableDate ? addTimeFields(mutableDate, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.weeks != null && duration.weeks !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      weeks: duration.weeks,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop()!;\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\n/**\n * Takes a Unix epoch (milliseconds since 1970) and converts it to the provided time zone.\n */\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\n/**\n * Takes a `Date` object and converts it to the provided time zone.\n */\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone: string | null = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone!;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string): string | undefined {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      if (region) {\n        cachedRegions.set(locale, region);\n      }\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? undefined : part;\n}\n\nfunction getWeekStart(locale: string): number {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return region ? weekStartData[region] || 0 : 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region!] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AR: 1,\n  AT: 1,\n  AU: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CN: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, DateTimeDuration, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::?(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::?(\\d{2}))?)|Z)$/;\nconst DATE_TIME_DURATION_RE =\n    /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst requiredDurationTimeGroups = ['hours', 'minutes', 'seconds'];\nconst requiredDurationGroups = ['years', 'months', 'weeks', 'days', ...requiredDurationTimeGroups];\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\n/**\n * Parses an ISO 8601 duration string (e.g. \"P3Y6M6W4DT12H30M5S\").\n * @param value An ISO 8601 duration string.\n * @returns A DateTimeDuration object.\n */\nexport function parseDuration(value: string): Required<DateTimeDuration> {\n  const match = value.match(DATE_TIME_DURATION_RE);\n\n  if (!match) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const parseDurationGroup = (\n    group: string | undefined,\n    isNegative: boolean,\n    min: number,\n    max: number\n  ): number => {\n    if (!group) {\n      return 0;\n    }\n    try {\n      const sign = isNegative ? -1 : 1;\n      return sign * parseNumber(group.replace(',', '.'), min, max);\n    } catch {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  };\n\n  const isNegative = !!match.groups?.negative;\n\n  const hasRequiredGroups = requiredDurationGroups.some(group => match.groups?.[group]);\n\n  if (!hasRequiredGroups) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n  }\n\n  const durationStringIncludesTime = match.groups?.time;\n\n  if (durationStringIncludesTime) {\n    const hasRequiredDurationTimeGroups = requiredDurationTimeGroups.some(group => match.groups?.[group]);\n    if (!hasRequiredDurationTimeGroups) {\n      throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n  }\n\n  const duration: Mutable<DateTimeDuration> = {\n    years: parseDurationGroup(match.groups?.years, isNegative, 0, 9999),\n    months: parseDurationGroup(match.groups?.months, isNegative, 0, 12),\n    weeks: parseDurationGroup(match.groups?.weeks, isNegative, 0, Infinity),\n    days: parseDurationGroup(match.groups?.days, isNegative, 0, 31),\n    hours: parseDurationGroup(match.groups?.hours, isNegative, 0, 23),\n    minutes: parseDurationGroup(match.groups?.minutes, isNegative, 0, 59),\n    seconds: parseDurationGroup(match.groups?.seconds, isNegative, 0, 59)\n  };\n\n  if (duration.hours !== undefined && ((duration.hours % 1) !== 0) && (duration.minutes || duration.seconds)) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  }\n\n  if (duration.minutes !== undefined && ((duration.minutes % 1) !== 0) && duration.seconds) {\n    throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n  }\n\n  return duration as Required<DateTimeDuration>;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n    }\n\n    if (date.year === 1 && idx >= 0) {\n      let [, startMonth, startDay] = ERA_START_DATES[idx];\n      date.month = Math.max(startMonth, date.month);\n\n      if (date.month === startMonth) {\n        date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let cur = ERA_START_DATES[era];\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      // 9999 gregorian is the maximum year allowed.\n      return 9999 - cur[0] + 1;\n    }\n\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    return date.era === 'before_minguo' ? 9999 : 9999 - TAIWAN_ERA_START;\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    // 9999-12-31 gregorian is 9920-10-10 indian.\n    // Round down to 9919 for the last full year.\n    return 9919;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    // 9999 gregorian\n    return 9665;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    // 6239 gregorian\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(epoch: number, jd: number) {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n  return [year, month, day];\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    let era = 'AM';\n    if (year <= 0) {\n      era = 'AA';\n      year += AMETE_MIHRET_DELTA;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n    // Round down to 9991 for the last full year.\n    // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n    return date.era === 'AA' ? 9999 : 9991;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(ETHIOPIC_EPOCH, jd);\n    year += AMETE_MIHRET_DELTA;\n    return new CalendarDate(this, 'AA', year, month, day);\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  getYearsInEra(): number {\n    // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n    return 9999;\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let [year, month, day] = julianDayToCE(COPTIC_EPOCH, jd);\n    let era = 'CE';\n    if (year <= 0) {\n      era = 'BCE';\n      year = 1 - year;\n    }\n\n    return new CalendarDate(this, era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // 9999-12-30 gregorian is 9716-02-20 coptic.\n    // Round down to 9715 for the last full year.\n    // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n    return date.era === 'BCE' ? 9999 : 9715;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n    // https://bugs.webkit.org/show_bug.cgi?id=241564\n    if (resolvedOptions.calendar === 'ethiopic-amete-alem') {\n      resolvedOptions.calendar = 'ethioaa';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey)!;\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean | null = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean | null = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour')!.value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour')!.value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"],"mappings":"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CJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;EACJC,EAAA,EAAI;AACN;AD1FO,SAASC,0CAAUC,CAAY,EAAEC,CAAY;EAClDA,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}