{"ast":null,"code":"import _classCallCheck from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"C:/Users/pk117/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport var YearParser = /*#__PURE__*/function (_Parser) {\n  _inherits(YearParser, _Parser);\n  var _super = _createSuper(YearParser);\n  function YearParser() {\n    var _this;\n    _classCallCheck(this, YearParser);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"priority\", 130);\n    _defineProperty(_assertThisInitialized(_this), \"incompatibleTokens\", [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"]);\n    return _this;\n  }\n  _createClass(YearParser, [{\n    key: \"parse\",\n    value: function parse(dateString, token, match) {\n      var valueCallback = function valueCallback(year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === \"yy\"\n        };\n      };\n      switch (token) {\n        case \"y\":\n          return mapValue(parseNDigits(4, dateString), valueCallback);\n        case \"yo\":\n          return mapValue(match.ordinalNumber(dateString, {\n            unit: \"year\"\n          }), valueCallback);\n        default:\n          return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(_date, value) {\n      return value.isTwoDigitYear || value.year > 0;\n    }\n  }, {\n    key: \"set\",\n    value: function set(date, flags, value) {\n      var currentYear = date.getFullYear();\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setHours(0, 0, 0, 0);\n        return date;\n      }\n      var year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setFullYear(year, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n  }]);\n  return YearParser;\n}(Parser);","map":{"version":3,"names":["Parser","mapValue","normalizeTwoDigitYear","parseNDigits","YearParser","_Parser","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_defineProperty","_assertThisInitialized","_createClass","key","value","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","ordinalNumber","unit","validate","_date","set","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","setFullYear","setHours","era"],"sources":["C:/Users/pk117/Desktop/Personal/pro10150.github.io/node_modules/date-fns/parse/_lib/parsers/YearParser.mjs"],"sourcesContent":["import { Parser } from \"../Parser.mjs\";\r\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\r\n\r\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\r\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\r\n// |----------|-------|----|-------|-------|-------|\r\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\r\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\r\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\r\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\r\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\r\nexport class YearParser extends Parser {\r\n  priority = 130;\r\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\r\n\r\n  parse(dateString, token, match) {\r\n    const valueCallback = (year) => ({\r\n      year,\r\n      isTwoDigitYear: token === \"yy\",\r\n    });\r\n\r\n    switch (token) {\r\n      case \"y\":\r\n        return mapValue(parseNDigits(4, dateString), valueCallback);\r\n      case \"yo\":\r\n        return mapValue(\r\n          match.ordinalNumber(dateString, {\r\n            unit: \"year\",\r\n          }),\r\n          valueCallback,\r\n        );\r\n      default:\r\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\r\n    }\r\n  }\r\n\r\n  validate(_date, value) {\r\n    return value.isTwoDigitYear || value.year > 0;\r\n  }\r\n\r\n  set(date, flags, value) {\r\n    const currentYear = date.getFullYear();\r\n\r\n    if (value.isTwoDigitYear) {\r\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\r\n        value.year,\r\n        currentYear,\r\n      );\r\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\r\n      date.setHours(0, 0, 0, 0);\r\n      return date;\r\n    }\r\n\r\n    const year =\r\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\r\n    date.setFullYear(year, 0, 1);\r\n    date.setHours(0, 0, 0, 0);\r\n    return date;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}